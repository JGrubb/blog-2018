Post.create!([
  {title: "First steps with Drupal - content types", body: "See the previous chapter on [installing Drupal](/posts/278-installing-drupal/).\r\n\r\n---\r\n\r\nHi there, and congrats on making it this far.  You should be looking at a screen that looks like this --\r\n\r\n![Drupal Welcome Screen](https://dl.dropboxusercontent.com/s/3qzfwq4zbfm70eg/Screen%20Shot%202016-04-07%20at%2010.58.09%20AM.png?dl=0)\r\n\r\nCongrats, you've just set up a website with arguably the most advanced CMS in the world!\r\n\r\n---\r\n\r\n### Creating Content\r\n\r\nThis is what a Content Mnagament System is for after all.  If you followed the \"standard install\", then you have a couple of different choices.  In Drupal parlance, these are called \"Content Types\" and you have two of them so far - Basic Page and Article.\r\n\r\nSo what are content types?\r\n\r\nI like to think of content types as the \"things\" on your website.  These can be articles on a blog site, items in your catalog on an e-commerce site, pets for adoption on the local SPCA site, or really anything that you want to post on your site.  In Drupal parlance we call them \"Nodes\".  Node was chosen for it's deliberate vagueness, just go with it for now.  Those different types of content that you want to put on your site - blog posts, pets - are appropriately known as \"content types\".  You can make as many of them as you want, they're just one way to categorize your content into the same kind of \"thing\".\r\n\r\nSo let's create a new article.  Feel free to explore the admin menu, which should be visible at this point or you can just head to [http://localhost:8888/node/add](http://localhost:8888/node/add).  That's where we get started.  I'm assuming no prior web development experience, but I am assuming that you've probably at least uploaded an image or two, and filled in some forms on the web before.  That's all you have to do here.  \r\n\r\nDrupal 8's got some nice new options with some nice new polish for folks who are creating the content, but we're not going to get into that now.  Let's get our hands dirty.\r\n\r\n### The Drupalnoobs conference\r\n\r\nThis conference will be for newcomers to Drupal and will feature lots of session about all aspects of getting started with Drupal.  The sessions will be lead by experienced and established Drupal developers who will present some pretty awesome material.  The sessions will be recorded and put up on YouTube somewhere, so after the conference is done we'd like to put the videos up on the website.  We'd like to group all the sessions into different tracks like \"design\" and \"business\" and \"completely new to all of this\".\r\n\r\nNaturally, we need a website to hold all of this stuff so that's what we're going to build and hopefully come out on the other side with a bit more grounding in how to get things done with Drupal.", slug: "first-steps-drupal", summary: "", previous_id: 278, published: true, pub_date: "2016-04-07 15:12:49"},
  {title: "Drupal logstash syslog config", body: "This one really took longer than it needed to.\r\n\r\nIf you're here, hopefully you've already been through [this lesson on setting up the full ELK stack](https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-4-on-ubuntu-14-04) with Logtash-Forwarder thrown in to boot.  For me it pretty much ran as intended from top to bottom, so hopefully you're already getting data into Elasticsearch and are flummoxed by how every single other logstash config out there to parse your syslog data doesn't seem to do the job and is still just treating it like every other syslog message.\r\n\r\n#### The rest of the steps to configure Drupal/Logstash\r\n\r\n**Drupal's \"syslog facility\" setting**\r\n\r\nThis is more or less the key.  You have to dig around in Drupal, as well as your webserver and make sure that Drupal is logging to it's own log.  By default it'll just go to syslog and then you'll have a hell of a time distinguishing messages from Drupal on the way in.  \r\n\r\nIf you recall your Logstash-Forwarder config, you tagged the syslog watcher with a `\"type\": \"syslog\"` bit.  This is really the only info that logstash has at the point that you're setting up your input filters/grok config.\r\n\r\nRegardless of Linux flavor, follow this guide to set up the syslog module to point to a logfile of your choosing - [https://www.drupal.org/documentation/modules/syslog](https://www.drupal.org/documentation/modules/syslog).  I just copied everything in here, so I now have `/var/log/drupal.log` and it works just fine.  The only thing I haven't figured out yet is that now Drupal is logging to both syslog and drupal.log, so somebody tell me how to stop that from happening.\r\n\r\n**New Logstash-forwarder config**\r\n\r\nYou'll just need to a) remove the old syslog watcher from your Logstash-Forwarder (henceforth LF) config and b) tell it to now watch the new drupal.log instead.  This took the relevant bits of my LF config from this \r\n\r\n~~~json\r\n    {\r\n      \"paths\": [\r\n        \"/var/log/syslog\",\r\n        \"/var/log/auth.log\"\r\n       ],\r\n      \"fields\": { \"type\": \"syslog\" }\r\n    }\r\n~~~\r\n\r\nto this \r\n\r\n~~~json\r\n    {\r\n      \"paths\": [\r\n        \"/var/log/drupal.log\"\r\n       ],\r\n      \"fields\": { \"type\": \"drupal\" }\r\n    }\r\n~~~\r\n\r\nDon't restart LF just yet, we have to config Logstash to understand what to do with input of \"type: drupal\" first.\r\n\r\n**New Logstash config**\r\n\r\nThis is where I wasted most of my time over the last few days.  I was under the mistaken impression that I could perform some kind of introspection into the fields that were parsed out and then tell Logstash to do this or that with them.  As far as I can tell, you'd need to use the \"Ruby\" Logstash filter to do that, which I didn't feel like this was that complicated a use-case if I could just figure out the \"right\" way to do it.\r\n\r\nAnyway, you've probably already stumbled across this - [https://gist.github.com/Synchro/5917252](https://gist.github.com/Synchro/5917252), and this [https://www.drupal.org/node/1761974](https://www.drupal.org/node/1761974) both of which, annoyingly, show the same useless config (for me, anyway).\r\n\r\nMy logs look like this -- \r\n\r\n~~~\r\nOct  4 08:52:34 690elwb07 drupal: http://www.biosciencetechnology.com|1443963154|php|162.220.4.130|http://www.biosciencetechnology.com/news/2011/04/students-prediction-points-way-hot-dense-super-earth||0||Notice: Trying to get property of non-object in abm_metadata_page_alter() (line 41 of /var/www/cascade/prod/brandsites_multi.com/htdocs/docroot/sites/all/modules/custom/abm_metadata/abm_metadata.module).\r\n~~~\r\n\r\nThe config on that page is presumably looking for a string that begins with \"http\", which this clearly does not.  Here's the config for this particular sequence.\r\n\r\n~~~\r\nfilter {\r\n        if [type] == \"drupal\" {\r\n                date {\r\n                        match => [ \"timestamp\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]\r\n                }\r\n                grok {\r\n                        match => [ \"message\", \"%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\\[%{POSINT:syslog_pid}\\])?: https?://%{HOSTNAME:drupal_vhost}?\\|%{NUMBER:drupal_timestamp}\\|(?<drupal_action>[^\\|]*)\\|%{IP:drupal_ip}\\|(?<drupal_request_uri>[^\\|]*)\\|(?<drupal_referer>[^\\|]*)\\|(?<drupal_uid>[^\\|]*)\\|(?<drupal_link>[^\\|]*)\\|(?<drupal_message>.*)\" ]\r\n                }\r\n        }\r\n}\r\n~~~\r\n\r\nNow restart Logstash, restart LF, and carry on.", slug: "drupal-logstash-syslog-config", summary: "", previous_id: nil, published: true, pub_date: "2015-10-04 12:32:00"},
  {title: "Ignored by dinosaurs - 3", body: "<h4>The open source website system for musical artists</h4>\r\n\r\n<p>It's so <em>obvious</em> when I say it out loud.  (edit: that's not exactly the most succinct tagline though, so help me out.)</p>  \r\n\r\n<p>If you're just joining the party and you don't know what open source is, <a href=\"http://ignoredbydinosaurs.com/2010/05/open-source-and-why-its-cool/\">check this out</a>.  If we haven't met before, this is <a href=\"http://ignoredbydinosaurs.com/category/personal/\">some more of my backstory</a> over the last year or so.</p>\r\n\r\n<h4>Pre-ramble</h4>\r\n\r\n<p>Forgive me if you've read some of this here a hundred times.  Part of my process is to refine repeatedly.</p>\r\n\r\n<p>I'm a musician.  I'm 32.  My entire professional career has been spent behind the wheel of either an upright bass, an electric bass, or a pair of turntables.  In particular the years from 2003 to 2009 were spent on the road with the band <a href=\"http://railroadearth.com/\">Railroad Earth</a>.  About 2 years ago I started teaching myself to program.  I wasn't really sure where I'd end up, but it seemed like a good skill to have for the inevitable day that I just couldn't keep touring for a living anymore.</p>\r\n<!--break-->\r\n<h4>Recent history</h4>\r\n\r\n<p>I quit the band and started making a living as a web programmer.  I found a client who needed a me and have since been busy doing lots of nice stuff with a designer who I get along great with.  About a month ago I got another gig doing a little thing for this environmental non-prof out in San Francisco.  I built exactly the thing they asked me to in both <a href=\"http://rubyonrails.org/\">Ruby on Rails</a> and <a href=\"http://drupal.org/\">Drupal</a>.  I built the Ruby version first with lots of help from a friend in about 5 days.  I spent 3 agonizing days trying to launch it on a shared webserver before giving up and rebuilding the entire thing in Drupal with 36 hours left until the deadline.  The Drupal version lit up the first time I flipped on the switch and <span class=\"highlight\">saved my bacon.</span>  I had already bought a ticket to DrupalCon - happening in San Francisco a few weeks after that.</p>\r\n\r\n<h4>Drupal (droo'-pul)</h4>\r\n\r\n<p>While at DrupalCon I drank lots and lots and <em>lots</em> of open source Kool-Aid.  The buzz that I got at DrupalCon was exactly like the buzz I used to get at music festivals we'd play every summer.  Tons of cool people hanging out, sharing ideas, drinking beer, meeting new cool people, and being excited about the same thing - the same cool, creative thing.  I went to sessions for geeks, for marketing folks, for freelancers, for non-profits, for you name it.</p>\r\n\r\n<p>I came back a Drupal developer.</p>\r\n\r\n<p>One of the cool tools that I was introduced to there was called <a href=\"http://openatrium.com/\">OpenAtrium</a>.  It's basically a tool for managing projects, a thing that becomes very necessary the instant you get off the road and start building websites.  I had tried out <a href=\"http://basecamphq.com/\">BaseCamp</a> with my new gig and liked it a lot.  OA was essentially an open source variation, built on top of Drupal.  Many of the contributions of the Drupal developer community were rolled into one comprehensive, focused package that was probably done in a fraction of the time that an enterprise team would taken to do a proprietary version of something similar.</p>\r\n\r\n<p>Open source is a very powerful idea.  Drupal is free.  All the cool things that people have built to customize and extend Drupal are free.  That's why Open Atrium is free.</p>\r\n\r\n<h4>The open source website system for musical artists</h4>\r\n\r\n<p>So a cool feature of Drupal that's only recently getting attention paid to it is the \"installation profile\".  That's how OA works, and it basically means that you can set up Drupal how you want it (you can quite literally do almost anything that involves the internet with Drupal) and build a script that installs it that way anywhere.  You can have, for example, a <em>real</em> band website, for free, right out of the box.  The <a href=\"http://drupal.org/handbook/modules/blog\">blog</a>, the <a href=\"http://drupal.org/project/calendar\">tour dates</a>, the <a href=\"http://drupal.org/project/fbconnect\">Facebook</a> and <a href=\"http://drupal.org/project/flickr\">Flickr</a> integration, the <a href=\"http://drupal.org/project/advanced_forum\">forum</a>, the <a href=\"http://drupal.org/project/ubercart\">eCommerce</a> - virtually all of the pieces are <a href=\"http://drupal.org/project/Modules\">laying right there</a>, waiting to be assembled by those of us who know how.  Those of us who need something that doesn't exist yet write it and give it back to everyone else using the system.  It's constantly improved.  The roadmap for this thing could be ridiculously cool.  The <a href=\"http://drupal.org/project/Services\">API possibilities</a> if a bunch of people started using this thing?  Come on!</p>\r\n\r\n<p>I know, the irony of this being a Wordpress powered site has occurred to me, but before I go and uproot and move this blog to Drupal so that we can get to collaborating for real, does this sound like a good idea?  One that could maybe change the game?</p>\r\n\r\n<h4>Pssst, Drupal devs...</h4>\r\n\r\n<p>I don't know if you've noticed, but the guys who made up OA and PressFlow and OpenPublish are making a damn decent business as consultants for their product.  I don't know if there's any money to be made here or not, but this market has been waiting for this idea.  Hell, <a href=\"http://groups.drupal.org/node/1041\">Drupal has been waiting for this idea</a>.  I know a <em>lot</em> of people in the music biz that would probably be delighted to help us out.  We can get press and we can get traction.  Anybody wanna help out?</p>\r\n\r\n<p>Edit: <a href=\"http://acquia.com/blog/business-models-drupal-distributions\">the post that put the last piece of this idea into place</a>.  Thanks, Dries!</p>", slug: "ignored-dinosaurs-3", summary: "<h2>The open source website system for musical artists</h2>\r\n\r\n<p>It's so <em>obvious</em> when I say it out loud.  (edit: that's not exactly the most succinct tagline though, so help me out.)</p>  \r\n\r\n<p>If you're just joining the party and you don't know what open source is, <a href=\"http://ignoredbydinosaurs.com/2010/05/open-source-and-why-its-cool/\">check this out</a>.  If we haven't met before, this is <a href=\"http://ignoredbydinosaurs.com/category/personal/\">some more of my backstory</a> over the last year or so.</p>\r\n\r\n<h2>Pre-ramble</h2>\r\n\r\n<p>Forgive me if you've read some of this here a hundred times.  Part of my process is to refine repeatedly.</p>\r\n\r\n<p>I'm a musician.  I'm 32.  My entire professional career has been spent behind the wheel of either an upright bass, an electric bass, or a pair of turntables.  In particular the years from 2003 to 2009 were spent on the road with the band <a href=\"http://railroadearth.com/\">Railroad Earth</a>.  About 2 years ago I started teaching myself to program.  I wasn't really sure where I'd end up, but it seemed like a good skill to have for the inevitable day that I just couldn't keep touring for a living anymore.</p>", previous_id: 178, published: true, pub_date: "2010-06-02 00:13:42"},
  {title: "Ignored by dinosaurs - part 2", body: "<blockquote>I realized about a year ago that nobody anywhere even had a clue, never mind a plan that saved what was worth saving about the music industry – the music part.</blockquote>\r\n\r\n---\r\n\r\n<p>Guilty.  Most of us reading this are.  There were several entire generations that went by where it was a perfectly logical thing to associate money and music as somehow being comfortable companions if not downright synonymous.  It was BIG business - not in the way that defense contracting is, but it was perfectly logical for a certain subset of money and attention seeking individuals to get into the music business.  And you didn't even have to have musical talent!  In fact, there was more money in it for those who didn't!  Word eventually got around and by the late 80s most labels heads weren't music lovers but lawyers.  The snake started eating its tail sometime around then.  Nirvana was arguably the last great, game-changing band that came out of that entire era.</p>\r\n\r\n<p>I don't <em>mean</em> to sound like one of those bloviating music biz pundits.  So anyway -></p>\r\n<!--break-->\r\n<p>I've held a simple and obvious belief for a few years now while transitioning from a musician into a programmer/musician.  If the internet tore down the old edifice, the internet will build the new one.  There are any number of eCommerce solutions out there for bands to <a href=\"http://www.cdbaby.com/\">sell their stuff</a> online.  There are any number of solutions out there to make <a href=\"http://bandzoogle.com/\">building your band's website</a> an easy and code-free endeavor.  There are any number of solutions out there to make it easier to <a href=\"http://www.artistdata.com/us/\">spread your word</a>.  These ideas are good ones, but still missing the target (in my humblest of opinions).  <span class=\"highlight\">The basic problem with all of these ideas is that they are still trying to monetize someone else's music.</span>  That scheme is the most fundamental cornerstone of the edifice that just fell.  Any successful new paradigm <em>must</em> throw it away.</p>\r\n\r\n<p>Admittedly, it's the most difficult one to throw away.  However, imagine if a community emerged in pursuit of throwing this stone away. Not just a programmer or a company trying to reinvent the wheel and somehow still feed themselves, but an ecosystem of people who did it for the good of music itself in their free time, without the pressures of business and investors and expectations on them.</p>\r\n\r\n<p>Sorta like an open source project, I guess...</p>", slug: "ignored-dinosaurs-part-2", summary: "<blockquote>I realized about a year ago that nobody anywhere even had a clue, never mind a plan that saved what was worth saving about the music industry – the music part.</blockquote>\r\n\r\n<p>=========</p>\r\n\r\n<p>Guilty.  Most of us reading this are.  There were several entire generations that went by where it was a perfectly logical thing to associate money and music as somehow being comfortable companions if not downright synonymous.  It was BIG business - not in the way that defense contracting is, but it was perfectly logical for a certain subset of money and attention seeking individuals to get into the music business.  And you didn't even have to have musical talent!  In fact, there was more money in it for those who didn't!  Word eventually got around and by the late 80s most labels heads weren't music lovers but lawyers.  The snake started eating its tail sometime around then.  Nirvana was arguably the last great, game-changing band that came out of that entire era.</p>\r\n\r\n<p>I don't <em>mean</em> to sound like one of those bloviating music biz pundits.  So anyway -></p>", previous_id: 214, published: true, pub_date: "2010-05-31 16:54:36"},
  {title: "Wanna see way too much Flash?", body: "<a href=\"http://www.themintla.com/\">Try this</a>.", slug: "wanna-see-way-too-much-flash", summary: "<a href=\"http://www.themintla.com/\">Try this</a>.", previous_id: nil, published: true, pub_date: "2009-08-01 04:44:28"},
  {title: "1st set meditation", body: "<p>Lots of personal posts to come these next few weeks, I expect.  I wanted to take this opportunity during setbreak in Woodstock to set down a few things that I was thinking about during the first set.</p>\r\n\r\n<p>I've gotten a few cautionary letters from concerned onlookers of my situation, most of them warning me of the pitfalls of this decision that I've made.  First, I want to let you know that I've been making the internal preparations for this move for well over a year.  It was about that long ago that the force inside me that's guided me very reliably through my first 31 years here on earth began to lead me to this public announcement of my decision.  Second, I want you to know that I've never ignored that force.  That force told me to print up business cards the week before I met John Skehan for the first time.  Third, I have no idea what I'd do without that force.  I might have had some crappy job that I hated for the last seven years instead of touring the world with a fantastic band.  Fourth, trading this interesting, creative job down for some cubicle job programming VB is not what I have in mind (no offense to VB).  I have a very specific, interesting, creative idea that I've been working on that I'm gonna have a whack at, but it's a long shot.  I have some other interesting, creative options on the table, and I feel hopeful that one of them will pan out.  Fifth, and this is probably going to be the most difficult for some of you to believe, but the worst case scenario - unemployment, bankruptcy, foreclosure - still makes me feel more optimistic about the future than the prospect of ignoring that force.</p>\r\n\r\n<p>That's all.  Gotta finish a show.</p>", slug: "1st-set-meditation", summary: "<p>Lots of personal posts to come these next few weeks, I expect.  I wanted to take this opportunity during setbreak in Woodstock to set down a few things that I was thinking about during the first set.</p>", previous_id: 173, published: true, pub_date: "2009-11-15 07:03:06"},
  {title: "Chapter 6a - Version Control", body: "<p>So it's been a while, eh?  Not too much in the mood to write about what I've learned when most of what I've learned is how much I have to learn, y'know?  Anyway, I've been back into Ruby on Rails lately, since Ruby has got to be the dead simplest real programming language out there.  Oh yeah, and I have a major project cooking on Rails, but I'll elaborate later.  Let's talk about version control...</p>\r\n\r\n<p>Let's pretend you're typing that last term paper in college.  This is the modern era, so we're using a word processing program.  That program has eaten a few of our papers over the course of our college career, so we know to save our paper often.  This is a huge paper, so we've also decided that it'd be prudent to save it under different names as it progresses so that we can go back in time to an earlier version with no hassle, y'know just in case we stray too far from the objective in the future.  This is basically the same idea behind version control.</p>\r\n\r\n<p>When dudes or dudettes are sitting at their text editors coding away at whatever they're coding, in whatever language, they're typing characters into a keyboard, just like I am now.  The difference with software is that there are usually numerous files that all relate to each other in some way, and a change in any one of those files will impact the entire application.   So say you make one little change here and another little change there, and then you skip over to another file and make a change there, and then you skip over to another file and make a couple of changes there.  How the hell are you supposed to keep track of all that?  Version control.</p>\r\n\r\n<p>Whatever the flavor - <a href=\"http://www.nongnu.org/cvs/\">CVS</a>, <a href=\"http://subversion.tigris.org/\">Subversion</a>, <a href=\"http://git-scm.com/\">Git</a> - all version control systems track changes made to the files in your fledging (or production) application.  The manner in which they do this varies from system to system, and they all have their proponents and detractors, but that you have GOT to be familiar with at least one of them is beyond dispute.  These will give you the ability to hack around all you want in the comfort of knowing that you can roll these changes back if you're not getting anywhere.</p>\r\n\r\n<p>Now, the only problem with all of these version control systems is that they don't track changes to databases.  The reason that this is a big deal is that the vast majority of large, modern, dynamic websites store a lot of data in their database.  Some content management systems like Drupal actually store templates that determine how the website gets rendered to your browser in their database by default.  You can change this if you know what you're doing, and that assumes a lot.  Nothing is going to change the fact that many database powered websites have to occasionally make changes to the layout (schema) of their database to incorporate new features and the like.  The new Like feature on that site probably has it's value stored in a column somewhere in a database.  What if that feature sucks or is buggy?  How can you roll back a database to an earlier state without using up your quota of blood pressure meds too soon?  Under traditional version control systems, you can't.</p>\r\n\r\n<p>Luckily, someone has figured this out for us.  It's called a \"migration\".  I'll be back.  I promise...</p>", slug: "chapter-6a-version-control", summary: "<p>So it's been a while, eh?  Not too much in the mood to write about what I've learned when most of what I've learned is how much I have to learn, y'know?  Anyway, I've been back into Ruby on Rails lately, since Ruby has got to be the dead simplest real programming language out there.  Oh yeah, and I have a major project cooking on Rails, but I'll elaborate later.  Let's talk about version control...</p>", previous_id: 65, published: true, pub_date: "2009-10-14 13:32:54"},
  {title: "My pipe dream for syncing files between environments", body: "### Problemspace\r\n\r\nWe recently migrated from using a local Drupal filesystem (Gluster) to using S3 to house our uploaded site assets.  This was relatively simple, and killed at least two birds for us, metaphorically speaking.  Some of my findings are chronicled in the previous post linked above.\r\n\r\nWe are loving that we don't have to worry about syncing files between environments anymore, which means that when we are developing a site locally, the image sources are all pointing to their S3 URLs and so everything Just Works.  The only tiny problem is that if anyone needs to upload an image in development it goes up to the same production S3 bucket.  Obviously this costs us next to nothing, but it bothers my sense of cleanliness.  \r\n\r\n### Solutionspace\r\n\r\nS3 has a \"lifecycle management\" feature that will let you Do Stuff with your bucket assets.  Do Stuff is things like delete assets after a certain period, or move them to another \"storage class\", which is not in the scope of this post...\r\n\r\nThe limitations of their lifecycle mgmt are a major bummer.  They can only be applied to directories within a bucket or to entire buckets themselves.  They cannot be applied (simply) to individual objects.  If they could, then the fix would be simple - have a hook on file uploads that adds a \"delete-after\" header to objects that are uploaded from anything but the production environment.\r\n\r\nI'm starting a new job in a few weeks, and they use Ceph for managing network files.  I haven't even gotten on board with this gig yet, so I don't know what's going on behind the scenes, but Ceph *does* have this individual object expiration feature, at least [according to their bug tracker](http://tracker.ceph.com/issues/4099).  I'm wondering if this can be brought to bear on this issue, because once you don't have to move or copy files between environments anymore, going back feels kind of anachronistic.", slug: "my-pipe-dream-syncing-files-between-environments", summary: "", previous_id: 286, published: true, pub_date: "2016-07-08 09:47:39"},
  {title: "What is my $PATH?", body: "I remember being very confused by this one early on.  There were boatloads of tutorials on how to change your $PATH, but what that even means in the first place I just kinda had to figure out over the course of it all.  It's actually pretty simple.  Here's my attempt.\r\n\r\nIf you're coming from a Windows background, and you were in the habit of being really fussy about where you installed software on the hard drive, you may have just known how to fire up any old piece of software on your system.  You navigated to the application in Windows Explorer and double clicked on it.  It was really simple.  That icon that you actually clicked on was the \"executable\", which is to say the file that starts the whole show.\r\n\r\nUnix, Linux, and Mac systems also have executables.  On a Mac, it's (represented by) the icon you click on to start the app.  When you start getting deeper into development and start using the command line more, you're eventually going to come across some installation instructions that advise you to \"update your path\" for some reason.  They usually give you a copy and paste thing to go along with it.  But what does it mean?\r\n\r\nLet me give you an example. Here's my path on this laptop right here --\r\n\r\n~~~bash\r\nMacPro-JGrubb 福 /usr/local/etc/ansible ➤ e0db473|master✓\r\n10165 ± : echo $PATH                                                                                                                                 [23h53m]\r\n/usr/local/heroku/bin:/Users/jgrubb/.rbenv/bin:/Users/jgrubb/.rbenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11/bin:/Users/jgrubb/.composer/vendor/bin\r\n~~~\r\n\r\nNow, never mind that there's a ton of garbage in there, and why is Heroku at the beginning of the path like that?  I don't even remember doing that.  Anyway, when you first start your computer up, or when you first start a shell session, your environment fires up and loads a bunch of configs.  One of the configs that it loads is the list of places to look for the aforementioned executables.  \r\n\r\nIn a nutshell, your computer is going to look down that path from left to right.  The different locations are separated by `:`, so that's a list of different locations on the computer that will be scanned to see that \"that thing\" is installed there.  For instance - the MacIntosh comes preinstalled with Vim and Ruby.  By default, stuff that comes with the OS is installed in `/usr/bin`.  But, if you want a more recent version of Ruby, you might install it into `/usr/local/bin` (this is where Homebrew puts much of its stuff).  If your path did not have `/usr/local/bin` before `/usr/bin`, you'd still be executing the system version of Ruby instead of the one you want.  It's really simple, but again - took me a while.\r\n\r\nSo, how do you change it?  Presuming you use Bash for a shell, you probably have a file called `~/.bashrc` or possibly `~/.bash_profile`.  If you don't, you can safely create either of those files and put in a line like this --\r\n\r\n~~~bash\r\nexport PATH=/usr/local/bin:/or/whatever/usually/bin:$PATH\r\n~~~\r\n\r\nThis just says \"hey, whatever my path is now, add those two directories to the beginning of it, and then assign that to be my new $PATH\".  \r\n\r\nQuestions?", slug: "what-is-my-path", summary: "", previous_id: nil, published: true, pub_date: "2015-06-25 20:30:00"},
  {title: "Chapter 5 - Domains", body: "Bollocks!!  <strong>Do not buy a domain from Yahoo.</strong>\r\n\r\nI just want to make sure that shows up in the description of search results, if there are any.  Now a parable...\r\n\r\n<!--break-->\r\n\r\nMany years ago it occured to me that if I didn't go and buy JohnnyGrubb.com, then I was stupid.  I had no idea how to make websites and no need for one whatsoever, but I did know enough to know that if I didn't buy my own friggin name then someday I might regret it.  So, in March 2006, I bought my own name for 5 years.  Doesn't that sound weird?   Yahoo gave me a great deal, or so I thought then.\r\n\r\nI soon started getting lots of emails exhorting me to host a website with them.  Come on, it's only $15 a month and we'll help you make the website.  It seemed like a good deal (it wasn't), so I did it- for about 6 months or so.  At some point I got a new Wachovia check card and didn't update my info with Yahoo and they shut me off.  Apparently when they shut me off, they also shut off access to my domain.  I didn't find this out until yesterday.  I'd kept an eye on it over the years to make sure that some Chinese company hadn't stolen it from me, and according to the records, I still owned it.  Registered with Yahoo.  Cool.\r\n\r\nSo, yesterday, as I was switching this website over to the new host (didn't even notice, did ya?), I got it into my head to try and point JohnnyGrubb.com over this way also.  I'm thinking that perhaps JG will be the more personal website - the one that deals more with music - and that this (ibD) will be the business (that's presuming there's business, I know).\r\n\r\nThis is when I discover that even though I own JG, Yahoo won't let me in so I can transfer it, or even point it where I want it to go.  So now it's time for a lesson that I learned the hard way over the last few days...\r\n\r\nWe'll skip the possibly fraudulent fiasco that is Yahoo Domains for now, and talk about what happens when you buy and host a domain/website.  If you're a musician and you only buy a domain so that nobody else can buy it out from underneath you, it stays parked wherever you bought it.  You can then go forward and decide to host a website with the company where it's registered, or you can wait and maybe host a website somewhere else.  If you decide to host somewhere else, then you have to do some configuring.  That domain that you bought is parked on a computer somewhere, and what you have to do is tell that computer to resolve any incoming requests made for johnnyGrubb.com, for example, into the proper numerical IP address for the website.  That computer is called a \"nameserver\", since its job on this earth is to take the english web address and translate it into a numerical IP address.  If you want to host the website somewhere else you have to login to your Domain Control Panel, they all have 'em, and tell that domain to point to your webhosts' nameserver.  This website, for example, is hosted at Media Temple, with a nameserver address of something like ns1.mediatemple.net.  I had to login over at GoDaddy and tell them that, since that's where the domain name is registered.  When you come here MediaTemple's nameserver gets the request and turns it into a number that the rest of their system can understand.  It's kinda complicated at first.  That's why it's good idea to buy the domain from the same place you're gonna host it, if you like things to be tidy.\r\n\r\nI just found this all out.  The hard way.\r\n\r\nSince Yahoo wouldn't let me in to JohnnyGrubb.com's domain control panel, I couldn't point my name to my new web host.  Bummer.  So I had to shell out another $10 to re-register my domain with Yahoo just so I could get in there and point it in the right direction.  Jerks.  Like I said, my registration for that domain name wasn't supposed to expire until 2012, but I figured that $10 is probably better than me spending until 2012 trying to get someone at Yahoo on the line.  They don't even have a customer service email.  What kinda shit is that?  I even dug up the email welcoming me to Yahoo domains and clicked on the link to my domain control panel, which promptly told me \"oh you must have decided to let your overpriced, crappy webhosting service lapse because we can't let you in there.  Sorry chump.\"\r\n\r\nLong story short.  If you're a casual user buy your domain at GoDaddy.  They're at least reputable enough and I had good experiences with their customer service during my period of hosting over there.  DO NOT buy a domain from Yahoo.\r\n\r\nBetter yet, ask me.  I'm getting the hang of this stuff.", slug: "chapter-5-domains", summary: "Bollocks!!  <strong>Do not buy a domain from Yahoo.</strong>\r\n\r\nI just want to make sure that shows up in the description of search results, if there are any.  Now a parable...", previous_id: 54, published: true, pub_date: "2009-06-11 16:12:01"},
  {title: "Chapter3 - devPlatform", body: "As in, what does that mean, anyway?  I'll try and keep it short.\r\n\r\nWhen I spoke of Ruby on Rails the other day as the 'hotsh!t dev platform of the day', I realized that it would need some clarification.  So let me clarify.\r\n\r\nCoding pretty much anything is a massive, time consuming job.  That's part of the reason that computer languages have evolved from 1s and 0s to Fortran to C to C++ to Java to Ruby: if you were to try and write the Twitter website in assembly language (binary), you'd be there coding for a very long time.  If you were to try and write Windows 7, you couldn't do it.  Hell, they can barely do it now.\r\n\r\nMan has devised a better way.  I wrote about some of it in the <a href=\"http://ignoredbydinosaurs.com/blog/?p=92\"><span style=\"text-decoration: underline;\">Database post</span></a>.  He has set to automating as much of the menial, repetitive work as possible so that the developer may set his mind toward accomplishing other tasks, like the fun bits of the application.  In the case of iPhone development, Apple has created an environment in which to write the apps, <a href=\"http://developer.apple.com/TOOLS/xcode/\"><span style=\"text-decoration: underline;\">X Code</span></a>.  X Code is itself an application that runs on your Mac just like any other application.  The nice thing about X Code is that Apple designed it specifically for the purposes of making applications for Macs and iPhones.\r\n\r\nHistory lesson, culled mostly from the Mac dev bible, <a href=\"http://www.amazon.com/Cocoa-Programming-Mac-OS-3rd/dp/0321503619/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1239052561&amp;sr=1-1\"><em><span style=\"text-decoration: underline;\">Cocoa Programming for Mac OS X</span></em></a>:\r\n\r\nApple computers was started years ago in a garage by two guys named Steve.  They're both very famous now, Steve W perhaps <em>slightly</em> less so.  The two guys named Steve decided that since they were both programmers and engineers, that perhaps they should hire a CEO type to help them with their rapidly growing company.  CEO guy came in and moved Steve J to some kind of powerless position in the company, so he split.  He started another company called NeXT.  They never did anything commercially successful, but they did develop an operating system and a platform for writing applications - one that started with a fairly significant library of code already put together to make the developers job that much quicker.  At some point, Apple was not doing well financially or otherwise and Microsoft came in and basically gave them a lifeline.  This was in the 90s.  Steve J at that point was an intensely innovative failure.  Funny, huh?\r\n\r\nAround this time Apple decided to buy NeXT computers along with the Operating System that they had developed.  Steve J was brought back as an advisor for a little bit before becoming CEO within a year.  The NeXT OS eventually became Mac OS X, which eventually became the iPhone OS.  The point is that even though the iPhone has only been around for less than 2 years now, the developmental lead-up took decades.  During that time, various developers decided that they would put together 'libraries' of code for making Macintosh applications and save themselves the time of having to rewrite all this code that's essentially \"boilerplate\", meaning the same in every app, there to provide low level functionality that the end user never encounters and is very rarely altered even by the developer though widely varying apps are coming out the other end.  Every language that's in any kind of wide use has it's own set of libraries, there to provide standard functionality for the programmer and standard sets of instructions for the computer to execute when certain functions are called within the app.\r\n\r\nOkay, sorry.  There's a lot in there that I wouldn't have understood 9 months ago, so let me break it down for you.\r\n\r\nWhen you tell X Code to start a new project, it asks you what kind of project you'd like to start.  It gives you the options of a couple of different layouts of iPhone apps.  Perhaps you'd care to build a navigation-based application.  That's when you use buttons to navigate through different tables of data and settings.  The Setting app on your (or your friends') iPhone is an example of a navigation-based app.  Maybe today you'd like a tab-bar based app.  This is like the iPod app on the iPhone.  You have a menu of a few pages at the bottom of the screen that take you to different pages in the app.  Maybe you just want a blank window because you're building a game that your crew can play in the bus between gigs.  Anyway, after you decide that, it puts together the skeleton of your application with a bunch of different chunks of code that every single app is going to need to run.  The developer then fills out the skeleton and a newborn baby application is brought into the world.  Apple calls their development framework Cocoa, and for iPhone it's Cocoa Touch.  Cocoa is just a collection of pre-compiled libraries of code lashed together to help make the dev process that much easier.  Cocoa has a name, so it seems like it should be a physical thing.  It's not.  This has been one of the hardest parts about this process to get my head around.  It's a bunch of code that someone else already wrote so that you don't have to.\r\n\r\nRuby on Rails is also a framework.  A big part of writing Rails apps is using a command called 'script'.  You call a script command to help you build these chunks of code, and the script automatically does a LOT of the tedious work for you.  I love this, because I don't have nearly the experience to write something from the ground up, and that sounds like a lot of wasted time besides.  Tweaking the generated code is then how the developer builds his app.  Brilliant.  This is what a development platform is.  This is why most Mac applications have that \"Mac-y\" look and feel.  This is why all these New-Web social networking sites have a that sorta clean, modern look and feel, and why so many of them employ Google maps as well as each other in their functionality.\r\n\r\nOnce you get your head around which platform you want to develop on (I'm thinking Rails to learn), then you can start learning your way around the API, which is where the real fun begins.  I'm not there yet, but will try to remember to link there when I am.", slug: "chapter-3-dev-platform", summary: "As in, what does that mean, anyway?  I'll try and keep it short.\r\n\r\nWhen I spoke of Ruby on Rails the other day as the 'hotsh!t dev platform of the day', I realized that it would need some clarification.  So let me clarify.\r\n\r\nCoding pretty much anything is a massive, time consuming job.  That's part of the reason that computer languages have evolved from 1s and 0s to Fortran to C to C++ to Java to Ruby: if you were to try and write the Twitter website in assembly language (binary), you'd be there coding for a very long time.  If you were to try and write Windows 7, you couldn't do it.", previous_id: 166, published: true, pub_date: "2009-04-07 17:18:27"},
  {title: "RTFM before you need to", body: "So this is it, my week in between my old job and my new job. And I'm bored out of my mind. So I'm going to do something I've never done before - write a blog post on my phone. We'll see how this goes. \r\n\r\n---\r\n\r\nI was texting w one of my former coworkers a little earlier today. He was picking my brain about how the AWS command line tools work and so I was explaining some things to him in too much detail. I've noticed this thing that I have where I want to explain the why of things and not just give a one liner that can be copied and pasted to accomplish a job. If this blog has any regular readers maybe you've noticed this as well. Whatever. \r\n\r\nSo he was kicking some cli one liners to me to look at and in one of them was providing incorrect arguments to one of the options. I referred him to the excellent documentation page on this particular command and I think he must've gotten it sorted out after that because i didn't hear back from him after. I realized consciously something that i guess I've been doing a lot of the last few years - reading a *lot* of documentation, *for fun*. \r\n\r\nI think one of the common modes to be in when you're reading documentation is that of trying to figure out a solution to a specific problem. I'm trying to figure out how to upload some files from my laptop to S3, so I'm researching the page for the correct arguments to pass. I'm trying to figure out how to avoid the N+1 problem on the blog listing page, so I'm reading up on which methods are available in the Django ORM. This is fine obviously, but I think what really separates senior devs from non-senior devs are aimless wanderings through the documentation for a project. \r\n\r\nIt's in these wanderings that you discover what a tool can do before you actually need it to. When the need finally does arrive, it's much less of an interruption to your workflow to look up the correct syntax for a feature that you already know exists. Otherwise you're stopping productive work for X amount of time to see if the your concept for the solution has some corresponding feature in said tool and by that time your flow is shot. \r\n\r\nSo when admonished to RTFM, take it as a passive aggressive offering of really good advice.", slug: "rtfm-you-need", summary: "", previous_id: nil, published: true, pub_date: "2016-07-18 16:17:02"},
  {title: "Chapter2 - Databases", body: "This part of the blog is going to be tough to write.  Not because I don't have much to say on the topic, but because I have frequent pangs of \"dude, you don't really know anything about any of this stuff\".  Then the other side of my brain speaks up. \"Dude, it's cool.  They know you're not a professor.  That's the point of this whole thing, right?  If someone wants hard facts and a professionally written tutorial on computer science, they'd probably go somewhere else.  If they're here, they're either a friend or an understanding onlooker, and either way they're probably well aware that you're just a bass player.  Nobody really expects that much from the bass player.\"  So, I'm on I 70 headed east across Kansas after selling the <em>shit </em>out of the Ogden theater this weekend.\r\n\r\nAnd now, my initial impressions on the theory and practice of the database.\r\n\r\nWhat the hell is a database?  Being a visual kind of thinker, I've been trying to come up with some sort of relatable analogy to help myself understand exactly what it is.\r\n\r\n\"It's a series of tables, populated with data, and the tables relate to each other.\"\r\n\r\nOkay.  What do you do with it?\r\n\r\n\"Well, once you have the data in your database, you can run queries on it.\"\r\n\r\nThat sounds like a lot of fun!  But what the hell does that mean?\r\n\r\n\"Well, queries are like a request that you make.  Say you have a database that's populated with every song that RRE has ever played at every show in every venue.  If you wanted to know what you played at a given venue the previous time that you were there, then you could query the database to give you the set list from that show.\"\r\n\r\nWell, that's cool.\r\n\r\n\"Yeah, but say you wanted to know how many times you've played Mighty River.  You could query the same database and get an answer on that, too.  Say you wanted to know the venues where you played it.  You could query that, too.\"\r\n\r\nOkay, I get it.  So a database is kind of like a big spreadsheet?\r\n\r\n\"Sort of, but not really.  You see a spreadsheet is basically one big monolithic sheet that stores your data in rows and columns; like a database, but a database is made up of many of those sheets, and the collection of those sheets and the way that they relate to each other, and the queries that you can then make of the data is what makes it a more useful tool than just a big sheet with some numbers on it.\"\r\n\r\nOkay.  So, how about an example?\r\n\r\nFor this, we shall turn to the web.  Actually, never mind because this is a blog which means that you don't need to turn at all.  Let's press Ctrl-T and get a fresh tab going in your browser and go on over to <a href=\"http://amazon.com\">Amazon</a>.  Mac users have the option of Cmd-clicking the link to open in a new browser tab, so you don't have to navigate away from me.\r\n\r\nOkay.  You see all that stuff on the page?  Just about everything there is stored in a big-ass database - all the text, all the ads, all the pictures.  Now, why is this important?  For that, we'll turn to my bookshelf and it's copy of <em>The Complete and Unabridged History of The Internet</em>.  I see here in chapter two after all this non-sense about universities and the DoD that once upon a time there was no such thing as the World Wide Web.  I'll skip to the part where then there was a WWW.  The first websites on the newborn baby web were mostly authored in straight HTML, an interpreted language used to help your computer assemble some data on the other end into a web page.  A skilled HTML coder can control every single element on the page that's being displayed down to the very pixel (until it's opened in another browser, but that's another chapter).  The HTML basically tells your browser what text to display, how to format it, what the background color ought to be, where to place the pictures and to what they should link.  This is understandably tedious and time consuming work, but you gotta do it if you want your website to look right.\r\n\r\nSomewhere along the way, websites started getting much more complex.  Some genius decided to make a big online store where you could get pretty much anything, from books to socks to computers to whatever.  Now, imagine if you will, the task of hand coding every page.  For every item and every view and every picture and every review there was some army of poor bastards on the other end furiously coding away to keep up with the inflow of new inventory/users/reviews.  I recently read about some guy who worked for an online newspaper, and he supposedly spent 14 hours a day coding HTML for the site before he figured out that there was a better way to get your steady flow of content up there.\r\n\r\nThe answer lies in scripting language and a database.\r\n\r\nA scripting language is basically the same thing as an interpreted language in as much as it's not compiled, or even thought of until \"runtime\".  At runtime, the computer gives instructions to something, probably your browser, which then passes the request along to the code.  It's at that time (runtime) that the code is crunched into the binary code that your computer can actually do something with on the processor level.  This is hyper-simplified.\r\n\r\nWhat this means in the Amazon example is that instead of hand-coding every page, why not just build a template that gets populated with the data that's requested at the time?  Then you don't have to rebuild the wheel every single time a page request is made.  Well, how do you build a template?  With a scripting language, of course!\r\n\r\nI'll just cut to the bird-eye view.  When you go to Amazon, and it knows that it's you, and it spits out all that stuff that you should buy based on past purchases, that's because all of that info is stored in a database.  When you click on an item and go to that items page, and the page looks just like the last one, that's because all that info is stored in a database.  There's a table in there for every one of you, and for every item on the site.  The table for you has all of your info in it, including past purchases, addresses, billing info, etc.  The table for each item has the description, pictures, reviews, links, etc.\r\n\r\nThe point is that each of these tables is filled out in a standard way with all of their pertinent data.  Why this is cool is that some automated process can then do something with it, like fill out a web page, or display your customer profile.  The scripting language is what automates the process.  It provides the instructions for the web server on the other end of your computer to \"dynamically\" make up the HTML needed to display the pictures and profile info and whatever else in a cohesive way across the entire website.  Dynamically means that you don't need an army of HTMLers because the computer is writing the HTML at the time of the page request.  Every different kind of page on the site (say reviews vs. the home page) has it's own scripted template that's called up when the appropriate request is made.  Kinda cool, no?\r\n\r\nSo, a database is somewhere between MS Excel and that big Tupperware bin where you keep all your summer clothes.  We'll dive into the beauty of doing things this way later.\r\n\r\nA few database driven websites:\r\n\r\n- <a href=\"http://www.archive.org/search.php?query=collection%3ARailroadEarth&amp;sort=-date\">Archive.org</a>\r\n- <a href=\"http://twitter.com\">Twitter</a>\r\n- <a href=\"http://ignoredbydinosaurs.com/blog\">This blog</a>\r\n- <a href=\"http://messageboard.tapeop.com/index.php?sid=d5ce53c0f1b60db5b462e65e841b6cfa\">Any message forum</a>\r\n\r\nExtra credit : Start paying attention to URLs, especially whenever the letters .php are used.  PHP is a very widely used scripting language for making database driven websites, and if .php is included somewhere on your address bar, you're looking at data that's stored in a database.", slug: "chapter2-databases", summary: "This part of the blog is going to be tough to write.  Not because I don't have much to say on the topic, but because I have frequent pangs of \"dude, you don't really know anything about any of this stuff\".  Then the other side of my brain speaks up. \"Dude, it's cool.  They know you're not a professor.  That's the point of this whole thing, right?  If someone wants hard facts and a professionally written tutorial on computer science, they'd probably go somewhere else.", previous_id: 10, published: true, pub_date: "2009-04-06 01:57:36"},
  {title: "file.under=>RandomMemory", body: "I went to school in Boone, North Carolina at Appalachian State University. When I picture heaven in my head, it looks more or less like what I remember the drive from Banner Elk to Boone along 105 looking like - Grandfather Mountain, the old Gold Mine tourist joint in Foscoe, Hawk's Nest ski area where I used to be a lift operator, that sandwich place on the corner of the turn to Valle Cruces, the leaves in the fall, the walk up Howard's Knob, hiking up Table Rock in the middle of the night to see the most beautiful sunrise a few hours later. I get goosebumps thinking about it.\r\n\r\nFor some reason I've been thinking about that drive a lot the past two days. I wonder what it looks like now. There used to be this rock quarry at the top of the hill as you were leaving Boone toward Foscoe, at the corner of the 105 bypass. I was cleaning up my yard this week and I remembered driving past that quarry probably 8 or 9 years ago. This was just as I was getting into DJing in college. I didn't go to Phish shows in college like all of my friends did. The String Cheese Incident was just starting to get really big about the time that I graduated. Instead I got into the whole Electronic/DJ/Rave scene in the late 90s. This was before kids started sneaking out of the house and getting themselves killed ingesting drugs meant to put Fido to sleep at the vet, in a golden year-long period where the rave scene in NC was exactly where I wanted to be. I spent my time driving to big parties all over the SE to go see DJ Icey, Dieselboy, Sasha and John Digweed, Jimmy Van M, Simply Jeff, Scott and Robbie Hardkiss, DJ Keoki, Donald Glaude, DJ Dara...\r\n\r\nI went to this one party in my hometown of ATL one time. The headliners were Simply Jeff and DJ Icey and Dieselboy. There was a point earlier in the night where I was dancing my ass off and I noticed that there was this circle around me of people watching. It was weird because I wasn't paying any attention to anything other than the basslines coming out of the system courtesy of Mr. Icey. I still remember this one record he played that night - the vocal hook was \"can you feel the BASS\", and when the record said 'bass' there was this note that came out of the subs that can't be related verbally. It shook the world. It made my hair stand up. It made the entire party, all 5000 of us, stop dancing and look around at each other. Yes, we could feel the bass. Oh my God, could we feel it...\r\n\r\nLater in the night I found myself up on this stairway platform looking out at the whole crowd rippling like a flag blowing in the breeze. I came down the stairs and some girl walks by with a backpack full of glowsticks. I said it was the late 90s, didn't I? I guess this girl was part of what I now know as the 'ambiance crew'. I'd never seen her before, but she walks by me and pulls out a glowstick and cracks it open and hands it to me. I still have that glowstick. That glowstick was the light bulb that went on in my head at the moment that I looked around and noticed 5000 people dancing in unison to 1 guy's music. 1 guy hidden in some corner of that place had this entire party under his spell. 1 guy was responsible for guiding this entire party and making them get down like they'd never gotten down before in their lives. That's was the moment I knew that I needed to get a pair of turntables and start figuring this thing out.", slug: "file-under-random-memory", summary: "I went to school in Boone, North Carolina at Appalachian State University. When I picture heaven in my head, it looks more or less like what I remember the drive from Banner Elk to Boone along 105 looking like - Grandfather Mountain, the old Gold Mine tourist joint in Foscoe, Hawk's Nest ski area where I used to be a lift operator, that sandwich place on the corner of the turn to Valle Cruces, the leaves in the fall, the walk up Howard's Knob, hiking up Table Rock in the middle of the night to see the most beautiful sunrise a few hours later.", previous_id: nil, published: true, pub_date: "2009-04-05 17:32:41"},
  {title: "Getting started with \"Headless Drupal\"", body: "Hello there!  There has been a lot of discussion in the Drupalsphere lately about a concept that has been coined \"Headless Drupal\", and rightly so.  It's basically theming, but throwing out the theme layer.  The theme layer in Drupal is very powerful, but has always felt severely over-engineered to me, especially in contrast to pretty much any MVC framework I've played with.  With those, you define view-layer variables in a controller class, and you write HTML with a little bit of code to print them out into HTML.  It's more work up front, since you have to write code, but it's vastly easier once you get over that hump.\r\n\r\nThe company I work for has been doing exactly this with [AngularJS](https://github.com/JGrubb/drunken-hearts/tree/store) since early this year, and I've yet to see a concise post about how to get started with it in the context of Drupal.  I rarely write \"how-to\" posts, but I figured it'd be a good way to inaugurate the ABM tech blog.\r\n\r\n### Our use case (feel free to skip)\r\n\r\nEarly this calendar year, my boss' boss came to us with a business request -- build us a framework on which we can make our up-until-lately desktop-only websites a little more mobile friendly.  We were using a rather ungainly combination of Panels and Adaptivetheme, and though those should have given us a good base on which to build, we had managed to mess it up.\r\n\r\nOur original themer was a designer who learned CSS on the job, and our stylesheets were an enormous mess.  Absolute positioning, widths specified in pixels, subthemes that had huge amounts of repetitive CSS rules that could've been rolled up into the parent theme.  Rewriting these sheets would've been prohibitively expensive, and wouldn't have gained us anything in the eyes of the business.  \r\n\r\nTo add to that, the aforementioned boss' boss was really keen on what we in the biz call \"HTML5 mobile apps\" that felt more like a native app rather than just a website that is readable on the phone.  UI patterns would include swiping to navigate between stories, storing articles to read later, offline support, etc.  Basically, not things you can do in any Drupal theme that I know of.\r\n\r\nI spent a few days in R&D mode trying to figure out how to fake these things with pre-fetching pages so they'd be rendered already when the user swiped, but it was a mess.\r\n\r\nI knew in the back of my head that I was doing it the wrong way, but it took some prototyping to convince myself that what we indeed needed to do was to throw out the book on Drupal theming and do this another way.\r\n\r\nI love writing Javascript, and I'd finally found a use case for which one of these JS MV* frameworks might actually fit the bill.\r\n\r\n### The Drupal setup\r\n\r\nSo, assuming you have a clean Drupal install spun up already (if you don't, may I suggest `drush core-quick-drupal`?), you'll want to download a couple of modules to get going.\r\n\r\n- [Views](https://www.drupal.org/project/views) (obviously! don't forget the [ctools](https://www.drupal.org/project/ctools) dependency!)\r\n- [Views Datasource](https://www.drupal.org/project/views_datasource) (this lets you spit out views as [JSON](http://json.org/)).\r\n- [Devel](https://www.drupal.org/project/devel) (for generating some content if you don't already have some)\r\n- [CORS](https://www.drupal.org/project/cors) (just trust me, I'll get to this one later)\r\n\r\nOr you can just do a `drush dl views ctools views_datasource cors devel` and be done with it.\r\n\r\nEnable all these modules - `drush en views views_ui devel devel_generate cors views_json -y`.\r\n\r\nGenerate some content - `drush generate-content 50 0 --types=article`\r\n\r\nOk, you're ready to hop into the UI!\r\n\r\n---\r\n\r\nPretty much all the action at this point is going to happen in Views, so navigate to admin/structure/views, and \"Add new view\".  \r\n\r\n1. Name it whatever you want, may I suggest \"json articles\"?\r\n2. You want to show \"Content\" of type \"Articles\" sorted by \"Newest first\".\r\n3. Create a page, yes.  Display format will be \"JSON Data Document\".  Continue and edit. [![Screenshot of these settings](https://i.imgur.com/yrFRTLJ.png)](https://i.imgur.com/yrFRTLJ.png).\r\n4. Just add a few fields, since you only have the title so far.  Add the Body, the nid, and the date in whatever format you please.  \r\n5. You do want to create a label, but you'll be better off customizing it to be all lowercase and to have no spaces.  ie. body, post_date, etc.  [![What you should see at this point](https://i.imgur.com/iI4PUpO.png)](https://i.imgur.com/iI4PUpO.png)\r\n\r\nIn the preview, you should see a pretty-printed json list of your 10 most recent articles, as generated by Devel.\r\n\r\n---\r\n\r\nCongrats!  The Drupal part is done!  We'll be visiting the more interesting part in the next post.", slug: "getting-started-with-headless-drupal", summary: "", previous_id: nil, published: true, pub_date: "2014-10-02 20:18:25"},
  {title: "On the music business, generally speaking.", body: "It occurred to me over cooking lunch for my boys just a minute ago that, a week before my 33rd birthday, I've been in the music business for half of my life.  I'd like to share a couple of things that I've come up with.\r\n\r\nFirst of all, to get anywhere in this business, to get anywhere sustainably that is, takes a really long time.  There is no short circuiting this process, short of selling your soul to the devil.  Even bands like the Black Eyed Peas who are on top of the world right now in 2011 have been doing this since I was just getting started.  Acts like Ke$ha stand out in my mind as pure product, and this post isn't addressed to acts like her.  This is addressed to bands like the Dusters or Yarn or any of the other top-notch acts out there busting their asses in a van every day of the year.  \r\n\r\nThere *is* a sustainable livelihood to be made in this corner of the music business.  What it takes more than anything is time and hard work.  I've seen and worked with other musicians who acted as if their success were a God given right, that their talent would ensure them a livelihood whenever the proper magic hit-maker type came along and granted them the keys.  These musicians are generally bitter, bad drunks and best avoided.  You may be able to shave a certain percentage of time off your ascent by being smarter and by putting forethought into your career path, but by and large it's game of patience and being pleasant to work with.  \"If you sit at the table long enough, you will get fed.\"\r\n\r\nSecond, and this primarily applies to sidemen, it's good to cultivate an aspect of your playing that is considered mainstream.  That is to say, if you are a bluegrass bass player with a penchant for Airto-era Return To Forever, it's okay to slip those leading samba-type Stanley grace notes into your 1-5-1-5.  Just make sure that you don't do it all the time and if the very well respected banjo player that is sitting in with your band looks at you funny, that's a clue.  If you are a classically trained musician turned bluegrass player, by all means slip as much of that style in there as you want, but know how to chop that thing, too.  Keeping this in mind as you make your rounds will render you much more hirable for your next gig.  You are thinking about your next gig, aren't you?\r\n\r\nFin for now.", slug: "on-the-music-business", summary: "It occurred to me over cooking lunch for my boys just a minute ago that, a week before my 33rd birthday, I've been in the music business for half of my life.  I'd like to share a couple of things that I've come up with.\r\n\r\nFirst of all, to get anywhere in this business, to get anywhere sustainably that is, takes a really long time.  There is no short circuiting this process, short of selling your soul to the devil.  Even bands like the Black Eyed Peas who are on top of the world right now in 2011 have been doing this since I was just getting started.", previous_id: 101, published: true, pub_date: "2011-05-07 05:00:00"},
  {title: "The newby web programmer.  Episode 3.", body: "<p>So, you've spent the last few months teaching yourself Wordpress.  Good job.  There are lot of crappy websites out there, most of them built by some site-builder commodity crap-stuffer at GoDaddy or Network Solutions or some other budget host.  These are God-awful examples of poor web development practices.  They're ugly.  They don't render correctly in browsers.  Many are all but invisible to search engines, which begs the question - if a website fails to show up in the first couple of pages of Google, does it make a sound?</p>\r\n<p>Wordpress is a wonderful tool to combat these evils.  It's easily editable.  It's easy to learn.  It's east to add features.  It's typically built using modern presentation techniques that actually DO show up in search engines.  The <a href=\"http://diythemes.com/\">Thesis theme</a> is a marvel of <a href=\"http://ignoredbydinosaurs.com/2009/05/seo-in-action/\">SEO</a> and will get your page - pretty much no matter what - up on to the first page of Google depending on what you're writing about.</p>\r\n<p>Neither here nor there, because you already have an idea of most of this stuff.  You've been tinkering around with MAMP and wordpress on your computer and now you want to know how to get your creation up and visible to the world.  This is involves two simple steps, and rather than repeat them, I'll just link to the site where I learned how to do it.</p>\r\n\r\n<a href=\"http://weeklywp.com/2009/06/move-wordpress-to-a-new-server/\">http://weeklywp.com/2009/06/move-wordpress-to-a-new-server/</a>\r\n\r\n<p>Questions and requests for clarifications are most welcome.  The first big hint is on the front page of the MAMP welcome page.  PHPMyAdmin is a database tool for managing your database.  That's where you'll export the database that you've been using to develop locally and upload it to your webhost.  Follow the instructions in the tutorial.  Every webhost I've seen so far has PHPMyAdmin installed somewhere, but where they'v hidden it usually varies.  If you are installing this on a server that's owned by, say, the Stamford school system, you might need to talk to an IT admin to get it happening.</p>", slug: "the-newby-web-programmer-episode-3", summary: "<p>So, you've spent the last few months teaching yourself Wordpress.  Good job.  There are lot of crappy websites out there, most of them built by some site-builder commodity crap-stuffer at GoDaddy or Network Solutions or some other budget host.  These are God-awful examples of poor web development practices.  They're ugly.  They don't render correctly in browsers.", previous_id: 60, published: true, pub_date: "2010-05-17 13:34:59"},
  {title: "Omniture - not the best 3rd party javascript", body: "Hoping to land a slot in the SERPs with that title, I'm here to demonstrate today the difference between *good* 3rd party javascript, and *bad* 3rd party javascript.\r\n\r\nFirst - the good, as demonstrated by Google Analytics.  GA's setup and tracking code, [as stepped through here](http://www.ignoredbydinosaurs.com/2014/09/deconstructing-the-google-analytics-tag).\r\n\r\n~~~js\r\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\r\n\r\nga('create', 'UA-XXXX-Y', 'auto');\r\nga('send', 'pageview');\r\n~~~\r\n\r\nThe `ga()` function is what does the magic, but in essence all that the `ga()` does is push its arguments into an array.  All of this functionality is contained within those 4 lines.  Those 4 lines also create a script tag that loads the rest of the GA lib, where the functionality to rifle through that array and report its contents back to GA's servers lives.\r\n\r\n_If that script tag fails to return, nothing happens_.  More importantly, **nothing bad happens**.  The array that `ga()` pushes into is a vanilla JS array, it will always be there.  If the GA payload doesn't come back, no worries.  Your app or website will never know the difference.  \r\n\r\nThis is how knowledgable developers build 3rd party libs that don't suck.\r\n\r\nIn contrast, here's what Adobe's Omniture does.\r\n\r\n~~~js\r\n// A blob of obfuscated js hundreds and hundreds of\r\n// lines long here.  The essence of worst practices.\r\n// All of this results in (hopefully) their lib coming\r\n// down via a generated script tag as well.  This script\r\n// tag creates a global object - s (so artfully and helpfully\r\n// named) - that has a giant range of methods to deal with \r\n// the functionality of their platform - pageviews, events, etc\r\n~~~\r\n\r\nLater, you track events and the like via a function call like this - \r\n\r\n~~~js\r\ns.tl(this, 'o', 'blah'); // event\r\ns.t() // pageview\r\n~~~\r\n\r\nWhat happens though, if their huge lib doesn't come back for some reason?  Like, maybe a corporate firewall doesn't feel like letting Omniture code track its users?  This would result in there being no global `s` object on which to call these methods.  What happens then?\r\n\r\n**Your website blows up, that's what.**  Exceptions are thrown, and god help you if you're running a single page app, because it's toast now.  \r\n\r\nThe only solution I've been able to come up with is to wrap everything in `try {} catch {}`, which is hideous and wasteful and prone to error when you forget to wrap every single piece of Omniture code with it.\r\n\r\nThat's why I have the utmost respect for the engineering of GA, and the utmost disdain for Omniture.  Oh, and Omniture costs tons of money to use, and the API documentation is buried somewhere in the 5th level of Dante's hell.", slug: "omniture-sucks", summary: "My (poor) experiences with Adobe Omniture, a polemic.", previous_id: nil, published: true, pub_date: "2014-10-24 14:38:21"},
  {title: "Testing Spotify Embed", body: "<iframe src=\"https://embed.spotify.com/?uri=spotify:track:7txxAtOMwLLnQTpKeBL6bp\" width=\"100%\" height=\"380\" frameborder=\"0\" allowtransparency=\"true\"></iframe>", slug: "testing-spotify-embed", summary: "", previous_id: nil, published: false, pub_date: "2014-10-30 14:56:04"},
  {title: "Prev/Next as linked lists in Django", body: "## Problemspace\r\n\r\nI want to be able to link a set of posts together in an order.  If there is a next post relative to the one I'm on, I want a button to show up that says \"next post\" and links to it.  If there is a previous post relative to the one that I'm on, I want a button that says \"previous post\" and links back to it.  Pretty simple, conceptually.  Basically I want to reproduce parts of the Drupal book.module as minimally as possible.  \r\n\r\nSo my first naive attempt was to add 2 [ForeignKey fields](https://docs.djangoproject.com/en/1.9/ref/models/fields/#django.db.models.ForeignKey) to the Post model - \"previous\" and \"next\".\r\n\r\n~~~py\r\nclass Post(models.Model):\r\n\r\n    title = models.CharField(max_length=255)\r\n    body = models.TextField()\r\n    summary = models.TextField(null=True, blank=True)\r\n    slug = models.SlugField(max_length=255)\r\n    pub_date = models.DateTimeField('Published at')\r\n    published = models.BooleanField()\r\n    tags = models.ManyToManyField(Tag)\r\n    created = models.DateTimeField(auto_now_add=True)\r\n    updated = models.DateTimeField(auto_now=True)\r\n    previous_post = models.ForeignKey('self',\r\n                                 related_name='previous_post',\r\n                                 blank=True,\r\n                                 null=True,\r\n                                 on_delete=None)\r\n    next_post = models.ForeignKey('self',\r\n                                 related_name='next_post',\r\n                                 blank=True,\r\n                                 null=True,\r\n                                 on_delete=None)\r\n~~~\r\n\r\nThis worked on the front end but immediately raised a stink alarm, for a couple of reasons.\r\n\r\n- You'd have to go and save this info twice for it to really work.  Once on the current post and again on the referred post to link it back.  == Workflow suck\r\n\r\n- The truth about this ordering would be stored in two places, so it'd be really easy to mess something up and get out of sync.\r\n\r\nThis is essentially a [doubly-linked list](https://en.wikipedia.org/wiki/Doubly_linked_list) if you're keeping score, with the encumbant maintenance problems.\r\n\r\nSo I thought to perhaps override the `save()` method in order to hook into the operation and automatically populate the correct field on the referred item, but then of course, I'd have to do all kinds of gymnastics to watch for if that field were to be removed at some point and remove the corresponding field on the referred item, etc.  I mean, it's a blog who gives a shit, but I've been doing this for long enough now that I can't help myself.\r\n\r\nAnother option in this same vein is to use the Django \"signals\" subsystem to hook into the same functionality, but the smell remains.\r\n\r\nAfter coming home from DrupalCon it occurred to me that really all I need is the one pointer, since I should be able to derive the pointer back.  I just had to figure out how to do it...\r\n\r\n---\r\n\r\n#### `related_name()`\r\n\r\nThis is a pretty obvious use case - automatically deriving any pointers back to the current item.  It just requires one extra DB query to ask \"give me any items where the previous_post_id is this item's id\".\r\n\r\nThe key is the [`related_name`](https://docs.djangoproject.com/en/1.9/ref/models/fields/#django.db.models.ForeignKey.related_name) argument to the model.  \r\n\r\nI think this is automatically set for a normal ForeignKey field, but on models where the foreign key points back to the same model it's required.  Judging from the docs, I was trying all manner of `post.post_set`, etc but it's actually just `post.previous_post`, which is counter-intuitive since what you're actually getting back from that is the \"next\" post.  I chose to keep the \"previous\" field since you could just add the previous post as you're authoring the current one.\r\n\r\nCurrent post model looks like this --\r\n\r\n~~~py\r\nclass Post(models.Model):\r\n\r\n    title = models.CharField(max_length=255)\r\n    body = models.TextField()\r\n    summary = models.TextField(null=True, blank=True)\r\n    slug = models.SlugField(max_length=255)\r\n    pub_date = models.DateTimeField('Published at')\r\n    published = models.BooleanField()\r\n    tags = models.ManyToManyField(Tag)\r\n    created = models.DateTimeField(auto_now_add=True)\r\n    updated = models.DateTimeField(auto_now=True)\r\n    previous = models.OneToOneField('self',\r\n                                 related_name='previous_post',\r\n                                 blank=True,\r\n                                 null=True,\r\n                                 on_delete=None)\r\n~~~\r\n\r\nAnd the prev/next fields look like this --\r\n\r\n~~~html\r\n{% if post.previous %}\r\n    <small>\r\n        <a class=\"pure-button pure-button-primary\"\r\n           href=\"{% url \"blog:detail\" post.previous.id post.previous.slug %}\">&larr; previous: {{ post.previous.title }}</a>\r\n    </small>\r\n{% endif %}\r\n{% with next_post=post.previous_post %}\r\n    {% if next_post %}\r\n        <small>\r\n            <a class=\"pure-button pure-button-primary\"\r\n               href=\"{% url \"blog:detail\" next_post.id next_post.slug %}\">next: {{ next_post.title }} &rarr;</a>\r\n        </small>\r\n\r\n    {% endif %}\r\n{% endwith %}\r\n~~~\r\n\r\n**note**\r\n\r\nThis might not technically be a linked list in the strictest sense, since a singly-linked list has pointers to the _next_ node in the chain.  I've implemented it here as a \"previous\" pointer, since it makes more sense in the edit workflow.  Since it makes more sense, hopefully we'll make more cents!\r\n\r\nStay tuned for the next episode where I decide that I'd like to have a Table of Contents and rip this whole thing out and do it over again.", slug: "prevnext-linked-lists-django", summary: "", previous_id: nil, published: true, pub_date: "2016-06-06 16:17:57"},
  {title: "Programmatically creating image styles in Drupal", body: "Because sometimes you need to roll out an image style across 26 websites, and dammit you just don't feel like dealing with Features.\r\n\r\n~~~php\r\n<?php\r\n\r\n/**\r\n * Adds mobile_content_image style\r\n *\r\n * @param $sandbox\r\n * @return bool\r\n */\r\n\r\nfunction hook_update_N(&$sandbox) {\r\n  $style = image_style_load('mobile_content_image');\r\n  if (!$style) {\r\n    $style = image_style_save([\r\n      'name' => 'mobile_content_image',\r\n      'label' => 'Mobile Content Image (500 x 250)'\r\n    ]);\r\n    $effect = [\r\n      'name' => 'image_scale_and_crop',\r\n      'data' => [\r\n        'width' => '500',\r\n        'height' => '250'\r\n      ],\r\n      'isid' => $style['isid']\r\n    ];\r\n    image_effect_save($effect);\r\n  }\r\n  return TRUE;\r\n}\r\n~~~", slug: "programmatically-creating-image-styles-drupal", summary: "Programmatically creating image styles in Drupal.", previous_id: nil, published: true, pub_date: "2016-06-07 15:35:55"},
  {title: "A little programmer humor", body: "<a href=\"http://dotnetmasters.com/historyofcfamily.htm\">History of the C family of languages</a>.", slug: "little-programmer-humor", summary: "<a href=\"http://dotnetmasters.com/historyofcfamily.htm\">History of the C family of languages</a>.", previous_id: nil, published: true, pub_date: "2009-07-12 17:05:38"},
  {title: "Today's discoveries", body: "<!--break-->\r\nI had a great blog post going in my head while I was cooking dinner, and now that I have time to write it all down, I'm too tired.  It's been a long day.  We woke up without power this morning, which happens way too often in Stillwater.  No power means no heat and no water, since we're on a well and our pump is probably as old as I am.  So I got out of bed, lit a fire in the fireplace, lit the burner on the stove and got to making pancakes.  We were out most of the day, hence my tiredness.  Made an awesome black bean soup for dinner.  Not your typical black bean, but more of a Cuban influenced recipe that calls for a couple of tablespoons of balsamic vinegar.  It's awesome.  Maybe I'll start a recipes section on this site, which will be fully searchable as soon as I figure out Apache SOLR...\r\n\r\nSo anyway, today's tech discoveries.  First of all, Google Chrome for Mac was finally released yesterday.  It's not bad.  The thing with browsers now is that there is NO user loyalty, at least not with me.  Think back to the good old days when you didn't know there was a thing such as a browser.  IE <em>was</em> the internet.  I felt like I was cheating the day I went and downloaded Firefox, even though I was telling myself that I was merely subverting the paradigm or something like that.  I stuck with FF for a few years, for at least a month into my Mac-hood.  Then one day a weird thing happened (I don't remember what), and the advice I got was to try a different browser.  Opera was the one that was advised to make this broken site work, but Camino was the one that I was told was \"generally the best Mac browser\".  So within a month I'd skipped out on MS completely, and had gone and stabbed my open source friends at Mozilla square in the back.  I mean, sure, Camino is a Mozilla product, but I'm sure they knew where this was headed.  Safari 4.  JavaScript rendering so fast that it makes you actually say \"wow\".  And when your main email client is GMail, which is nothing but a mountain of JS (or AJAX if you wanna get particular), you start to notice such things.  That was only 6 months ago or so.  Now I'm typing this post up in Chrome.  God knows where this ends.  I'll probably join some open source project one of these days.\r\n\r\nDiscovery #2.  JQuery Lightbox.  I can already tell that it's going to be derided as overused, but DAMN it's sweet.  Click on my \"Contact\" menu link up there.  That superfly effect that superimposes the form over the screen?  Seems kinda familiar, right?  That's JQuery in action.  Sweet.\r\n\r\nTomorrow, or sometime this weekend, I promise you a post on quitting a band, and the many ways in which it can go down as well as a state of my noggin report.\r\n\r\nthanks, all...", slug: "todays-discoveries", summary: "A few ruminations from my first day as a full time Drupal user.  Chrome for Mac and JQuery Lightbox content as well.  Strictly geeking.  Sorry.\r\n", previous_id: nil, published: true, pub_date: "2009-12-08 20:56:00"},
  {title: "Migrating the Drupal public filesystem to S3", body: "### Problemspace\r\n\r\n- You're working with a managed hosting provider and have begun to run out of room on the local/networked filesystem.  Vendor wants to upsize your storage for a charge.\r\n- You've got several different environments that you're working with (local|dev|prod|etc) and syncing the filesystem between them is an annoying chore in 2016.  The various methods out there of proxying these requests don't really excite you.\r\n\r\n### Solutionspace\r\n\r\nHow about moving the Drupal filesystem up to The Cloud?  One of Amazon's earliest products in AWS was the [Simple Storage Service](https://aws.amazon.com/s3/) (S3), and one of it's core usecases is serving public files like images for websites, removing the need for storage of the assets and the (admittedly minimal) compute resources to serve them.\r\n\r\nWe had both of the issues outlined above and have just completed a migration of all our files up to S3, so I thought I'd write down some discoveries.\r\n\r\n---\r\n\r\n### s3fs module\r\n\r\n[This](https://www.drupal.org/project/s3fs) is a rather unfortunately named module, since there is another open source project out there with the exact same name.  I knew of it first and so assumed that this module had something to do with that, but that's *not* the case.  Btw, I learned this in [Steven Merrill's excellent session at DrupalCon](https://events.drupal.org/neworleans2016/sessions/loft-your-web-platform-clouds-immutable-infrastructure) in May, check out the video if you're still with me.\r\n\r\nIn a nutshell, s3fs hijacks the Drupal filesystem.  You can put both your public and private filesystems up there, simple to do since S3 has a very rich permissions feature set.  Just don't deliberately make your private filesystem \"public\" and you're set.  It then rewrites any URLs that would've been to assets on your local filesystem to point to their new location in S3.  \r\n\r\nThe [setup is pretty straightforward](http://cgit.drupalcode.org/s3fs/tree/README.txt?h=7.x-2.x), so just a few observations.  \r\n\r\n- For multisite, you need to override a few things, namely the default setting for \"S3 root folder\".  For our install we needed to separate each sites assets into site specific folders with the same S3 bucket, so we filled that setting in with a string unique to the site, something like \"nameofsite.com\".\r\n- There are UI buttons for moving your local files up to S3, but the AWS CLI works *WAY* faster.  [There are a wealth of well-documented options](https://docs.aws.amazon.com/cli/latest/reference/s3/sync.html) to pass, but the gist is this --\r\n\r\n~~~bash\r\naws s3 sync . s3://NAME_OF_BUCKET/nameofsite.com/s3fs-public/ --acl public-read\r\n~~~\r\n\r\n- After moving the files up to S3, the module needs to be made aware of what files exist up there, so you'll need to [refresh the file cache](http://cgit.drupalcode.org/s3fs/tree/s3fs.module#n264).  If you forget to do this part and flip the switch to have s3fs take over the public filesystem, you'll see bad things.\r\n- With a multisite setup, I found it much easier to flip the switch that says \"Do *not* rewrite JS/CSS URLs\".  The downside of this is that I have to make sure that random assets in the Drupal filesystem (ie not within public://) also exist in S3, since so many CSS and JS files refer to assets by root relative paths.  This is a hack, but that's life sometimes.\r\n\r\n~~~bash\r\n// from Drupal docroot\r\n$ rsync -av --prune-empty-dirs --include='*/' / \r\n--include='*.jpg' --include='*.png' --include='*.svg' / \r\n--include=\"*.js\" --include=\"*.css\" --include=\"*.gif\"  /\r\n--include=\"*.woff\" --include=\"*.ttf\" --include=\"*.map\" /\r\n --exclude='*' . ~/some/destination/dir\r\n~~~\r\n\r\nThis says \"gimme all those file types in the whole Drupal file tree and move them over to some other dir\" that I can then use AWS CLI to sync up to S3.  You should take the opportunity before running this to delete all your local public:// files, because they'll get sucked up in this command as well.  You won't need them anymore after you do this migration anyway.\r\n\r\n~~~bash\r\n// from ~/some/destination/dir\r\n$ aws s3 sync . s3://NAME_OF_BUCKET --acl public-read\r\n~~~\r\n\r\nAll in all fairly simple, and in theory makes our setup much more portable between environments as well as vendors.  Another excellent [writeup of this module can be found here](http://www.symphonythemes.com/drupal-blog/easy-amazon-s3-drupal-s3fs).", slug: "migrating-drupal-filesystem-s3", summary: "", previous_id: nil, published: true, pub_date: "2016-06-15 11:11:50"},
  {title: "Platform.sh from scratch, part 1 -  Basic setup.", body: "Hello, and welcome back to \"Platform.sh from scratch\".  The goal here will be to augment the [official documentation](https://docs.platform.sh/) with a short tutorial that shows how to set up a project for proper functioning on [Platform.sh](https://platform.sh/).  We'll dive into the \"why\" as little as possible here.  For now let's dive straight into the \"how\".\r\n\r\n<!--more-->\r\n\r\nWe're going to start with a very basic application, the [example Silex app on the front page of the Silex website](http://silex.sensiolabs.org/).  This will be a standard Composer based project, so we'll need a `composer.json` file to start with.\r\n\r\nThe project structure will look like this --\r\n\r\n```\r\njgrubb in ~/play/php/silex-test on master λ tree -I vendor\r\n.\r\n├── app\r\n│   └── index.php\r\n├── composer.json\r\n└── composer.lock\r\n```\r\n\r\nThe `composer.json` file can be created by running `composer require silex/silex`, or you can just copy this into `composer.json` at the root of your project directory --\r\n\r\n```js\r\n{\r\n    \"require\": {\r\n        \"silex/silex\": \"^2.0\"\r\n    }\r\n}\r\n\r\n```\r\n\r\nRun a quick `composer install` and the rest of the dependencies will be pulled down and placed into the standard `vendor` directory.  We're going to be using Git here, and in general you don't want to version 3rd party dependencies like those that Composer downloads.  Let's create a `.gitignore` file and add the vendor directory to it.\r\n\r\n`echo \"vendor\" >> .gitignore`\r\n\r\nThe entirety of the application codebase looks like this --\r\n\r\n```php\r\n<?php\r\n// in app/index.php\r\nrequire_once __DIR__.'/../vendor/autoload.php';\r\n\r\n$app = new Silex\\Application();\r\n\r\n$app->get('/hello/{name}', function($name) use($app) {\r\n    return 'Hello '.$app->escape($name);\r\n});\r\n\r\n$app->run();\r\n```\r\n\r\nVery simply, all this app does add a route that responds to requests along the path of `hello/{whatever}`.  As long as you've used the same directory structure, you can `cd` into the `app` directory and run `php -S 127.0.0.1:8080` to fire up the local php webserver and then head to [localhost:8080/hello/user](localhost:8080/hello/user).\r\n\r\nIf all is working as expected, let's head to Platform and get this thing ready for the development process.\r\n\r\n---\r\n\r\nNavigate to the [platform website](https://platform.sh/) and register a new account.  You have 1 month to (freely) evaluate whether or not Platform fits your needs, so let's get going.  I'm assuming that you can find your way through the registration and login workflow and find your self back on the [\"your account\"](https://accounts.platform.sh/user) page, so let's add your SSH public key into your account and that will be all for configuring your account for now.  Under \"account settings\" -> SSH keys you can add a public key.   \r\n\r\n![](https://www.ignoredbydinosaurs.com/uploads/image/screencap1.png)\r\n\r\n---\r\n\r\n**Sidebar - SSH public keys**\r\n\r\nThis is required for one main reason - it allows us (Platform) to securely authenticate you when you push code to a project.  This is standard for most public code repos (GitHub, Bitbucket), and we use this method as well.  A massive side benefit of this workflow is that it allows any Platform account holder to invite any other Platform account holder to their project.  This means that agencies can invite developers to projects, users can invite other developers to help with their projects, and the overall friction of matters of authentication and authorization on projects is reduced to virtually zero.  You won't likely notice this benefit until a little later on, but when you want to share a project (or even a specific branch of a project) with another user no new account/password/validation workflow is required, and work can begin immediately.\r\n\r\n---\r\n\r\nOnce that's done, let's go back to the main account page and \"create a new platform\".  \r\n\r\n![](https://www.ignoredbydinosaurs.com/uploads/image/Screen Shot 2016-08-15 at 11.28.35 AM.png)\r\n\r\nTo me this workflow is pretty self explanatory and the defaults are the correct settings for now, so select which region you'd like your project to be hosted in and get through the checkout workflow.  Like I said, nothing will be charged for a month, so have no fear.  I have to go through this flow as well, and I work here...\r\n\r\nAfter you get through that flow, you'll be dropped into the \"projects\" admin of Platform.sh.  This is where you'll likely be spending the vast majority of your time.\r\n\r\n![](https://www.ignoredbydinosaurs.com/uploads/image/Screen Shot 2016-08-15 at 11.55.15 AM.png)\r\n\r\nName your app (I'm creatively naming mine \"Example Project\"), and then for this project you'll want to choose to \"import your existing code\".  This option will present you with a URL for a git repo to which you'll be pushing your code.  Now is the time to initialize a git repo in your codebase.\r\n\r\n`git init`\r\n\r\n---\r\n\r\n**Sidebar - infrastructure as code**\r\n\r\nWe'll get into the mechanics later, but this would be a good opportunity to explain the overall ethos of Platform.sh which is that you are going to be specifying your infrastructure - that is the underlying software systems on which your project will be running (MySQL, Redis, etc) - in code.  You'll be able to manipulate the infrastructure required to run your project in the same way that you manipulate the behavior of your app through writing code, and you'll push these hardware requirements to us in the form of code.\r\n\r\n---\r\n\r\nRun `git add .`, which will add all 4 files in your project to git, and then `git commit -m \"init commit\"` to commit your code.  After that you'll want to cruise back over to the Platform project admin screen and copy the lines under \"Push an existing repository on the command line\" and drop them into your terminal.  This will add the Platform git server as a remote for your project, so now you have somewhere to push your code.  We're almost there!\r\n\r\nBut we're not totally there yet, there's one more step.  You need to tell Platform what your project needs to run or you won't be able to push your code up to us.\r\n\r\nAll Platform hosted projects require 3 files - `.platform/routes.yaml`, `.platform/services/yaml` and `.platform.app.yaml`.  The [routes file](https://docs.platform.sh/configuration/routes.html) is just that - it's sort of like a [front controller](https://en.wikipedia.org/wiki/Front_controller) for your entire project.  What this means in practice is that you can have multiple applications running in your project (under different paths), but for now you really just need to route any request to your little example application.\r\n\r\nThis is a nice standard starting point for any given PHP project, so place this in `.platform/routes.yaml` --\r\n\r\n```yaml\r\n\"http://www.{default}/\":\r\n  type: upstream\r\n  upstream: \"app:http\"\r\n\"http://{default}/\":\r\n  type: redirect\r\n  to: \"http://www.{default}/\"\r\n```\r\n\r\nNo, this is not the most beautiful file, but all you really need to know about this is that all URLs that enter this project will either have a base URL of\r\n\r\n- `www.whatever.foo` and will be routed to your codebase, or they'll be\r\n- `whatever.foo` and will be redirected to `www`.  See step 1.\r\n\r\nAnother file that you need to have in place is the `.platform.app.yaml` file, which is a file that describes the high level requirements of this application.  The most bare bones file is all that we need and it'll look like this --\r\n\r\n```yaml\r\n# The name param is linked to the \"upstream\" parameter in\r\n# routes.yaml. If you called the app \"foo\", then the\r\n# upstream parameter would look like `upstream: \"foo:http\"`\r\nname: app\r\n# The \"type\" parameter takes the form \"language:version\".\r\n# This could be `python:3.5` for example\r\ntype: php:5.6\r\n# Look for a composer.lock (or composer.json) and download\r\n# the listed dependencies\r\nbuild:\r\n  flavor: composer\r\n# How much disk space will this app need?  This is primarily used for\r\n# user uploaded assets, so for this application you don't really need\r\n# anything here, 256 would be fine.  You can always grow\r\n# this later, so this is a safe starting point. (in MB)\r\ndisk: 2048\r\n# Now that a request has gotten this far, how do you want\r\n# it handled?  We'll go into more detail about these params\r\n# in a later post.  This section can be thought of as\r\n# somewhat analogous to an Apache or Nginx config file.\r\nweb:\r\n  locations:\r\n    \"/\":\r\n      root: \"app\"\r\n      passthru: \"/index.php\"\r\n      index:\r\n        - index.php\r\n      allow: true\r\n```\r\n\r\nThere is [more information on the documentation website about this file](https://docs.platform.sh/configuration/app-containers.html), and it's all worth your time.\r\n\r\nThe services file will define what other services (this is where MySQL comes in) your app depends on but since we don't need any yet, this can remain empty.  It *does* need to be there however, or you won't be allowed to push your project, so for now just create an empty file - `touch .platform/services.yaml`.\r\n\r\nYour project's file layout should now look like this (excluding git stuff) --\r\n\r\n```\r\n├── .platform\r\n│   └── routes.yaml\r\n│   └── services.yaml\r\n├── .platform.app.yaml\r\n├── app\r\n│   └── index.php\r\n├── composer.json\r\n└── composer.lock\r\n```\r\n\r\nSo with those three files in place, add them and commit them to your git repo --\r\n\r\n`git add . && git commit -m \"adding platform config\"`\r\n\r\n`git push platform master` and you are off!  If you are still looking at the dialog screen in the Platform project admin, you can click \"continue\" now and you will (or will shortly) see a log screen of all the relevant activity for this project - git commits and the project creation before that.\r\n\r\n![](https://www.ignoredbydinosaurs.com/uploads/image/Screen Shot 2016-08-15 at 6.08.59 PM.png)\r\n\r\n---\r\n\r\nAfter this and every successful git push to Platform those files will be analyzed to make sure that the infrastructure that your project requires and the infrastructure that is available to that project are in line.  If something has changed or if this is the first time you've pushed code to this project, the environment will need to be set up with the services that are expected.  This takes a moment, and then your code will be mounted into the environment.  At this point you'll have a running project that you can visit by going to the project admin dashboard and following the \"access site\" link near the top of the page.\r\n\r\nThis concludes this step!  It may seem like a lot to get a 5 line PHP project going, but think of what you *didn't* just have to do - spin up a server, set up a shell environment that feels home-y on that server, set up a LAMP stack, set up a build process for getting your code onto the server in a defined, runnable state, fuss with DNS or local host entries.  We haven't even touched on the aspects of Platform that will completely blow your mind, so stay tuned.", slug: "platformsh-scratch-part-1-basic-setup", summary: "", previous_id: 294, published: true, pub_date: "2016-08-15 07:37:43"},
  {title: "Cool Nginx feature of the week", body: "#### Nginx configs\r\n\r\nSo I recently had a couple of seemingly disparate tasks come across my desk.  We recently launched a HMTL mobile app, an Angular front end to our Drupal sites.  We decided to completely decouple the mobile app from the Drupal codebase after a fairly long exploratory period trying out different approaches.\r\n\r\nWhen launch day finally came, we set up the mobile app at app.$BRAND.com, with our main sites at www.$BRAND.com.  Acquia has this cool feature in their Varnish layer that will filter user-agent strings for ones that match a set of \"mobile\" user agents that they have defined in a central file.  So flipping folks on iPhones over to the mobile site was a piece of cake.  What I forgot was that the same logic wouldn't be triggered for the reverse -- flipping desktop users to the desktop version of the site from app.$BRAND.com.  (Our mobile app is hosted on our own, not with Acquia).\r\n\r\nI already had a big list of regexes to test mobile user agent strings with (thanks Acquia!), so the trick was to recreate that in Nginx, the webserver for our mobile app.\r\n\r\nNot wanting to do a bunch of evil `if {}` statements in the Nginx configs, I cast about for a more elegant solution, eventually stumbling upon `map`.\r\n\r\n#### The Nginx map module\r\n\r\n[http://nginx.org/en/docs/http/ngx_http_map_module.html](http://nginx.org/en/docs/http/ngx_http_map_module.html).\r\n\r\nSo basically what this does is to test any [arbitrary Nginx variable](http://nginx.org/en/docs/varindex.html) for some condition, and spit out a custom variable that you can user in your config.  An example ---\r\n\r\n~~~\r\nmap $http_user_agent $device_redirect {\r\n  default \"desktop\";\r\n  ~(?i)ip(hone|od) \"mobile\";\r\n  ~(?i)android.*(mobile|mini) \"mobile\";\r\n  ~Mobile.+Firefox \"mobile\";\r\n  ~^HTC \"mobile\";\r\n  ~Fennec \"mobile\";\r\n  ~IEMobile \"mobile\";\r\n  ~BB10 \"mobile\";\r\n  ~SymbianOS.*AppleWebKit \"mobile\";\r\n  ~Opera\\sMobi \"mobile\";\r\n}\r\n~~~\r\n\r\nThis takes a look at the incoming user agent string (fun fact -- grab any request header with `$http_NAME_OF_HEADER`) and compares it against a set of regexes.  If one of them is a match, then the `$device_redirect` variable gets set to \"mobile\", otherwise, it's set to the default of \"desktop\".  This gets used later in the config --\r\n\r\n~~~\r\nif ($device_redirect = \"desktop\") {\r\n  return 301 $scheme://$desktop_host$request_uri;\r\n}\r\n~~~\r\n\r\nIn other words, if the user agent doesn't match one of those regexes, redirect the user to the desktop site.  Pretty neat!\r\n\r\nAs a side note, does anyone else think it's weird that the comparison syntax in that if statement only uses one '='?  But yeah, [that's the right way](http://wiki.nginx.org/NginxHttpRewriteModule#if).  \r\n\r\n#### Later that day, on a different Angular app\r\n\r\nSo that mobile app and this one that I'm about to talk about kinda conform to the Drupal concept of \"multisite\".  That is, a single codebase that serves a variety of different sites.  I figured out a pretty simple hack for this one that maybe I'll share [in another blogpost](http://www.ignoredbydinosaurs.com/2014/08/drupal-angular-tidbits-multisite) if I get around to it, but basically it involves setting a `siteVar` in the bootstrapping phase of the Angular app based off of the `window.location.hostname`.  I have a `Config` Angular service that stores the mapping of hostname to siteVar.  It's easy and it works.\r\n\r\nThe way we serve different stylesheets to different brands is by setting up a sites/$BRAND/ folder that houses site specific styles, etc.  When Angular bootstraps, it uses the siteVar variable to fill in $BRAND, and the site specific stuff is loaded.  It's easy and it works.  Except in Firefox.\r\n\r\nFirefox doesn't like this setup, and particularly on the favicon, it proved to be a real PITA.\r\n\r\nThe default Yeoman favicon would always show up in Firefox, nothing else, since we had that favicon path set dynamically by Angular after the app loaded.  it just wasn't responding to any of the usual hacks, and it turns out FF has a long and storied history with the favicon.\r\n\r\nHaving just found the perfect hammer for the previous problem, I thought I'd see if it could solve this one.\r\n\r\n#### Map all the things...\r\n\r\nSo for this one, I have an Nginx map companion to the one that I have in Angular.\r\n\r\n~~~\r\nmap $http_host $sitevar {\r\n  default \"\";\r\n  ~rdmag \"rd\";\r\n  ~alnmag \"aln\";\r\n  ~bioscience \"bt\";\r\n  ~cedmagazine \"ced\";\r\n  # etc...\r\n}\r\n~~~\r\n\r\nThis maps the incoming host variable on the request to a $sitevar variable, used like this...\r\n\r\n~~~\r\nlocation /favicon.ico {\r\n  try_files /sites/$sitevar/favicon.ico $uri;\r\n}\r\n~~~\r\n\r\nSo the browsers that respect the dynamic favicon path continue to work, and if FF never cooperates, Nginx catches that request and fixes the problem before anybody knows...", slug: "cool-nginx-feature-of-the-week", summary: "", previous_id: nil, published: true, pub_date: "2014-08-14 17:41:39"},
  {title: "Memcached - a really interesting piece of gear", body: "So this is just another letter to my younger self, straightening out some mental inconsistencies with how I used to think Memcached worked.  Much of this will be in the context of Drupal, since much of my work experience is in the context of Drupal.  Memcached is obviously not a Drupal specific construct though.\r\n\r\n### Expository\r\n\r\nThe first time I ever installed it was at the behest of my senior dev, who suggested just installing it on my laptop and giving it 64M of memory.  Drupal is slow as molasses if you don't enable caching, so out of the box it actually comes with a pretty intelligent caching story.  By default however, it caches everything into the database.  This is \"less than ideal\" for sure, but since Drupal came up a long time ago in the shared hosting days, and since you could never really know what resources were going to be on the server in the first place it made sense to use what you knew would be there - namely MySQL.\r\n\r\nThis is not ideal since you're still hitting the database - often the bottleneck with Drupal - but it lightens the load significantly from the default and will definitely keep your site up under load, to a point.\r\n\r\nOne of the first places you start looking for performance improvements is in moving that out to something a little more responsive and purpose built.  Redis is a newer option, but the old reliable standby is Memcached.  Drupal has a bunch of tables in the database that start with cache_, and (simplified) they basically all have the format of (cache key)/(value).  Love those out into Memcached and rather than hitting the DB, you're hitting memory.  This is ideal, since looking something up in RAM is orders of magnitude faster than calling the DB.  \r\n\r\nThis is why big boy sites use Memcached.\r\n\r\n### Beginning explorations\r\n\r\nA bug appeared months ago on our websites.  An editor would make a change to a piece of content, say bold an word, and upon saving the piece of content, they would frequently see the old version of the article and not see the change they just made.  Obviously this is really annoying, because then they have to go and redo the change they just made, which then would usually work.  \r\n\r\nThis got really interesting when I discovered that clearing the cache on the site would then make the change appear.  Clearly this was an issue in the cache layer somewhere.\r\n\r\nWe used to use a big name hosting vendor who built the servers for us, and Memcached was installed on every webserver and given 512M to work with. I knew that the load balancer would route authenticated traffic to the same webserver, so this lead to my mistaken notion that each webserver had it's own instance of Memcached to work with and that if the editor would hit a different one on saving the page, perhaps they were getting an old version of the article.\r\n\r\nThis is **not** how Memcached works, as it turns out.\r\n\r\n### Go to Memcached.org\r\n\r\nSo the introductory page of [http://memcached.org/](http://memcached.org/) says \r\n\r\n> Free & open source, high-performance, distributed memory object caching system\r\n\r\nWhat that means for me is that my mental model of each webserver having it's own pool and being unaware of the others was incorrect.  What really happens is that each server you add to the pool adds to the overall cache size, and objects are distributed among them only once.  I thought we had 4 512M instances of Memcached, but we really had 1 2G pool.\r\n\r\nThe [wiki](https://code.google.com/p/memcached/wiki) has some interesting notes on the the design paradigms that are worth quoting.\r\n\r\n> The server does not care what your data looks like. Items are made up of a key, an expiration time, optional flags, and raw data.\r\n\r\nFunny, so basically the exact same schema as the cache tables in the Drupal database.  That's handy.\r\n\r\n> Memcached servers are generally unaware of each other. There is no crosstalk, no syncronization, no broadcasting. The lack of interconnections means adding more servers will usually add more capacity as you expect.\r\n\r\n> For everything it can, memcached commands are O(1).\r\n\r\nSo this means that means that it should basically scale infinitely with the same performance.  Whether you have 32M on your laptop, or 48G across 6 servers as we have now in production, the lookup time is constant for a piece of cached data.\r\n\r\n### What about the problem?\r\n\r\nI actually just solved it yesterday.  It was this - [https://www.drupal.org/node/1679344](https://www.drupal.org/node/1679344).  Learned a hell of a lot about caching in Drupal and caching in general in the last 6 months before really hunkering down to figure this one out.", slug: "memcached-a-really-interesting-piece-of-gear", summary: "", previous_id: nil, published: true, pub_date: "2015-10-02 16:03:00"},
  {title: "The phases of iPhone ownership, the beginning", body: "For me, it began in December of 2007.  Anyone who reads this blog or has stumbled across it (as a surprising number have, unless there's a bot out there relentlessly searching for <a href=\"http://ignoredByDinosaurs.com/2009/04/coolest-iphone-app-ever/\">my post on the Best App Ever</a>) knows that I'm a fan.  I started off as a casual appreciator of the iPhone, and have since proceeded to jettison a lifetime of loyal MS-DOS/Windows computing in favor of being a blogging, Mac toting dork.  I'm not ashamed.  My personal productivity has skyrocketed over the last 18 months, due almost exclusively to the tectonic shift in mindset brought about by my consumer relationship with the House of Jobs.  And now, for your enjoyment (I hope), I present the emotional cycle of iPhone ownership.\r\n\r\n<h3>Prehistory</h3>\r\n\r\nIt started off for me simply enough.  I'd been a Cingular customer-cum AT&T customer since the dawn of cell phone use (for me).  I'd been through a few phones over the years, most notably the old bricky Nokia that worked great and only did that <i>one thing</i>.  I was perfectly happy for a number of years, but eventually I was seduced.  I wanted something with a bit more style, more pizazz.  I'd been reading the <a href=\"http://www.businessinsider.com/chart-of-the-day-what-phones-are-apples-iphone-buyers-throwing-away-2009-7\">Motorola Razr</a> PR for a while, and thought that perhaps it'd make me happier, what with it's flippy coolness and it's camera.  It even held the promise of being a music player, though a cursory glance could've shown a lack of a headphone jack or any real internal storage.  I didn't care!!  I was leaving the droll stability of the good thing I'd had with Nokia.  \r\n\r\nYou can tell where this is headed.  The camera sucked.  The phone dropped calls all the time.  The flip thing bothered me as much as I always knew it would.  It wouldn't even let you set your own ringtones from your own music that you already freaking owned.  It was extremely uncomfortable against your ear.  It would connect to the crap ringtone store spontaneously and download the new NeYo tune for me.  Repeatedly.  Finally after less than 6 months, the thing just died altogether.  Actually, I snapped it in half one night, so I guess you could say I terminated it, with extreme prejudice.  This was about two weeks before Noah was due, so obviously I needed a new phone pronto.  \r\n\r\nI'd already seen Jimmy hanging out with it.  He sent me an email with the signature at the bottom reading Sent from my iPhone.  What a dork.  I was intrigued...\r\n\r\n<h2>Phase One - Infatuation</h2>\r\n\r\nIt was a rainy December day.  I had a notion that since I'd just re-upped my Cingular contract months before, the new contract discount wouldn't be applying to me on this day.  The suspicion was confirmed by the (very cool and helpful) dude at the store.  A new Razr would cost me $379.\r\n\r\nOr I could just get an iPhone for $20 more.\r\n\r\nThe first week was a revelation.  The mere act of checking my email and being done with it in less time than it took my POSVRPC (Piece of $h!t, Vista-running PC) to even reach the first splash screen on booting up was like a dream come true.  I immediately regretted my purchase of the POSVRPC only two weeks earlier, as the iPhone could easily get me through the relatively gig-light winter.  I wrote a blog on the iPhone within days on MySpace - old-school - praising Apple as the \"Barry Bonds of product design - every swing, out of the park\".  This was before the steroid allegations really came to light, but the comparison is probably still apropos.\r\n\r\nI'd never bought an iPod, so having music to listen to was another big one.  I'm sorry if I've written about all this before, but the real winner was when Noah was born and I had pictures emailed to the family within minutes.\r\n\r\nThe contacts and the calendar?  I'd actually bought a Palm Pilot in college, deep in my freelance gigger days, but couldn't make myself carry it around all the time, which seriously negated it's effectiveness.  In short, I started to see that if I couldn't get my life together with an iPhone, I was hopeless.\r\n\r\n\r\n\r\n", slug: "phases-iphone-ownership-beginning", summary: "For me, it began in December of 2007.  Anyone who reads this blog or has stumbled across it (as a surprising number have, unless there's a bot out there relentlessly searching for <a href=\"http://ignoredByDinosaurs.com/2009/04/coolest-iphone-app-ever/\">my post on the Best App Ever</a>) knows that I'm a fan.  I started off as a casual appreciator of the iPhone, and have since proceeded to jettison a lifetime of loyal MS-DOS/Windows computing in favor of being a blogging, Mac toting dork.  I'm not ashamed.", previous_id: nil, published: true, pub_date: "2009-07-20 17:16:10"},
  {title: "Programmatically creating taxonomy terms in Drupal", body: "Because sometimes you need to roll out a bunch of taxonomy terms across 26 sites, and you just don't feel like clicking those buttons.\r\n\r\n~~~php\r\n<?php\r\n\r\n$terms = [\r\n    'iReport',\r\n    'Infographic',\r\n    'Video',\r\n    'Case Study',\r\n    'Application Note',\r\n    'Data Sheet',\r\n];\r\n\r\n$vocab = taxonomy_vocabulary_machine_name_load('vocab_machine_name');\r\n\r\nforeach($terms as $term) {\r\n    $t = new stdClass;\r\n    $t->name = $term;\r\n    $t->vid = $vocab->vid;\r\n    taxonomy_term_save($t);\r\n}\r\n~~~\r\n\r\nSave this to something like `create_terms.php` and then run it with drush!\r\n\r\n~~~bash\r\n$ drush @site scr path/to/create_terms.php\r\n~~~", slug: "programmatically-creating-taxonomy-terms-drupal", summary: "", previous_id: nil, published: true, pub_date: "2016-06-15 15:24:39"},
  {title: "How I very deliberately ended up in tech", body: "### How I very deliberately ended up in tech\r\n\r\nThis journey is fairly well documented on this blog, but I'll distill it down to a post, since I've answered this questin a few times lately.\r\n\r\n### Early years\r\n\r\nI started playing guitar and bass as a teenager, and upon arriving at college had to declare a major.  I chose music since that's the only thing I could see devoting the majority of my time toward studying, and picked the Recording and Production track in the Music Industries Studies dept at Appalachian State University.  Only later did I realize that my affinity for recording and production was due as much to my love for computers as my sterling ears.\r\n\r\nAfter college I joined a band and spent 7 years on the road, traveling mostly all of North America, but occasionally the world too.  I did *not* have a desire to spend my life on the road playing music, however.  I always pictured moving from a music performance career into a music business career as the industry hadn't completely imploded yet.  It was actually at the same party described in [this post](/posts/46-file-under-random-memory/) that I had the vision of where I wanted to be later in life, and it was in \"the business\".\r\n\r\n### The road\r\n\r\nSo years went by and I had more or less learned everything I cared to know about the music business when I had another epiphany.  [This post](http://www.ignoredbydinosaurs.com/posts/75-phases-iphone-ownership-beginning/) chronicles that one, and it was about technology.  It was on a long car ride that I discovered, truly discovered, the economy that was about to come.  \"Oh!  This is going to be a thing!\" I thought to myself that first day of the iPhone App Store.  \"A thing that if I learned it, I could continue to be my own boss, continue having a creative rewarding career, and probably even make enough money to feed my kids!\"\r\n\r\nSo I went for it.  I bought myself a Mac laptop in July of 2008 with the goal of teaching myself iPhone app programming.  I had no idea what I was doing or even how to learn.\r\n\r\n### After the road\r\n\r\nI got truly sick of my previous career in early 2009 and spent the rest of that year planning my exit.  [After quitting](http://www.ignoredbydinosaurs.com/posts/173-and-i-bid-you-goodnight/) at the end of 2009 I had nothing but time on my hands to spend about 100 hours a week banging this stuff into my brain.\r\n\r\nI had a contact that threw me some work and out of that came the first Drupal site I ever built.  In 2010.  2010 was a rough year by every metric, but we got through it and by 2011 I had a new music gig and a full funnel of contract work.  Life was looking up.\r\n\r\n### Child #3 and beyond\r\n\r\nLife got turned upside down again with the arrival of son #3 in 2012.  At this point I had no time to fill the contract funnel anymore and decided to take the dreaded \"straight job\".  I'd only intended to stay for about 6 months until the waves calmed down at home, but as it turned out I really like working with people, and the people at the job were really cool for the most part.\r\n\r\nI've been here since, almost 4 years now.  I've moved from mostly front end developer to mostly Chief Architect of this entire joint, since almost everything interests me on some level and my boss and I have a really symbiotic working relationship.  I also (in my opinion) excel at seeing the big picture of the system and figuring out how to get it done.", slug: "how-i-very-deliberately-ended-tech", summary: "", previous_id: nil, published: false, pub_date: "2016-06-15 15:46:00"},
  {title: "Knowledge Hunters", body: "I work with a guy.  He's incredibly smart.  He's the seniormost developer here, and if you need to learn something new and get something large done, he's the guy to do it.  We basically dropped him off in the AWS jungle and told him to learn Hadoop and the entire Hadoop ecosystem for a data warehouse project and he did it.\r\n\r\nI work with another guy.  He's also incredibly smart.  But he asks me for the answer before attempting to find it on his own more often than not.  He's got a point when he says \"it's a lot faster for me to just ask you rather than spend time trying to find it on my own\", because he's here to do a job after all.  I get that.  But the best analogy I can come up with is a spin on the old adage -\r\n\r\n> You can give a man a fish, and he eats for a day.\r\n> You can teach a man to fish and he eats for a lifetime.\r\n\r\nThere's a third kind of person, though - the person who goes out and finds out about fishing on their own and then teaches themselves how to fish.  This person will be your boss, and will always be employed.", slug: "knowledge-hunters", summary: "", previous_id: nil, published: true, pub_date: "2016-07-07 16:12:33"},
  {title: "So yeah, I got a job.", body: "I love this blog.  It's amazing how much I used to write.  I was so young and so passionate!  My ego was totally huge!  I had no idea how much of a ride I was really in for!  It's a good thing, too!!\r\n\r\nSo yeah.  I got a job.  I've been bouncing around a bunch of different technologies for the last few years, trying to figure out where to land, what to do, what to be.  Emmitt-Nershi is kind of chilling for the time being, and I happened to find out this was going to be the case the day I got a call back from a recruiter to tell me that the interview that I went on a few days earlier wanted to talk to my references...\r\n\r\n<hr>\r\n\r\nSo let's back up a minute.  I'd been out on my own (a rather precarious place to be), freelancing whatever web stuff I could get my hands on and playing some really fun bluegrass with ENB.  We had our third back in April of last year, possibly the most handsome Grubb boy yet, although they're all pretty much in a league of their own as far as cuteness is concerned.  You never realize the ways in which your life is going to change when this whole new-kid thing happens, but the biggest difference this time was that I had absolutely no time or energy to go and scare up new work.  We had been at about 80% of bandwidth with 2 kids, and now we were permanently at about 140%.  My earnest advice to young parents - two is enough.  Maybe if we had family nearby or something, but damn.\r\n\r\nSo anyway, throughout the summer I'd been fielding emails and phone calls from recruiters, kinda curious what would stick.  I got one in August or so asking if I might be interested in a full time gig.  I was interested in not having to chase down new work and I was interested in a salary and benefits, so sure, what's the gig?  It turned out to be a Drupal gig in the publishing business up here in Jersey, not NYC (where the vast majority of programming jobs up here are).\r\n\r\nSo to make a long story shorter so that I can finish it, it turns out they're working on a lot of really cool stuff at a very transitional time for the company.  It's the publishing business, and perhaps you've heard a bit about the upheaval in that particular business sector lately?  Anyway, this company has been around for decades and has a couple dozen different magazines, mostly really technical trade magazines, stuff for which I have no background.  They have websites in support of all of those magazines though, which means about 24 websites - half of which had already been moved into a large D7 multisite install, and the other half of which were in the process of being migrated into the same base.  \r\n\r\nOf 120 people in the entire company, there are 3 Drupal developers, of which I'm one.  There's a \"web production\" team, but what they actually do is build emails.  There's a dedicated designer who has been doing the front end/theming stuff for all these sites that we're rolling out, but she's leaving next week for good.  What that means is that I'll probably be put somewhat back in charge of the front end (where I started), but in the meantime I've been working with a dude named Mike who is exactly the guy I've been looking for for the last 4.5 years.  He's really good, really patient, really free with his copious knowledge, and seems genuinely stoked to have me on board.  And over the last 4 months or so, my skills have started really snowballing.  \r\n\r\nI still suck at this stuff, but I'm getting a lot better, and fast.  I'm getting pretty comfortable with the Ops part of DevOps, and am even writing some decent Drupal code.  I've been working on a contract project for the last 3 months and I can confidently say that it would probably be over my head if not for the stuff I'm being exposed to on this gig.  If nothing else it's given me a lot more confidence that I actually know some stuff now.  They in house bugtracker is called <a href=\"http://www.redmine.org/\">Redmine</a>, which just happens to be a Rails thing.  Nobody in the company knew Rails or Ruby server setup, so it's become mine.  It's a huge PITA, but I'm learning a hell of a lot about this tiny little OSS community around Redmine, and how to run a production Ruby app that gets a fair amount of traffic.  And the hell that being stuck in a Ruby deployment situation can be.  \r\n\r\nI was given a ginormous Dell laptop running Windows 7 as my work computer - the only thing that looked like it might be a hiccup in the awesomeness.  Given that there are only 3 real developers in the entire company though, the corporate process and restrictions that I've been afraid of for the last 34 years were pretty much non-existent, at least as far as what I could do with my laptop were concerned.  I installed a VM running Ubuntu 12.04 the second day and have been working in Ubuntu for 8 hours a day.  This is in addition to working between 10 and 20 hours a week on the contract work that I still have, and unfortunately have to do to make the ends meet (supporting a family of 5 in NJ is expensive as it turns out).  I don't think I could keep up a 55 hour week forever, but who knows?  Practicing and practicing and practicing in the service of getting really, really good at something has pretty much been what I do since I've been a teenager, so in that regard I'm well equipped.\r\n\r\nI finally feel like I'm at the station, though not on the train yet.  This is the training ground I've been looking for for 4 years now.  My mission for this year is to get really involved with the Drupal community.  I didn't get very excited by D7, but D8 is looking like Drupal is finally going to broaden it's scope into a project that encompasses modern development techniques that are going to be useful beyond Drupal's borders - a rather big hangup of mine as far as putting eggs in the Drupal basket is concerned.  \r\n\r\nSo anyway, that's about it for now.  Need to play more music, but I will again some day.", slug: "so-yeah-i-got-job", summary: "I love this blog.  It's amazing how much I used to write.  I was so young and so passionate!  My ego was totally huge!  I had no idea how much of a ride I was really in for!  It's a good thing, too!!\r\n\r\n", previous_id: nil, published: true, pub_date: "2013-01-08 12:42:44"},
  {title: "Know Thy Elders", body: "I'm starting a new gig in a couple weeks.  I found out about the existence of the gig in the first place because I follow the guy who will be my new boss on Twitter, since he's been around the Drupal scene and very long time and following the leaders in your industry is basically one of the core things that Twitter is *for*.\r\n\r\nYou don't need to necessarily know every single leader in every single lang, but if you work on the web and want to move your career forward, you'd do well to know who most of these people are, in absolutely no order.  This is absolutely (and hopefully obviously) not an exhaustive list, more of a starter pack. \r\n\r\n- Dries Buytaert\r\n- Taylor Otwell\r\n- Fabien Potencier\r\n- Guido van Rossum\r\n- Jacob Kaplan-Moss\r\n- Kenneth Reitz\r\n- Matz\r\n- David Heinemeier Hansson\r\n- Rich Hickey\r\n- Brendan Eich\r\n\r\nIf you're a Drupal dev, you should add these to the list\r\n\r\n- Larry Garfield\r\n- Robert Douglass\r\n- Peter Wolanin\r\n- Angie Byron\r\n- Jeff Eaton\r\n\r\n---\r\n\r\nGetting to know not just the tools out there but the folks who made them and their reasons for making them can really help you decide if a given tool was created for a use case like yours.", slug: "respect-thy-elders", summary: "", previous_id: nil, published: true, pub_date: "2016-07-11 15:37:32"},
  {title: "Dear Wood Brothers,", body: "We met last October at the taping of the \"<a href=\"http://www.woodsongs.com/showdetailspage.asp?SN=505\">Woodsongs Radio Hour</a>\" in Louisville, Kentucky.  It was the one where Edgar Meyer and Chris Thile were there, also.  They did the show after ours?  Anyway, I just wanted to tell you something...\r\n\r\nI spent the better part of my college years listening to a lot of MMW.  I actually had to willfully cut myself off because I was absorbing a bit too much of Chris' style, in my youthful opinion.  I hadn't really listened to much in the several years since then, but it was still a bit of an intimidating treat to be on the set of this nationally syndicated radio show with Chris Wood and Edgar Meyer.  My bass teacher in college used to drag us to master classes down in Hickory NC, and Edgar's was one of them.  It was mindblowing, but I digress.  I went out and bought your album, <em><a href=\"http://www.amazon.com/Loaded-Wood-Brothers/dp/B00140GXSI/ref=sr_1_1?ie=UTF8&s=music&qid=1260651688&sr=1-1\">Loaded</a></em>, the day after the taping.  \r\n\r\nThe point I'm getting at is that we, as professional musicians, have been taught through many generations of unfortunate Pavlovian training to view the worth of our art through the lens of commerce.  How many units we sell is how good our record is.  Of course, we know that we're creating art and that the value of our work can't be quantified as simply and as greedily as that, but if your record doesn't move that many units, it's harder to stay excited about it as a work of art, isn't it?  It's certainly harder to keep our record label excited about it.  That fact is quite likely the fundamental cause of the mess that we find our \"industry\" in, wouldn't you say?  That it's an industry at all is part of the problem.  Irony.\r\n\r\nSo, I just wanted to take a moment to tell you, in public, what a profoundly great record it is.  It's moved me to tears more times than I can count, and almost every song on there has at one point or another perfectly summed it all up for me.  I haven't heard music as good since probably the first time I ever heard Gillian Welch.  I'm not sure how many units it's sold, maybe \"not many\", but it's one of the finest albums I've ever heard.  So, thank you.", slug: "dear-wood-brothers", summary: "We met last October at the taping of the \"<a href=\"http://www.woodsongs.com/showdetailspage.asp?SN=505\">Woodsongs Radio Hour</a>\" in Louisville, Kentucky.  It was the one where Edgar Meyer and Chris Thile were there, also.  They did the show after ours?  Anyway, I just wanted to tell you something...\r\n\r\n", previous_id: nil, published: true, pub_date: "2009-12-12 20:55:34"},
  {title: "Open source and why it's cool", body: "<p>What is open source?  It can actually mean a variety of different things, but most simply it means free software that anyone can use as is or alter as they see fit for their particular needs.  According to <a href=\"http://en.wikipedia.org/wiki/Open_source\">Wikipedia</a> - \"Some consider open source a philosophy, others consider it a pragmatic methodology.\"  I think I fall into both camps, but being the pragmatic, methodological guy that I am I shall present that angle today.</p>\r\n\r\n<p>When I first got into software and development a few years ago it was because of one of the most proprietary devices out there - the iPhone.  Proprietary is the exact opposite of open source.  It is not free.  You are not welcome to see the iPhone OS source code.  You are not welcome to use anything except for Apple's set of development tools to build iPhone applications.  You may only distribute those applications through the AppStore, of which Apple is the sole overseer.  I didn't consciously realize the implications of this stuff two years ago.  I just wanted to build a band app that all my friends could use and get rich.  So I bought a Mac and dove in.</p>\r\n\r\n<p>Upon diving in, I realized many things.  One is that Apple and their set of development tools - called Xcode (X as is OS X, the Mac OS) - came with the most amazing set of documentation on virtually every aspect of developing software built right in.  My education began there.  Poring over the included documentation and learning how the iPhone OS and Object Oriented programming worked on a high level was the beginning of the path for me here.  Among other things I learned that the Mac OS (operating system) and by extention the iPhone OS were built upon an open source OS called Unix.  <a href=\"http://en.wikipedia.org/wiki/Unix\">Unix has been around since the late 60s</a>, and was initially developed at Bell Labs.  Unix runs on the \"command line\", which is like way back in the floppy disk era when you used to have to type into DOS to get your computer to run programs.  Most professional developers I met at the DrupalCon a month ago seem to have a deep fear of the command line.  Luckily my early experience with Rails and Git got me over that fear before I learned that I should have one.</p>\r\n\r\n<p>Anyway, there are many different versions of Unix out there, some open source (meaning open to anyone helping develop it) and some proprietary (meaning you have to pay a licensing fee to even use it).  Some hippies at UC Berkeley one day got tired of Ma Bell and her ridiculous licensing fees and decided to make their own variant called <a href=\"http://en.wikipedia.org/wiki/Free_bsd\">Free BSD</a>.  To make a long story shorter, Steve Jobs and co. took Free BSD in the late 90s and made it the base of their new OS.  OS X, a really awesome, intuitive, stable operating system that only legally runs on Macintosh computers took an open source project as it's guts.  What the world knows as OS X is basically a really nicely designed wrapper over top of Free BSD.  If you're on a Mac and you go up to the Spotlight in the top right and type in \"Terminal\", you'll get the command line for your computer.  This is the real operating system you are speaking to underneath the glitsy OS X veneer.</p>\r\n\r\n<p>So what's the point?  Who cares?  Steve Jobs ripped off a bunch of hippies and now he's a genius?  Well, yes, and here's why.</p>\r\n\r\n</p>Windows, the beloved, world dominating piece of shit OS that never works right whether you know it or admit it or not is not an open source project.  It and it's source code have been sequestered away in Redmond WA for the last 25 years or so.  The only people allowed to work on it are MS employees following MS corporate policies, coding practices, and managerial and marketing direction in their development of Windows.  I liken this to being in a really high paid <a href=\"http://marctopaz.com/main.html\">Connecticut wedding band</a>.</p>  \r\n\r\n<p>By contrast, Free BSD - though a newer OS than Windows even - comes from a pedigree of having been developed and refined for the last 40 years.  Open source means anyone with the mind to can contribute to the project with only their own needs and imaginations as their guide.  Ultimately what happens in a sucessful open source project is that a <em>community</em> of developers begins to coalesce.  Different perspectives, features, and methodologies are brought in from all over the world by developers trying to solve problems, not by the marketing department downstairs or your manager who has to make his boss happy with this one feature.  What would be a security hole to exploit is plainly visible for all to see and for all to immediately get on top of fixing for the good of everyone who uses that software.  If you need a feature that doesn't exist yet, you write it yourself and share with everyone in the community.  I liken this to participating in the <a href=\"http://www.slopgrass.com/photo.htm\">late night jam at Slopryland</a>.</p>\r\n\r\n<p>That's probably enough for now.</p>", slug: "open-source-and-why-its-cool", summary: "<p>What is open source?  It can actually mean a variety of different things, but most simply it means free software that anyone can use as is or alter as they see fit for their particular needs.", previous_id: 214, published: true, pub_date: "2010-05-22 15:30:29"},
  {title: "Chapter 6b - the layman's introduction to database migrations in Ruby on Rails", body: "<p>This is not for programmers.  This is for myself, because when I first started poking at Rails 6 months ago, I didn't have any idea why I needed to edit a migration file, much less what a migration was, except that it must have something to do with a database.  I only knew that because of the command </p>\r\n<code>$>rake db:migrate</code>\r\n<p> that I was told to perform and the fact that it had the letters \"db\" in it.<p>\r\n<p>So here's the deal.  This morning I talked about <a href=\"http://ignoredByDinosaurs.com/2009/10/chapter-6a-version-control/\">version control</a> and it's place in the life cycle of your application.  What version control does is keep track of the changes that you make to your applications source code from start to finish (whenever that is).  The only problem with this is that a big chunk of the data <em>and</em> functionality of a modern web application doesn't reside in the app's source code, it resides in the database, and nobody has invented an efficient version control system for a database yet.  Some friends of mine have tipped me off to different methods that they've used - mostly around writing down DB schema changes into a text file that then gets placed under version control with the rest of the source.  That's not entirely efficient, though, is it?</p>\r\n\r\n<p>Ruby on Rails has come up with a system called \"migrations\".  Actually, someone surely came up with this way before Rails was invented, but I'm new here, so feel free to correct me in the comments section down there.  Let's say you create a new rails app (This is directly from the awesome book \"<a href=\"http://www.amazon.com/Agile-Web-Development-Rails-Third/dp/1934356166/ref=sr_1_1?ie=UTF8&s=books&qid=1255546866&sr=8-1\">Agile Web Development with Rails</a>\" by a bunch of smart folks, and this example is the beginning of building a shopping cart system) :</p>\r\n\r\n<p><code>$>rails newapp</code></p>\r\n\r\n<p>This generates a load of boilerplate code which makes up the bones of any Rails app.  That means that instead of spending the first week of the development cycle sitting there writing low-level code that provides primordial programmatic structure, you can spend it writing code that actually does something that you (or your client) can interact with.  Let's keep it as simple as possible and say that you are going to have three fields that will be stored in the database to start. Rails let's you run this scaffold generating command:</p>\r\n\r\n<p><code>$>ruby script/generate scaffold product title:string description:text image_url:string</code></p>\r\n\r\n<p>This command runs a ruby script that builds a LOT of code for you, so much that you're only minutes away from tinkering around and you only started a few minutes before that.    This command creates the \"products model\", which is how a programmer says that they are going to start by creating some place for the admin to store the products that they want to sell online.  The fields that were initially created were for the name of the product, the description, and the URL where you're storing the picture of the product.  Don't worry about it too much, but take a look at the command up there, it'll make sense if you know what a string is.  Just know that the data entered into these fields is going to get stored in a database.  Wait, how are we gonna store this stuff in our database?  Have we even created the tables for the database yet?  No.  Rails does it for us.  Here's how.</p>\r\n\r\n<p>One of the files that is created when we run that scaffold generator is called a \"migration file\".  This migration file is what actually creates the tables in the database, the columns in the tables, and can even populate the tables with data (used for testing), depending on what you do to the migration file.  There is a command (or method if you're OOP savvy) created when the scaffold is run called the \"up method\".  That's the one that changes your database.  There is also a \"down method\", which is what undoes the changes to your database.  When you run the good old <code>rake db:migrate</code> command Rails goes applies the appropriate changes to your database for you, and provides a way to undo them later.  So, your client comes in and wants to add a Price column to the store.  In the old days, you'd execute this SQL statement :</p>\r\n\r\n<p><code>ALTER TABLE products ADD column price DECIMAL (8,2) NOT NULL;</code></p>\r\n\r\n<p>Now, what if you wanted to undo that?  That's a command you ran there, not some source code that you can save and delete later if you change a few things.  You can't place SQL statements under version control.  You'd have to go and type that statement into the text file that was under version control, and then hope that you could effectively backtrack to it later if you wanted.  If your application and it's database have come a ways since that command you're going to have a good time figuring out how to undo it.  Rails doesn't make you do that.  In fact, you almost never are going to talk directly to your database in Rails.  Instead, you go to the most recent migration file (which <em>is</em> source code and thus under version control) and alter a line to look like this:</p>\r\n\r\n<p><code>add_column :products, :price, :decimal,\r\n:precision => 8, :scale => 2, :default => 0</code></p>\r\n\r\n<p>Then you run a script that alters the database for you.  Below this add column instruction, or \"up method\", you add the remove column instruction, or \"down method\":</p>\r\n\r\n<p><code>remove_column :products, :price</code></p>\r\n\r\n<p>This is the undo button for your database and any schema changes along the way.  Since this command is under version control, and since you're not directly interacting with your database, and since Rails knows how and which migrations to apply and in what order if you ever want to go back to a previous version, you've just made your life a LOT easier.  Now if you only understood what the hell you were talking about!!</p>\r\n\r\n<p>For a vastly better explanation, <a href=\"http://guides.rubyonrails.org/migrations.html\">try here</a>.  Good luck.</p>", slug: "chapter-6b-laymans-introduction-database-migrations-ruby-rails", summary: "<p>This is not for programmers.  This is for myself, because when I first started poking at Rails 6 months ago, I didn't have any idea why I needed to edit a migration file, much less what a migration was, except that it must have something to do with a database.  I only knew that because of the command </p>", previous_id: 117, published: true, pub_date: "2009-10-15 02:19:30"},
  {title: "Blog v7, I think", body: "### v0 - Blogger.\r\n\r\n<p>I think I got 3 or 4 posts in before realizing I wanted to try actually throwing up a website of my own.</p>\r\n\r\n<h3>v1 - <a href=\"http://wordpress.org/\">Wordpress</a></h3>\r\n\r\n<p>One click installer at GoDaddy, my webhost for the first three months.  </p>\r\n\r\n<h3>v2 - <a href=\"http://drupal.org/\">Drupal</a></h3>\r\n\r\n<p>I wanted to get more involved in the development side of it and was really loving the opportunities in the Drupal job market.  Migrating a Wordpress blog was so predictable that there was a Drupal module to do so, and it brought all of my old posts, categories, everything.  The setup of the categories was a little weird - it dumped everything into a Drupal Taxonomy called &quot;Wordpress Categories&quot;.  I guess whomever wrote the module was tired of writing the module by the time they got to that point.</p>\r\n\r\n<h3>v3 - Back to Wordpress</h3>\r\n\r\n<p>Not really sure why.  I have a vague recollection of blogging in Drupal just not feeling as fun, so I didn&#39;t do it as much.  I&#39;d moved into <a href=\"http://www.red-sweater.com/marsedit/\">MarsEdit</a> because it felt more &quot;hacker-y&quot;, but it didn&#39;t provide as fertile-seeming an environment as good ole Wordpress.</p>\r\n\r\n<h3>v4 - Back to Drupal</h3>\r\n\r\n<p>I was serious about Drupal now.  I was starting to &quot;get&quot; Views and needed to put a portfolio together since I&#39;d quit RRE by that point.  </p>\r\n\r\n<h3>v5 - <a href=\"http://jekyllrb.com/\">Jekyll</a></h3>\r\n\r\n<p>I was starting to get braver, even though this is the dead simplest tool out there.  Some other soul put together a Ruby script that&#39;d pull all my posts out of the Drupal DB and turn them into Markdown, the format that Jekyll required.  Still, blogging just didn&#39;t seem quite as fun.  I guess I didn&#39;t realize how much time I had in that tour bus after all.</p>\r\n\r\n<h3>v6 - Back to Drupal</h3>\r\n\r\n<p>I was pretty much a full time Drupalist by this point and put together a pretty decent portfolio site with it in a day or so.  I was working on my <a href=\"https://github.com/JGrubb/Sass-Base-Lib\">Sass library</a> and put together a &quot;responsive&quot; grid in a few hours.  Good times.  Lasted me a while but then the itch came again.</p>\r\n\r\n<h3>v7 - <a href=\"http://rubyonrails.org/\">Rails</a></h3>\r\n\r\n<p>Finally came back to Rails about two months ago and rewrote this entire blog in about 6 hours from scratch.  Not the trickiest of endeavors, but it took me 4 years to do that 6 hour rewrite.  Wrote a Ruby script with <a href=\"http://sequel.rubyforge.org/\">Sequel</a> to pull the posts out of the Drupal DB and put them into my Rails DB, URL aliases and all.  The migration script took way longer than the actual build.  Drupal likes to &quot;normalize the fuck out of your data&quot;, which means it scatters things all over the place in an attempt to store them in only one place.  Did you know that the name of the column in the URL alias table is &quot;src&quot;, whereas everywhere else in the Drupal DB it&#39;s &quot;source&quot;.  Shit like that, Drupal...  I was able to put together with 4 MySQL tables what took Drupal something like 75 tables to do.  Of course, the vast majority of those DB tables were never touched, which is a whole other thing about Drupal.</p>\r\n\r\n<h3>v7.1 - current - Rails and <a href=\"http://www.mongodb.org/\">Mongo</a></h3>\r\n\r\n<p>I&#39;ve been playing with Mongo for the last couple weeks and figured &quot;fuck it&quot; and did it yesterday.  Took me 20 minutes to migrate the posts out of MySQL and into Mongo and replace ActiveRecord with MongoMapper.  20 minutes.  It took me the rest of the night to get sessions and login working again since I dumped my entire user row into Mongo, so I had keys for <code>:_id</code> and <code>:id</code> in the same document.  Once I realized that and played nicely with Mongo&#39;s idea of id (same for posts), everything worked out nicely.</p>\r\n\r\n<p>Of course, for all that fun with cutting edge technology, there&#39;s going to be some sysadmin pain.  And there was.  I followed the wrong instruction to get Mongo going on this Debian server (followed the Ubuntu instructions.  Whoops!) and spent the better part of this morning trying to untangle the mess.  Never did, but typed <code>mongo</code> and it magically came up somehow.  then spent the rest of the day migrating data and trying to figure why the hell ActiveRecord is still looking for a DB even though I ripped out every vestige of AR.  Anyway, it&#39;s working now, and this will be the first post committed to a non-relational (aka NoSQL) database in my programming career.</p>\r\n\r\n<p>Happy times.  The amazing thing is that I&#39;ve kept all of these posts with me through 8 or 9 different databases so far.  Yay IBD.</p>\r\n", slug: "blog-v7-i-think", summary: "    <h3>v0 - Blogger.</h3>\r\n\r\n<p>I think I got 3 or 4 posts in before realizing I wanted to try actually throwing up a website of my own.</p>\r\n\r\n<h3>v1 - <a href=\"http://wordpress.org/\">Wordpress</a></h3>\r\n\r\n<p>One click installer at GoDaddy, my webhost for the first three months.  </p>", previous_id: nil, published: true, pub_date: "2012-08-04 05:00:00"},
  {title: "More on quitting a band.", body: "I just realized this weekend that I missed something in Friday's post.  \r\n<ul>\r\n<li><a href=\"http://www.jambase.com/Articles/9417/BILL-NERSHI-LEAVING-SCI\">Nershi's announcement</a>.</li>\r\n<li><a href=\"http://www.tealeafgreen.com/phpBB2/viewtopic.php?t=15721\">Ben's announcement</a>.</li>\r\n<li><a href=\"http://www.hotbutteredrum.net/index.php?option=com_content&task=view&id=2572&Itemid=174\">Zac Matthew's announcement</a>. </li>\r\n<li><a href=\"http://ignoredbydinosaurs.com/2009/11/and-i-bid-you-goodnight\">And mine</a>.</li>\r\n</ul>\r\n\r\nSo, if you haven't already, take a look at the dates, and allow me to prepare a meditation on why November seems to be such a drag for touring bands...\r\n<!--break-->\r\nSurprise!  I'm a cliche!  All of these announcements were dated sometime in November - Billy in '06, Ben in '07, Zac in '08, and myself in '09.  I already asked, what is it about November that makes one of us flip out and quit our band each year?  Well, obviously, all of these bands are summertime festival circuit bands.  That was RRE's bread and butter, sort of like the hippy band equivalent of Black Friday.  Remaining closed on Black Friday is not an option for most retail businesses, just as not hitting the road each summer is not an option for a band that also wishes to remain a viable business.  So, how does that end up laying out your touring year?  We'll start in the spring...\r\n\r\nSpring tour is great.  People have been bottled up all winter and are ready to party.  You've had all winter to get creative (or not) and hopefully have a boatload of new tunes ready for your crowd.  These are all club dates since festival season hasn't begun yet, and usually they are packed with a fired up crowd.  You deliver.  Your job is the best one on earth.  March, April, May.\r\n\r\nFestival Season!  It usually starts some time in April for most of us, though if you're lucky enough to be on the <a href=\"http://magmusic.com/\">Judy's fav list you might get to start early at SpringFest</a>.  The majority of your summer is spent doing what's called \"routing\", which means getting from good gig to good gig.  Hopefully, those good gigs are every weekend and Tuesday night is paying for the gas between Fridays, but if not, and your next gig is on an opposite coast, then you might be playing some of the dreaded \"routing dates\".  These are the gigs in Winters, CA on the Wednesday before High Sierra Music Festival, or the Bottleneck in Lawrence, KS before or after Wakarusa.  They're rough, not only because you get yanked from festival land back to club reality, but because the vast majority of the live band audience isn't really interested in going to the Bottleneck in the middle of summer.  Club owners don't have the option of shutting their club for the whole summer, and some scenes probably do a really good business in clubs in the summer, but ours ain't one of them.  File under : necessary evil.  It's cool, though.  On weekends you're a rockstar.  \r\n\r\nNow it's fall.  You've already been on the road for half the year.  September might throw you a festival bone or two, but mostly it's back to the clubs.  The edge has come off of what were fresh tunes and a fired up crowd.  It's time to start laying out plans for the winter.  You need to write a new record, but you also need to keep the business going, so it's a constant push and pull.  Oh, you're on the road while you're deciding all of this so usually you're too tired to really be able to puzzle out the correct combination of dates that will keep the business far enough above water to enable you to do what you really want to do, and that's be home with your family and write some new music.  Your crowd will be there, and they will be expecting you to prove your otherworldly talent by delivering them fresh new tunes, preferably originals but whatever they want at the time will be fine.  Do not disappoint, my friends.\r\n\r\nSo you walk the line, and don't line up a winters full of shows so that you can get creative.  The problem?  You've been on the road for so long by this point in the year that you don't remember how to write music.  Better line up some shows for February, since payroll is running out...\r\n\r\nWash, rinse, repeat for at least 7 years and what you have is a subconscious dread of winter.", slug: "more-quitting-band", summary: "I just realized this weekend that I missed something in Friday's post.  \r\n<ul>\r\n<li><a href=\"http://www.jambase.com/Articles/9417/BILL-NERSHI-LEAVING-SCI\">Nershi's announcement</a>.</li>\r\n<li><a href=\"http://www.tealeafgreen.com/phpBB2/viewtopic.php?t=15721\">Ben's announcement</a>.</li>\r\n<li><a href=\"http://www.hotbutteredrum.net/index.php?option=com_content&task=view&id=2572&Itemid=174\">Zac Matthew's announcement</a>. </li>\r\n<li><a href=\"http://ignoredbydinosaurs.com/2009/11/and-i-bid-you-goodnight\">And mine</a>.</li>\r\n</ul>\r\n\r\nSo, if you haven't already, take a look at the dates, and allow me to prepare a meditation on why November seems to be such a drag for touring bands...", previous_id: 71, published: true, pub_date: "2009-12-15 20:54:57"},
  {title: "Open source the music business!", body: "<p>That sounds like the spirit, then!  How do I explain this?</p>", slug: "open-source-the-music-business", summary: "<p>That sounds like the spirit, then!  How do I explain this?</p>", previous_id: nil, published: true, pub_date: "2010-05-22 00:32:33"},
  {title: "Drupal is uncool because", body: "So before the pitchforks come out, this is where this blog post came from.\r\n\r\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">I need someone to submit “Why is drupal uncool?&quot; to <a href=\"https://t.co/WkZUojaBkS\">https://t.co/WkZUojaBkS</a> <a href=\"https://twitter.com/hashtag/DrupalCon?src=hash\">#DrupalCon</a></p>&mdash; Cathy YesCT (@YesCT) <a href=\"https://twitter.com/YesCT/status/701845676213276672\">February 22, 2016</a></blockquote>\r\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\r\n\r\nYesCT started riffing on great ideas for DrupalCon session.  Alas I didn't submit any of them, I submitted my session about how Paragraphs module got my mojo back.  It was not accepted, which is kind of a relief.  \r\n\r\nAnyway, I have a few ideas on this topic.  Let's see what falls out.\r\n\r\n---\r\n\r\n### It's PHP\r\n\r\nSo yes, PHP.  AFAIK in all of it's 20+ year history PHP has never ever been the Hot New Thing.  It has things to recommend it, namely the deployment story which enables folks to get started building things immediately and not have to worry about setting up anything on a server.  If there were any other option that were this simple, PHP probably would not be the thing that it is today, but for that horse a kingdom has been built.\r\n\r\nJust Google \"why PHP sucks\" for more on this topic.  In a nutshell it's maddeningly inconsistent.  I've been working with Python for all of 4 weeks and I already know it better than I know PHP in 8 years of working with it. \"The API is consistent\", which is a fancy way of saying that you don't have to look up the order of the arguments for a function every single time you want to use that function.  Quick, `array_push()` - is it haystack/needle or needle/haystack?  \r\n\r\nDrupal suffers from this spillover, as do basically all PHP frameworks.  Until D8, Drupal didn't even have the benefit of object orientation (by benefit I mean, it makes it cooler).\r\n\r\n### It (historically) tries way too hard\r\n\r\nRemember this - [http://certifiedtorock.com/](http://certifiedtorock.com/)?  Sadly, this is still a thing on the internet.\r\n\r\nOr what about this one? \r\n\r\n![webchick world tour](https://groups.drupal.org/files/LADrupalWebchick.jpg \"Webchick World Tour, 2011\")\r\n\r\nI'm super, duper sorry for dredging this up, because I have nothing but respect for Webchick.  Seems like everything she writes is so dead on and the respect that she has in the community probably surpasses what even Dries gets.  But I'm not sure who thought this was a good idea.\r\n\r\nIn this regard, Drupal is like me at 15 or so.  I was not cool, but I went and bought Doc Martins anyway because the cool kids wore em.  I think both of these are around the same era - the time that Rails was absolutely the White Hottest New Thing and everyone else was trying to keep up.\r\n\r\n### The documentation sucks\r\n\r\nAnd this is the real point here.  I started working with Django last week.  [The documentation is complete, organized, and located in one indexed portion of the website](https://docs.djangoproject.com/en/1.9/contents/).  You can download a PDF of the entire thing and it's better than any O'Reilly book you could possibly buy about Django.  If you land on a page for an old version of the framework, [it lets you know](https://docs.djangoproject.com/en/1.7/contents/).\r\n\r\n[The same thing goes for Postgres](http://www.postgresql.org/docs/9.5/interactive/index.html).\r\n\r\n[The same thing goes for Symfony](https://symfony.com/doc/current/book/index.html).\r\n\r\n[The same thing goes for Rails](http://guides.rubyonrails.org/).\r\n\r\n[The same thing goes for React](https://facebook.github.io/react/docs/getting-started.html).\r\n\r\nThese are open source projects that want to be used.  They put forth as much effort into the documentation for the things they've built as they put into the things themselves.  It's impossible as a Drupal dev to see documentation like this and not feel like \"wow, this is a toolkit that takes itself seriously and respects folks who want to use it\".  It's impossible as a Drupal dev to see documentation like this and not feel like \"WTF is Acquia doing?\"\r\n\r\nDrupal 8 will not succeed until it has documentation like this.  I have contributed to the Drupal 8 User Guide, but good luck finding it.  You can find [the project page](https://www.drupal.org/project/user_guide), but the actual documentation is nowhere on the front page results of that search.  \r\n\r\n[Rather large rant about the JS framework in core discussion redacted.]", slug: "drupal-uncool-because", summary: "", previous_id: nil, published: false, pub_date: "2016-03-20 09:16:47"},
  {title: "Installing Drupal", body: "See [the previous post in this series](/posts/276-why-drupal/) on getting started with Drupal\r\n\r\n---\r\n\r\nSo welcome back, this is actually the most challenging part of this tutorial - installing Drupal.  I'm assuming no prior web development experience, so the first part will be installing something to run your tutorial Drupal site on.\r\n\r\nFor this we'll be using a project called [MAMP](https://www.mamp.info/en/).  MAMP is a package of software that makes it easy to set up Drupal (but not just Drupal) on your computer.  I'll skip the deeper details for now, but head over to MAMP and download it.  You can stick with the free version for now.\r\n\r\nnote: There are many basically equivalent packages out there for this purpose - XAMPP, Acquia Dev Desktop.  If you'd prefer one of those feel free, but I'll be using MAMP because it's very simple and is what I got started with.\r\n\r\n### What is MAMP?\r\n\r\nThis section can be safely skipped if you don't care.\r\n\r\nMAMP is basically the same package of software that runs on any webhosting server, think Dreamhost or GoDaddy.  It stands for (M)y (A)pache, (M)ySQL, and (P)hp.  These are the three things that you need to make Drupal work.  \r\n\r\nApache is a \"webserver\".  The webserver piece is the one that sits there and listens for incomcing requests from someone's browser (or bot).  When a request comes in from somewhere, Apache figures out what that request is asking for and routes it to the correct item.  It could be an image, which is very simple because it's just a file sitting on a disk.  In this case, Apache grabs the file and returns it.  This is called \"the Request/Response\" cycle, and is pretty much the slab that the internet was built on.\r\n\r\nSometimes however, the request is asking for a webpage in Drupal.  This case is a bit more complex, and that's when PHP and MySQL come into play.  PHP is a programming language.  You might know that already, but Drupal is mostly written in PHP.  That's why you need it for this tutorial.  When you create a new page on your new site, the content of that page gets stored not as a file on a disk, but as a row in a database.  MySQL is an exceptionally popular database, and the one that we'll us for this tutorial.\r\n\r\n### On to the show\r\n\r\nHopefully MAMP has finished downloading by this point.  Go through the installer, and when you get done you should be able to open MAMP in the same way that you'd open any other application.  Once it starts up, you should have a screen that looks basically like this --\r\n\r\n![Mamp opening screen](https://www.mamp.info/en/images/screenshots/en_mamp-start.jpg)\r\n\r\nOnce you click \"Start Servers\" you've done it!  You've built your first webserver stack!  \r\n\r\nClick into \"Preferences\".\r\n\r\nUnder the preferences option, you'll get some options to twiddle with.  **Don't twiddle with them**, at least not yet.  Option names will vary, but you're looking for the rightmost tab, it's either called \"Apache\" or \"Webserver\" in the most recent versions.  Under that tab will be a most pertinent piece of information - the \"Document Root\".\r\n\r\n> *Document Root - where the webserver will look for the files that it's trying to serve.*\r\n\r\nIn a nutshell, once we download Drupal, we're going to put all it's files in that directory so make a note of where that directory is!\r\n\r\n### Downloading Drupal!\r\n\r\nHead on over to [Drupal.org](https://www.drupal.org/download) and download Drupal!  At the time of this writing, that giant green button takes you to another screen where you are presented with ah choice.  I was hoping to shield my readers from this, but if you're going to learn Drupal I guess now's as good a time as any to explain why this choice exists at all.\r\n\r\nYou may skip all of this.\r\n\r\n---\r\n\r\n### An interlude\r\n\r\nDrupal has been around for nigh 12 years at this point. It was started in [a Dutch kid's](http://buytaert.net/) dorm room as more or less a message board for that dorm.  Early in life it embraced the open source model for development, which means that other kids in his dorm were able to hack on it and add to it and improve on it and make it better for everybody.\r\n\r\nMany years later Drupal was running some of the largest websites on the internet, and while it had been added on to and improved by thousands of developers by that point you could still find some of that 12 year old dorm code if you looked in the right places.  Many people, your author included, felt disbelief that such code could be responsible for so much, yet at the same time took great comfort and pride that really anyone could learn this stuff just by following this code around.  There truly was nothing really fancy about Drupal's codebase for a great many years.  A few really smart patterns up front, followed diligently for years, and the rest is early internet history.\r\n\r\nBut time marches on, and with it evolution.  Standards in computer engineering, common patterns for solving common problems, and much more complex needs on the web necessitated engaging with the wider PHP ecosystem.  After all, the Easter Islands were once thriving communities, yet after time they thrived themselves right out of existence.  Drupal wanted to avoid such a fate, so a decision was made in 2011 to replace some key pieces of Drupal's internal code with more modern code from a well known PHP framework - [Symfony](https://symfony.com/).\r\n\r\nThis made a heck of a lot of sense.  Much of Drupal's aforementioned dorm code had very interesting, almost paleological qualities about the way that it solved problems as if \"this was how our ancestors built a fire before we had matches\", and newcomers to Drupal that *did* have a background in software development were often left scratching their heads to some of the decisions.  In a nutshell, learning Drupal was easier for newcomers to web development than it was for established developers.  \r\n\r\nThus the rather controversial decision was made to standardize some of the very deepest parts of Drupal - those dealing with the \"request/response\" cycle.\r\n\r\nThus began a process that took 5 years and involved an almost complete rewrite of Drupal.  This is both shocking and obvious in hindsight, since a complete rewrite is something you never, ever, ever want to do with a software project, yet once you modernize a piece of a system, the rest of the system looks that much more archaic.\r\n\r\nThe good part - Drupal is a modern and really impressive piece of software engineering, and includes many more features in the standard install that you're going to want on your site than previous versions.  It's much more \"batteries included\" than older versions that required you to download and install lots of add ons to get it to do the things you really wanted it to do.\r\n\r\nThe bad part - much of the code that has been written by folks like you and me over the last decade doesn't work anymore.  This is kinda brutal, but such is evolution.  It also opens up something of a goldmine for new development opportunities within the Drupal ecosystem, but with that comes that learning to code for Drupal 8 will be a much different experience if you are new to building software.  It'll require you to know what you're doing, which I most certainly didn't when I was learning Drupal (6).\r\n\r\nThe other good part - this entire tutorial can be done now with Drupal 8.  \r\n\r\nSo go ahead and download Drupal 8, but once you decide that Drupal is, in fact, for you you'll probably revisit this topic.\r\n\r\n### Back to Drupal\r\n\r\nSo you've downloaded Drupal 8 - unzip it.  You'll have a bunch of files and folders that look like this inside the newly unzipped directory - \r\n\r\n~~~bash\r\nDownloads/drupal-8.0.5 [ tree -L 1                      ] 4:50 PM\r\n.\r\n├── LICENSE.txt\r\n├── README.txt\r\n├── autoload.php\r\n├── composer.json\r\n├── composer.lock\r\n├── core\r\n├── example.gitignore\r\n├── index.php\r\n├── modules\r\n├── profiles\r\n├── robots.txt\r\n├── sites\r\n├── themes\r\n├── update.php\r\n├── vendor\r\n└── web.config\r\n\r\n6 directories, 10 files\r\n~~~\r\n\r\nAll those files go in \"The Docroot\" - which is the path that you noted earlier in your MAMP preferences under Apache/Webserver/whatever.  It'll end in `htdocs`, so something like `/Applications/MAMP/htdocs` if you're on a Mac, or whatever that screen says if you're not.\r\n\r\n### The big payoff\r\n\r\nSomething always goes funny with people's computers, but at this point you should be able to navigate your browser to localhost:8888 and be greeted with the Drupal installation screen.\r\n\r\n![Drupal 8 install screen](https://www.acquia.com/sites/default/files/installd8.png)\r\n\r\nWe're going to be choosing all the defaults for this tutorial, click through the language and the next option is for \"installation profile\", just choose Standard.\r\n\r\nThe next screen - \"System Requirements\" - is the tricky one.  Ask below in the comments and we'll try to debug it together if you aren't allowed through.  MAMP should have all this sorted out for you already, though so soldier on.\r\n\r\nThe next and basically final step is to give Drupal the connection credentials to your MySQL database.  Those can be found on the welcome webpage if you click that middle button in MAMP.  That'll take you to a screen that tells you for sure, but it should be something like \r\n\r\n~~~\r\nuser: root\r\npass: root\r\nhost: localhost\r\n(open up the advanced options)\r\nport: 8889\r\n(leave the table prefix empty)\r\n~~~\r\n\r\nAt this point, you're in.  You've installed Drupal.  There is one more configuration screen that you can plug all the answers into on your own.  \r\n\r\nSave and continue on to [the fun part of the tutorial](/posts/280-first-steps-drupal/)!", slug: "installing-drupal", summary: "", previous_id: 276, published: true, pub_date: "2016-03-29 14:50:28"},
  {title: "Why Drupal?", body: "It's an interesting time to be building things for the web.  It's matured to a\r\nplace where much of our day to day lives is conducted through sites that we \r\naccess online.  I personally buy books on paper, diapers, any piece to repair a \r\nbroken appliance.  I search for clues on how to do my job.  I read up on the \r\nlatest state of th technology scene.  Every one of these places I go has largely\r\nthe same stuff on it - some kind of login, some kind of way to get to \"my stuff\", some kind of way to make sure that others can't get to my stuff.\r\n \r\nBuilding this stuff is not exactly easy, and to do it in a way that makes it a\r\nlot harder for other people to break (or break into) is downright terrifying.  So what do we do?  We team up.  How do we do it?  Well, in this day and age it's called \"open source software\".  \r\n\r\nDrupal is just such a piece of software.  Right out of the box it comes with all that standard stuff - user accounts, a mechanism for posting stuff online - either publicly or privately, and mechanisms for doing many of the other things that you could think of.  Lots of folks use Drupal and have been using Drupal for many years now, which means that for the vast majority of things that you want your site to do someone else has wanted their site to do that too.  Even better, they've already solved the problem and given the solution back to us all, so you don't have to go solve it again.  This is the essence of open source - folks all over the world working together, and a huge part of why I use Drupal.\r\n\r\n### What about Tool X?\r\n\r\nTo be sure, Tool X is excellent.  It has a great user community and many of these same problems have been solved in a different way inside it, but it actually requires you to write code, which Drupal doesn't require for you to get started.  \r\n\r\nTool W is another project much like Drupal, but it isn't nearly as flexible as Drupal, it stays within a smaller set of lines.  It does what it does within those lines excellently, so definitely evaluate if you can solve your case with Tool W before coming to Drupal, as Drupal is a bigger piece of machinery with a steeper learning curve.\r\n\r\n### Who uses Drupal?\r\n\r\nLots of folks.  Right now the best use case for Drupal is for sites that have a lot of content.  These include publishers and their sites, government agencies and their sites, and educational insitutions and their sites.  Lots of times these folks have specific needs for how they present their content to the world and how they allow the world to access it, and Drupal fits that use case like a glove.  \r\n\r\nTurns out that most things that go on the web aren't that far away from this specific use case, so extending Drupal to get there is often a pretty straightforward and well trodden path.  This series hopes to make it even more straightforward for newcomers.\r\n\r\n### Why not Drupal?\r\n\r\nDrupal is not good at everything, however.  Don't use it to ingest real time trade data from the NYSE, for example.  You'll want a leaner and more purpose built system for that, but chances are if you're building something like that you already know this.\r\n\r\nNow, on to [installing Drupal](/posts/278-installing-drupal/).", slug: "why-drupal", summary: "", previous_id: nil, published: true, pub_date: "2016-03-26 08:38:56"},
  {title: "The phases of iPhone ownership - the end of the road", body: "- [Part 1](http://www.ignoredbydinosaurs.com/2009/07/phases-iphone-ownership-beginning)\r\n- [Part 2](http://www.ignoredbydinosaurs.com/2009/07/phases-iphone-ownership-continued)\r\n- [Part 3](http://www.ignoredbydinosaurs.com/2009/07/phases-iphone-ownership-hazards-love)\r\n\r\nAnd here we are, but first - a story...\r\n\r\n---\r\n\r\nYesterday was my 4 year old's 5th birthday.  Michelle and I go back and forth about who's going to take video and who's going to take stills for singing \"Happy Birthday\", and decide I'll take the video.  \r\n\r\nWe get up to the part where she's lighting the candle and my phone stops recording - \"Your phone is full, please manage storage under blah blah blah...\".  This is an iPhone 6+, bought it two months ago.  Obviously I bought the 16GB model, but this was never a problem with my 5c so why would it be a problem with the 6+?\r\n\r\n_It has been a problem with my 6+._  I just deleted all my music and podcasts off of the phone less than a week ago, and as you can tell from the screenshot, whatever _is_ on here does _not_ add up to 11.something GB of stuff.  Not to mention, why is there only 11.something GB of available storage in the first place.  The OS is taking up over a quarter of the disk space??\r\n\r\n![](/uploads/image/image/63/full_2015-01-22_21.39.14.png)\r\n\r\nSo I'm googling last night, trying to figure out what's taking up the space on my phone.  Obviously something is cached it would seem to me, but I have no control over what this is or how to free up that space.  Some random post advises me to backup and restore the phone, which seems really janky to me, but the poster says this will wipe the cached stuff and only leave \"your stuff\".  I decide to try it, even though I'm respecting myself a little less at this point (I'm a developer for pete's sake, not some non-technical moron who has to search the internet for how to free up storage on his phone. Or am i??).\r\n\r\nI'm told by iTunes that I don't have enough free space on the phone to restore from the backup I've just made.  I'm wasting my life being frustrated at a phone at this point, rather than spending time with my wife on our son's birthday.\r\n\r\nI have a moment and I remember why I jumped to Apple gear in the first place...\r\n\r\n---\r\n\r\nAfter years of loyalty as a Windows user, after years of hating Justin Long's smug pre-hipster persona as the cool kid in the commercial opposite John Hodges, I bought a new HP laptop with Windows Vista on it.  I felt betrayed.  It was such a poor, clunky experience that I immediately regretted buying the laptop.  Two weeks later I bought an iPhone, as chronicalled in part 1 of this series.  It was, I can honestly say, life changing.  It just worked.  It didn't nag me, it didn't crash, it didn't hide useful features behind 3 submenus, it just worked.  It catalyzed the entire career path I've been on for the 7 years since I bought it.\r\n\r\nYou can guess where this is going.  My iPhone 6+ is no longer a device that \"just works\".  It does the exact opposite and costs me video of my 5 year old's birthday.  I guess Marco Arment wrote about this a month ago, but I'm officially done paying this much money to be frustrated by technology.\r\n\r\n---\r\n\r\nI'll go ahead and say it - if Jobs were still alive, he would've fired the motherfucker who even suggested shipping their top-of-the-line phone with only 16GB of storage, not only because it makes for an obviously crappy user experience but because he had an apparently much clearer long view - that happy customers keep coming back and unhappy customers flee at the first opportunity.\r\n\r\nMy first opportunity is in 10 months when my T Mobile jump plan comes back around.  I'll probably go retro, since I have less than a home screen's worth of apps installed on this thing anyway.  The only ones I actually really use are Email, Twitter, and Reddit, and arguably all of those on a phone are just ways to kill time when I could be enjoying the life around me.  \r\n\r\nLife moves on.", slug: "the-phases-of-iphone-ownership-the-end-of-the-road", summary: "", previous_id: 80, published: true, pub_date: "2015-01-23 15:54:06"},
  {title: "Intermediate Drush Hacking - Drush Aliases", body: "There are other articles on this topic around the internet, but for some reason I could never completely make the mental connection on how Drush aliases worked until recently.  It's actually really simple to get started, but most other articles tend to throw all the options into their examples so it kind of muddies the waters when you're trying to set yours up.  By \"you/yours\", of course I mean \"I/mine\".\r\n\r\n#### Simple\r\n\r\nMy work is an Acquia hosting client, and we have a multisite setup.  Aliases are a natural fit for multisite configs, so let's show that first.  \r\n\r\n~~~php\r\n<?php\r\n\r\n// put this in a file at ~/.drush/local.aliases.drushrc.php\r\n\r\n$aliases['foo'] = array(\r\n  'root'  => '/path/to/docroot',\r\n  'uri'   => 'local.foobar.com' // the local dev URL\r\n);\r\n~~~\r\n\r\nThis is all you need to get off the ground and start using aliases locally.  If you then run a `drush cache-clear drush` to reset Drush's internal cache, and then a `drush site-alias` you should be presented with a listing of your aliases.\r\n\r\n~~~shell\r\n@none\r\n@local\r\n@local.foo\r\n~~~\r\n\r\nThe key to this scheme, and something that I feel like was inadequately explained to me even after numerous tutorials, is that the name of the file itself defines the particular group of aliases that this setting will speak to.  If you put this into `~/.drush/foo.aliases.drushrc.php` then you list of aliases would look like this ---\r\n\r\n~~~shell\r\n@none\r\n@foo\r\n@foo.foo\r\n~~~\r\n\r\nIf you're running multisite, you'll have a few more in there --\r\n\r\n~~~php\r\n\r\n<?php\r\n\r\n// put this in a file at ~/.drush/local.aliases.drushrc.php\r\n\r\n$aliases['foo'] = array(\r\n  'root'  => '/path/to/docroot',\r\n  'uri'   => 'local.foobar.com' // the local dev URL\r\n);\r\n$aliases['bar'] = array(\r\n  'root'  => '/path/to/docroot',\r\n  'uri'   => 'local.example.com' // the local dev URL\r\n);\r\n$aliases['ibd'] = array(\r\n  'root'  => '/path/to/docroot',\r\n  'uri'   => 'local.ignoredbydinosaurs.com' // the local dev URL\r\n);\r\n\r\n~~~\r\n\r\n~~~shell\r\n\r\n$ drush sa\r\n\r\n@none\r\n@local\r\n@local.foo\r\n@local.bar\r\n@local.ibd\r\n\r\n~~~\r\n\r\nOk, whoop-tee-do, what do you do with that?  \r\n\r\nTry clearing the cache on one of those sites from anywhere in your file system with `drush @local.foo cc all`, or clear all the caches on every site in that file with `drush @local cc all`.  This is helpful out of the box even without multisite since you don't have to be in the drupal file tree to call drush and not get yelled at for \"not having a high enough bootstrap level\", but this becomes a major time saver in multisite, since the alternative would be `cd`ing around constantly to effect commands from different directories in `sites/*`.\r\n\r\nNice and simple.  Ready to kick it up a notch?\r\n\r\n#### Remote servers\r\n\r\nLet's run drush commands on a remote server without having to log in!\r\n\r\n~~~php\r\n<?php\r\n\r\n// how about we put this code into\r\n// dev.aliases.drushrc.php\r\n\r\n$aliases['foo'] = array(\r\n  'root'  => '/var/www/path/to/docroot',\r\n  'uri'   => 'dev.foobar.com',\r\n  'remote-host' => 'devbox.example.com',\r\n  'remote-user' => 'ssh_username'\r\n);\r\n\r\n$aliases['bar'] = array(\r\n  'root'  => '/var/www/path/to/docroot',\r\n  'uri'   => 'dev.example.com',\r\n  'remote-host' => 'devbox.example.com',\r\n  'remote-user' => 'ssh_username'\r\n);\r\n~~~\r\n\r\nThis would grow your list of aliases thusly --\r\n\r\n~~~shell\r\n$ drush sa\r\n\r\n@none\r\n@local\r\n@local.foo\r\n@local.bar\r\n@local.ibd\r\n@dev\r\n@dev.foo\r\n@dev.bar\r\n\r\n~~~\r\n\r\n...and would let you run any old Drush command you want without having to even be bothered with logging in to that server!\r\n\r\n[Lots more examples and info out there](https://www.google.com/search?q=drush%20aliases&rct=j), but this should get you started.", slug: "intermediate-drush-hacking-drush-aliases", summary: "", previous_id: nil, published: true, pub_date: "2015-07-16 19:21:00"},
  {title: "Setting up Elasticsearch on EC2", body: "Yeah, the pricing on the new AWS ES service is too high for you too, huh?  Well just using their service is a heck of a lot easier and possibly cheaper in dev time than trying to set it up yourself.  Consider that.  But possibly together we can make it over the hump.  \r\n\r\nThese are the bits that I was stuck on.\r\n\r\n---\r\n\r\n*Put all your nodes in the same security group*\r\n\r\nI have a group for all my EC2 instances that has the appropriate ports opened up.\r\n\r\n", slug: "setting-up-elasticsearch-on-ec2", summary: "", previous_id: nil, published: false, pub_date: "2015-10-28 15:45:00"},
  {title: "Pruning the Ego", body: "I was thinking yesterday for some reason.\r\n\r\nI was thinking about how much more inspired I felt to write to nobody/everybody this time last year. I was remembering how it felt effortless to expound upon the music business and software as if I had anything of worth to say. Interestingly, I think I did. Interestingly, now that I ostensibly know a lot more what I’m talking about I feel a lot more reluctant to blather about it. Less confident. Why is that?\r\n\r\nI think it has a lot to do with not making my living on a stage anymore. Getting up in front of people and doing a confident, creative thing for a living has a lot of side effects that are good and bad. Playing music was a fairly easy skill for me to pick up, and gave me much needed confidence in my teens that I might actually be a talented individual. It helped me to cast off some of the negative side effects of non-jockdom in high school. It gave me a very clear and immediate feedback mechanism as to whether or not I was doing a good job. This feedback is kind of like fertilizer for the ego. Fertilizer can obviously help plants grow stronger than they ordinarily would, but if you don’t use care in the feeding it can take over the whole side of your yard, just as letting the ego grow unchecked can lead to a lot more serious problems (and seemingly uncontrollable side effects).\r\n\r\nI think this experience thus far has been a -little- lot like taking the pruning shears to my ego. It kinda sucks because I feel a -little- lot less productive and open right now, but I think that it’s going to be a good thing for my long term spiritual health. Besides, I’m actually doing a hell of a lot more than I ever have before. I just doesn’t feel that way because there’s no crowd cheering when I do something halfway right. Strange, mostly because I disagreed with my shrink when he said something like this to me a few months ago. I didn’t consider myself the attention craving type, which has turned out to be not-the-case.\r\n\r\nWhen you prune back that bush, it looks a little ugly at first.", slug: "pruning-the-ego", summary: "", previous_id: nil, published: true, pub_date: "2010-07-16 11:50:00"},
  {title: "Drupal -- too big to fail?", body: "I'm sorry, but if there's one thing I love doing, it's taking Drupal down a peg.\r\n\r\n---\r\n\r\nI'm currently investigating doing some real time push notification work on my company's sites to make them more buzzword compliant.  This is great because it finally gives me a bona fide excuse to dig into a tech that I've been wanting to find a nice small use case for for a long time - [Nodejs](http://nodejs.org/).  We could easily outsource this piece to something like [Pusher](http://pusher.com/), but we outsource a lot of pieces of our architecture, and with each piece comes a little accrual of technical debt.  We might be able to skate by without ever having to pay it off, but we've just recently gone through a large exercise with Exact Target, our email service provider, that was vastly less than smooth.  So buy in to investigate the merits of keeping it in house is what I got.\r\n\r\nNow real time notifications isn't exactly setting up a Wordpress blog, but it's also a pretty well solved problem in this day and age, and the one use case where Node just absolutely earns its bread, so we're looking into Websockets and tying into some simple events in the Drupal stack.  I was just thinking about the presentation I went to at DrupalCampNJ a couple years ago by the author of the Nodejs module.  His was mainly a plumbing job to expose some of Drupal's hook lifecycle to the Node event loop, and may very well end up being something we leverage, but this phrase popped in my head.\r\n\r\n**The last thing on Earth I want to do it to couple more shit into Drupal**.  What I want to do is to break Drupal into little pieces, but it just keeps getting bigger and bigger.  Not unlike how Bear Stearns and Wachovia got absorbed into larger banks that then became even larger banks, Drupal is *too big to fail*.  I think we're in the twilight of the monolithic CMS age, but plenty of folks are betting that we aren't.  I suspect we'll all have jobs one way or another, but something is just fundamentally unsound about the approach with D8.  To me.  I am a terrible programmer by the way, vastly inferior to all core Drupal devs, lower than dirt.  Fair disclosure.  ", slug: "drupal-too-big-to-fail", summary: "", previous_id: nil, published: false, pub_date: "2014-01-27 21:55:00"},
  {title: "I haz hacks", body: "I've got this relatively old Hitachi plasma TV that has been slowly going down hill for years.\r\n\r\nIt's been doing this thing where if you turn it off, you can't turn it back on without letting it sit there for sometimes a very long time.  I can't find the exact thread at the moment, but I found it - the one where the guy describes the exact problem I'm having, the solution, and the link to the part # on DigiKey.  So I ordered it up.\r\n\r\nI thought the bigger boys would get a kick out of it, so fired up the soldering iron last night and fixed a 4 year old problem with a $1500 TV in about 20 minutes with a $4 part.\r\n\r\n![](/uploads/image/image/48/full_photo_1.JPG)\r\n\r\n![](/uploads/image/image/49/full_photo_3.JPG)\r\n\r\nThe board in question.  The capacitor on the bottom left is the bad guy.  You can really see the top bulging out in this one.\r\n\r\n![](/uploads/image/image/50/full_photo_4.JPG)\r\n\r\nI guess this part has something to do with the TV coming out of standby, and when that cap starts to go it doesn't have the power!\r\n\r\nThe lesson here is that when you're broke, you learn these things.", slug: "i-haz-hacks", summary: "", previous_id: nil, published: true, pub_date: "2014-01-29 20:20:23"},
  {title: "Just in case.", body: "I know you know this already, but can we keep this off the Earthboard until I figure out what this is going to be about?  I'm self conscious enough already.  Danke...", slug: "just-in-case", summary: "I know you know this already, but can we keep this off the Earthboard until I figure out what this is going to be about?  I'm self conscious enough already.  Danke...", previous_id: nil, published: true, pub_date: "2009-02-25 01:03:32"},
  {title: "Band meetings.", body: "Generally suck.  You want to know what happens when 6 musicians get together to discuss running their business?  Not much, usually...", slug: "band-meetings", summary: "Generally suck.  You want to know what happens when 6 musicians get together to discuss running their business?  Not much, usually...", previous_id: nil, published: true, pub_date: "2009-02-25 16:32:29"},
  {title: "holyCrappoli.", body: "<a href=\"http://280atlas.com/\">http://280atlas.com/</a>\r\n\r\nIt's only going to get easier to build software.  Brilliant.", slug: "holy-crappoli", summary: "<a href=\"http://280atlas.com/\">http://280atlas.com/</a><div><br /></div><div>It's only going to get easier to build software.  Brilliant.</div>", previous_id: nil, published: true, pub_date: "2009-03-04 17:13:05"},
  {title: "Big Sky Big Grass", body: "I totally forgot to take any pics of the shows, but I got some good mountain shots.\r\n\r\n![Toward the base](/uploads/image/image/57/full_IMG_0729.JPG)\r\n\r\n![Bottom of the tram](/uploads/image/image/58/full_IMG_0734.jpg)\r\n\r\nBottom of the tram.  Yes, I skied that shit.\r\n\r\n![Top of the tram](/uploads/image/image/59/full_IMG_0737.JPG)\r\n\r\nWaiting for Thorn to come up the next tram.\r\n\r\n![](/uploads/image/image/60/full_IMG_0731.JPG)\r\n\r\n![](/uploads/image/image/61/full_IMG_0733.JPG)", slug: "big-sky-big-grass", summary: "I totally forgot to take any pics of the shows, but I got some good mountain shots.", previous_id: nil, published: true, pub_date: "2014-02-11 17:04:51"},
  {title: "Brain Dump - Drupal and Fastly", body: "#### Prelude\r\n\r\nFastly is a CDN (content deliver network).  A CDN makes your site faster by acting as a caching layer between the world wide web and your webserver.  It does this by having a globally distributed network of servers and by using some DNS trickery to make sure that when someone puts in the address of your website they're actually requesting that page from the nearest server in that network.  \r\n\r\n~~~\r\n$ host www.ecnmag.com\r\nwww.ecnmag.com is an alias for global.prod.fastly.net.\r\nglobal.prod.fastly.net is an alias for global-ssl.fastly.net.\r\nglobal-ssl.fastly.net is an alias for fallback.global-ssl.fastly.net.\r\nfallback.global-ssl.fastly.net has address 23.235.39.184\r\nfallback.global-ssl.fastly.net has address 199.27.76.185\r\n~~~\r\n\r\nIf they don't have a copy of the requested page, they'll get it from your webserver and save it for the next time.  Next time, they served the \"cached version\" which is way faster for your users and lightens the load on your webserver (since the request never even makes it to your webserver).  [Excellent writeup here](https://docs.fastly.com/guides/how-fastly-services-work/intro-to-caching-and-cdns).\r\n\r\nThere are many different CDN vendors out there - Akamai being the oldest and most expensive that you may have heard of.  A new entrant into the market is a company called [Fastly](http://www.fastly.com/).  Fastly has decided on using Varnish as the core of their system.  They have some heavyweight Varnish talent on the team and have added a few extremely cool features to \"vanilla\" Varnish that I'll get to in a moment.\r\n\r\nFastly's being built on top of Varnish is cool, mainly because every CDN out there has some sort of configuration language and to throw your hat in with any of them is also to throw your hat in with their particular configuration language.  Varnish has a well known config format called VCL ([Varnish configuration language](https://www.varnish-cache.org/docs/3.0/reference/vcl.html)) which, on top of having plenty of documentation and users out there already, is also portable to other installations of Varnish so that learning it is time well spent.  This is the killer Fastly feature that first drew me in.  \r\n\r\n---\r\n\r\n(you can skip this - backstory, not technical)\r\n\r\nPrior to using the CDN as our front line to the rest of the internet, we'd been on a traditional \"[n-tier](https://en.wikipedia.org/wiki/Multitier_architecture#Web_development_usage)\" web setup.  This meant that any request to one of our sites from anywhere in the world would have to travel to a single point - our load balancer in Ashburn, Virginia in this case - and then travel all the way back to wherever.  In addition to this obvious global networking performance suck, we use a managed hosting vendor, so they actually own and control our load balancer.  Any changes that we'd want to have made to our VCL - the front line of defense against the WWW - would have to go through a support-ticket-and-review process.  This was a bottleneck in the event of DDos situations, or any change to our caching setup for any reason. \r\n\r\nTaking control of our caching front line was a neccessary step.  This became the second killer Fastly feature once we started piloting a few of our sites on Fastly.\r\n\r\n---\r\n\r\nThe killer-est killer feature of all has only just become clear to me.  Fastly makes use of a feature called \"Surrogate Keys\" to improve the typical time-based expiration strategy that we'd been using for years now.  They have a wonderful pair of blog posts on the topic [here](http://www.fastly.com/blog/surrogate-keys-part-1/) and [here](http://www.fastly.com/blog/surrogate-keys-part-2/).  \r\n\r\nThe way that Varnish works is basically a big, fast key-value store.  How keys are generated and subsequently looked up, as well as how their values are stored are all subject to alteration by VCL, so you have a wonderful amount of control over the default methodology.  By default it's essentially URLs as keys, and server responses as values, and this will get you pretty far down the line, but where you bump into the limits is as soon as you start pondering that each response has but one key that references it.  Conversely, each key references only one object.  _By default..._\r\n\r\nReal life example - I work for a publishing company.  Our websites are not super complicated IA-wise.  We have pieces of content and listing pages of that content, organized mostly by some sort of topic.  A piece of content can have any number of topics attached to it, and that piece of content (heretofore referred to as a \"node\") should show up on the listing pages for any one of those terms.\r\n\r\nOut of the box, Fastly/Drupal works really well for individual nodes.  Drupal has a module for Fastly that communicates with their API to purge content when it's updated, so if an editor changes something on the node they won't have to wait at all for their changes to be reflected to unauthenticated users.  The same is not true for listing pages.  Since these pages are collections of content and have no deeper awareness of the individual members of the collection, they function on a typical time-based expiration strategy.\r\n\r\nMy strategy for the months since we launched this across all of our sites has been to set TTLs (time to live, basically the length of time something will be cached) as high as I can until an editor complains that content isn't showing up where they want it to.  I recently had an editor start riding me about this, so lowered the TTLs to values so low that I knew we weren't getting much benefit of even having caching in the first place.  I'd known about this Surrogate Key feature and decided to start having a deeper look.\r\n\r\n---\r\n\r\n![](/uploads/image/image/64/full_holygrail.jpg)\r\n\r\nThe ideal caching scenario would have not only the node purged when editors updated it, but to have listing pages purge when a piece of content is published that should show up on that listing.  This is where Surrogate Keys come into play.  The Surrogate-Key HTTP header is a \"space delimited collection of cache keys that pertain to an object in the cache\".  If a purge request is sent to Fastly's API to purge \"test-key\", anything with \"test-key\" in the Surrogate-Key header should fall out of cache and be regenerated.\r\n\r\nIn essence, what this means is that you can associate an arbitrary key with more than one object in the cache.  You could tag anything on the route \"api/mobile\" with a surrogate-key \"mobile\" and when you want to purge your mobile endpoints, purge them all with one call rather than having to loop through every endpoint individually.  On those topic listing pages you could use the topic or topic ID as a surrogate-key, and then any time a piece of content with that topic is added or updated, you can send a purge to that topic ID and have that listing page dropped.  _And only that listing page dropped_.\r\n\r\n~~~php\r\n// the basic algorithm, NOT functional Drupal code\r\n\r\nif ($listing_page->type == \"topic\") {\r\n    $keys = [];\r\n    \r\n    // Topics can have children, so fetch them.\r\n    // pretend this returns a perfect array of topic IDs\r\n    $topics = get_term_children($listing_page->topic);\r\n    // Push the parent topic into the array as well.\r\n    $topics[] = $listing_page->topic;\r\n    \r\n    foreach($topics as $topic) {\r\n        $keys[] = $topic;\r\n    }\r\n    \r\n    $key = implode(\" \", $keys);\r\n    add_http_header('Surrogate-Key', $key);\r\n}\r\n~~~\r\n\r\nThis results in a topic listing page getting a header like this - \r\n\r\n~~~\r\n# the parent topic ID as well as any child topic IDs\r\nSurrogate-Key: 3979 3980 3779\r\n~~~\r\n\r\nThen, upon the update or creation of a node you do something like this -\r\n\r\n~~~php\r\n// this would be something like hook_node_insert if you're a Drupalist\r\nfunction example_node_save_subscriber($node) {\r\n    $fastly = new Fastly(FASTLY_SERVICE_ID, API_KEY);\r\n    foreach($node->topics as $topic_id) {\r\n        $fastly->purgeKey($topic_id);\r\n    }\r\n}\r\n~~~\r\n\r\nThis fires off a Fastly API call for each topic on that node that would cause anything with that surrogate key, aka topic ID, to be purged.  This would be any topic listing page with this topic ID on it. Obviously if there are 500 topics on any piece of content you'll probably want to move this to a background job so you don't kill something, but you get the idea.\r\n\r\n---\r\n\r\nThis is sort of like chasing the holy grail of caching.  In theory this means that you are turning the caching TTLs up to maximum and only expiring something when it actually needs to be expired based on user action and intent, not based on some arbitrary time that I decide on based on my lust for having everything as fast as possible.  The marvelous side effect of this is that (again in theory) everything should load even faster since there's almost no superfluous generation of pages at all.\r\n\r\nI just released the code on Friday morning, and the editor who was previously riding me about this topic had only positive feedback for me, meaning - so far, so good.\r\n\r\n---\r\n\r\nFYI - the holy grail actually looks more like this -\r\n![](/uploads/image/image/65/medium_landscape_Screen_Shot_2015-02-06_at_10.47.36_AM.png)", slug: "brain-dump-drupal-and-fastly", summary: "", previous_id: nil, published: true, pub_date: "2015-02-02 17:33:00"},
  {title: "SaaS.", body: "Ever heard of it?  It stands for Software as a Service, and it's a little sector of the software/tech business that everyone is keeping an eye on right now.  One of the leading vendors of this service right now is a company called <a href=\"http://salesforce.com\">SalesForce.com</a>.  My brother in law is actually their director of recruiting for the midwest region.  What SaaS does is remove the need to buy software for your business.  It moves the important stuff to the \"cloud\", which is another name for the internet, and charges a monthly fee for the service.  It's the same concept as Gmail, except that enterprise software is big, big business.  Software companies don't just make a bundle when they sell it, they make a bigger bundle from selling the support contracts that every business inevitably needs to keep their company moving along.\r\n\r\nSo, SaaS removes the expense of buying, and instead rents you the software, along with the support, for however long you want it.  I'm not in the market right now, so I don't know how long the contracts last, but the point is that companies probably won't continue to buy enterprise software if this model works out like SalesForce.com hopes it will.  So far it's working like gangbusters.  They're projecting about $1.3B in revenue for 2010.\r\n\r\nThe correlating service in the music business would be something like Napster, I guess.  You pay a monthly fee and you get access to their whole database of music.  Services like these haven't taken off for crap, mostly because iTunes already owns the market and it's still just too easy to rip music off for free.  iTunes has proven such a success because they really do make it super easy to get what you want, the prices are reasonable, and they don't even insist on that DRM crap anymore (which was only there in the first place because the majors insisted on it).\r\n\r\nWhat if a band with a pre-established fanbase wanted to try this out on their own?  What if there were very regularly updated music, video, whatever on a site dedicated to the band, and the only place you could get that stuff was from that website?  What if it were super simple for anyone to use, and super affordable for anyone to join?  In other words, what if it were worth it?\r\n\r\nWould people try it?\r\n\r\nWould bands try it?\r\n\r\nIf the other option is to put out another CD that you can only buy at the merch table, or maybe online somewhere and even then only if you're already looking for it, I think this could be a way forward for a really motivated band.", slug: "saas", summary: "Ever heard of it?  It stands for Software as a Service, and it's a little sector of the software/tech business that everyone is keeping an eye on right now.  One of the leading vendors of this service right now is a company called <a href=\"http://salesforce.com\">SalesForce.com</a>.  My brother in law is actually their director of recruiting for the midwest region.  What SaaS does is remove the need to buy software for your business.  It moves the important stuff to the \"cloud\", which is another name for the internet, and charges a monthly fee for the service.", previous_id: nil, published: true, pub_date: "2009-02-27 23:40:43"},
  {title: "Building a drop down menu from scratch", body: "Dropdown menus may seem like something that falls under the \"solved problem\" category, but they can be surprisingly tricky.  Tutorials that you find online will usually walk you through a very simple example that assumes markup that you never have.  This will not be that.  We're going to talk about the theory behind building a drop down so that you can better reason your way through the mess of markup that you're given.  \r\n\r\nIf you're working with Drupal and your requirements are outside the scope of what [Nice Menus](https://drupal.org/project/nice_menus) can give you (which happens as soon as you hear the word \"responsive\"), this tutorial is for you.\r\n\r\n**Be advised that some parent themes do not render the submenus even if you set the parents to \"expanded\" in the menu admin.  I'm not sure what the logic is for that, but it's a feature you should be aware of in some base themes.**\r\n\r\n---\r\n\r\n#### Beginning\r\n\r\nYour menu markup is going to look something like this --\r\n\r\n~~~html\r\n<ul>\r\n  <li>Item 1</li>\r\n  <li>Item 2</li>\r\n  <li>Item 3\r\n    <ul>\r\n      <li>Sub-item 1</li>\r\n      <li>Sub-item 2</li>\r\n      <li>Sub-item 3</li>\r\n    </ul>\r\n  </li>\r\n  <li>Last item</li>\r\n</ul>\r\n~~~\r\n\r\nOut of the box that'll render something like this\r\n\r\n- Item 1\r\n- Item 2\r\n- Item 3\r\n  - Sub-item 1\r\n  - Sub-item 2\r\n  - Sub-item 3\r\n- Last item\r\n\r\nIf you are working with Drupal, you're going to have to dig through a lot of layers of wrapper divs, and there will be a lot more classes added to each item, but the general structure is the same.  One early gotcha is that all the submenu `ul`s are also given a class of `.menu`, which is annoying at best.\r\n\r\n~~~html\r\n<!-- sample Drupal markup -->\r\n<ul class=\"menu\">\r\n  <li class=\"first leaf\">Item 1</li>\r\n  <li class=\"leaf\">Item 2</li>\r\n  <li class=\"expanded\">Item 3\r\n    <ul class=\"menu\">\r\n      <li class=\"leaf\">Sub-item 1</li>\r\n      <li class=\"leaf\">Sub-item 2</li>\r\n      <li class=\"leaf\">Sub-item 3</li>\r\n    </ul>\r\n  </li>\r\n  <li class=\"leaf last\">Last item</li>\r\n</ul>\r\n~~~\r\n\r\nIgnoring all that, the general idea is to hide the submenu ul, get all the top level items to line up next to each other, and show the submenus when you hover over a parent item.  How?\r\n\r\n~~~css\r\nul {\r\n  float: left;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\nul li {\r\n  position: relative;\r\n  float: left;\r\n  list-style: none;\r\n  list-style-image: none; /* DRUPAL!! */\r\n  padding: .5em 1em;\r\n  margin: 0;\r\n}\r\nul li ul {\r\n  display: none;\r\n  position: absolute;\r\n  width: 10em;\r\n  left: 0;\r\n  top: 1em;\r\n}\r\n\r\nul li:hover ul {\r\n  display: block;\r\n}\r\n~~~\r\n\r\n[JSBin here](http://jsbin.com/cemuk/5/edit?html,css,output)\r\n\r\n#### Play by play\r\n\r\nI'll assume that the left floating stuff is understandable.  The real action with a drop down happens with the `display:none; position:absolute` set on the submenus and the `position:relative` set on the parent `<li>`s.  `position: relative` means nothing much to the item on which it's set (unless you start adding positioning rules to it as well).  It's importance here is because any child elements/nodes that are absolutely positioned inside of it will now be positioned as if they exist inside that element.  Without `position:relative` on that item, the absolutely positioned elements inside of it will position themselves relative to the body element, or the first containing ancestor that is positioned relatively.  [See here for an example](http://jsbin.com/cemuk/2/edit?html,css,output).  \r\n  \r\nAs an aside, these two ALA articles are required reading if this part makes your eyes cross.\r\n\r\n- [CSS Positioning 101](http://alistapart.com/article/css-positioning-101)\r\n- [CSS Floats 101](http://alistapart.com/article/css-floats-101)\r\n\r\nThe rest of this is hopefully understandable.  `display: none` on the submenu hides it from view, until you hover over it's parent `<li>`, at which point it gets the display property of `block`, which makes it show up in your browser.  Since it's absolutely positioned, it'll need a width specified.  You'll need something narrow enough to prevent short item from floating next to each other, but wide enough to keep longer items from breaking to too many lines.\r\n\r\n#### On Superfish, Nice Menus, javascript, etc\r\n\r\nPresumably, you might have heard of Superfish.  It was the defacto JS solution to drop downs for many years, most of them in IE6/pre-jQuery era.  IE6 has a (ahem) \"feature\" where only `<a>` elements properly respond to the `:hover` pseudo-selector.  That meant for a great many years that the only real solution was to patch this behavior with javascript.  Fortunately, you only have to deal with this issue now if you still support IE6.  \r\n\r\nThe other, definitely legitimate issue, is that using CSS only means that the instant you leave the zone of the parent item (don't forget the the parent `<li>` is wrapped around the entire submenu `<ul>`), your submenu will disappear.  This means either judicious placement of your submenu, or utilizing some javascript to make your menu behave a bit more smoothly.  Both are good solutions, imo.\r\n\r\n[Here's an updated JSBin](http://jsbin.com/cemuk/7/edit?html,js,output).  Note in the collapsed CSS column I've commented out this part --\r\n\r\n~~~css\r\nul li:hover ul {\r\n  /*display: block;*/\r\n}\r\n~~~\r\n\r\nThis means we'll be hiding and showing the dropdown with javascript (jQuery in this example).  I've added a class of `expanded` to the parent `<li>` to make selector targeting easier.  Here's the full javascript -\r\n\r\n~~~js\r\njQuery(function($){\r\n  var timerOut;\r\n  \r\n  $('.expanded').on('mouseover', function(){\r\n    clearTimeout(timerOut);\r\n    var self = this;\r\n    setTimeout(function(){\r\n      $('ul', self).show();\r\n    }, 300);\r\n    \r\n  }).on('mouseout', function() {\r\n    var self = this;\r\n    timerOut = setTimeout(function() {\r\n      $('ul', self).hide();\r\n    }, 300);\r\n    \r\n  });\r\n});\r\n~~~\r\n\r\nSo, [setTimeout returns a numeric timer id](https://developer.mozilla.org/en-US/docs/Web/API/Window.setTimeout) that you can use to cancel out the setTimeout callback if you need to.  Since we're going to need access to one event handler's timeout in another event handler, we're going to declare the variable for the timerId outside the scope of both of them - `var timerOut` in the outer function.  \r\n\r\nAny time you use [jQuery `on()`](http://api.jquery.com/on/), the element that is triggering the handler is `this` inside the callback function (the function after 'mouseover').  We'll assign that to `var self;` since we're going to enter another context once we enter the `setTimeout()` callback.  By the way, all of this gobbledygook about scope and `this` is THE trick to Javascript.  Understand function scope in Javascript and you'll be highly paid.  I'm still getting there myself.\r\n\r\nSo anyway, discounting that bit, it's very simple.  When you mouseover the parent, show the submenu.  When you mouseout of the parent, hide the submenu.  All we're doing is adding a delay to those actions firing.  The trick is cancelling that `hide()` call if the user decides within 300ms that they didn't mean to wander out of the submenu.  That's where `clearTimout()` works it's magic in the mouseover function.  If there is a mouseout timer still ticking, it's ID will be assigned to `timerOut` and it'll get cleared.  If it's already hidden the submenu, no harm and no foul.  \r\n\r\nNote that if `$('ul', self)` looks weird, what that means is the `<ul>` item in the context of `self` is what we're trying to find.  Omit the context and it implicitly becomes the whole window.  Add the context and is almost the same as saying `$('li.expanded ul')`.  I say \"almost\" because the second, longer example will actually grab *any* `ul` inside of *any* `li.expanded`, which is not what you want.  That's why specifying the context not only shortens your code and improves performance since the whole DOM doesn't need to be searched each time, but also scopes your selector dynamically based on which element triggered the handler.  I know this is total babble, and I'm sorry.\r\n\r\n#### Final gotcha\r\n\r\nDrupal's version of jQuery is so dated that `on()` isn't available.  If you have the option of jQuery_updating to 1.7, you can enjoy the modern era.  If your site breaks, as is often the case, and you're stuck with < 1.7, you'll need to use [`bind()`](http://api.jquery.com/bind/) instead.  It works more or less the same in these use cases, but being [familiar with event delegation](http://code.tutsplus.com/tutorials/quick-tip-javascript-event-delegation-in-4-minutes--net-8961) is another JS Jedi trick, and the one promoted by modern Javascript authors.\r\n\r\n#### In closing\r\n\r\nThis got longer than I wanted, but it's not the easiest thing in the world to build the ubiquitous drop down menu.  My first one took me at least a week, and I think I eventually stumbled on Nice Menus to actually get the job done.  Luckily, modern browser environments are much more predictable than they used to be, so knowing how to fish on your own is much easier these days, and the taste of a fish you caught on your own is always superior to something bought at the store, right?\r\n\r\nThis post touched on the word \"responsive\" at the top, and I'll follow up with how to work with that.  If you've come this far, you've set yourself up nicely for an easier mobile menu job without having to fight against a bunch of other people's code.", slug: "building-a-drop-down-menu-from-scratch", summary: "Building a drop down menu from scratch, without superfish, without nice menus, without any Drupal modules holding your hand.", previous_id: nil, published: true, pub_date: "2014-02-13 15:25:43"},
  {title: "AIG.", body: "<a href=\"http://http://www.nytimes.com/2009/02/28/business/28nocera.html?pagewanted=1&amp;_r=1&amp;partner=rss&amp;emc=rss\">This</a> is a nice little explanation of how AIG got into the mess it's in, if you're interested in that kind of thing...", slug: "aig", summary: "<a href=\"http://http://www.nytimes.com/2009/02/28/business/28nocera.html?pagewanted=1&amp;_r=1&amp;partner=rss&amp;emc=rss\">This</a> is a nice little explanation of how AIG got into the mess it's in, if you're interested in that kind of thing...", previous_id: nil, published: true, pub_date: "2009-02-28 15:03:32"},
  {title: "Getting up to speed with Rails 4 \"russian doll\" caching and Redis", body: "### Russian Doll caching\r\n\r\nIt's a well branded name for something that makes total sense after reading one blog post.  [The second half of this blog post](https://signalvnoise.com/posts/3112-how-basecamp-next-got-to-be-so-damn-fast-without-using-much-client-side-ui) will actually get you pretty much there.\r\n\r\nIf you're coming from a PHP/Drupal background like me, you might be surprised to find out that the database is *not* the bottleneck in Rails-land.  Whereas on your typical Drupal page you might have anywhere from 50 to 1000 database queries being run, you'll be hard pressed to find a Rails app that comes anywhere near that number of DB calls being made.  The Hobo companion, even on the front page (the heaviest page in terms of data so far) only runs about 8-10 queries.\r\n\r\nWhat takes so long in Ruby land is view rendering.\r\n\r\nI've witnessed this first hand on my job's Redmine install.  I'd have thought that what was taking so long was the database, but what actually takes 95% of the time on each page load is the view rendering.  I guess the Basecamp folks noticed the same things, so they went to work on how to speed that up.\r\n\r\n#### Fragment caching\r\n\r\nThere's always a blurb in evey article about Rails caching that has to do with \"fragment caching\".  Basically, you cache little bits of each page as they're rendered, and the next page requests pull the rendered HTML from the cache to reassemble your page.  It's simple, except that it's not.  You've heard the old adage about the 2 hardest problems in computer science - cache invalidation is the PITA in this one.  That basically means making sure (somehow) that you're not serving stale fragments when something has been updated in the meantime.  I'm not sure what the old scheme was for taking care of this, but it wasn't friendly or intuitive.\r\n\r\n#### Fragment caching ++\r\n\r\nThe solution that they came up with involved making a digest of the actual object being rendered be the cache key.\r\n\r\n~~~erb\r\n<div id=\"archive\" class=\"row\">\r\n  <h2 class=\"large-12 column\">All blog posts</h2>\r\n  <% cache [ \"archive\", @posts_by_year.first.first ] do %>\r\n    <% @posts_by_year.each do |year| %>\r\n      <% cache [ \"archive\", year[1].size ] do %>\r\n        <h3 id=\"<%= year[0] %>\"><%= year[0] %></h3>\r\n        <% year[1].each do |post| %>\r\n          <% cache [ \"archive\", post ] do %>\r\n          <div class=\"post\">\r\n            <h4><%= link_to post.title, post_date_path_helper(post) %><small> - <%= post.created_at.strftime('%D') %></small></h4>\r\n          </div>\r\n          <% end %>\r\n        <% end %>\r\n      <% end %>\r\n    <% end %>\r\n  <% end %>\r\n</div>\r\n~~~\r\n\r\nThis is the view that renders [my blog's index page](http://www.ignoredbydinosaurs.com/archive).  I'm still getting the hang of how to name these cache fragments, but the idea is that you recursively wrap each rendered fragment on the page.  If one item gets updated, the digest for that item changes, and the cache key for it changes as well.  The next time the page is rendered, the value won't exist in the cache for that key (because the key has changed based on the digest of the object).  It'll be stuck in the cache, and every fragment that wraps it will be invalidated as well.  They'll be re-rendered, but rather than having to re-render everything on the page from scratch, the other items that haven't changed will be pulled from the cache.  The vast majority of the page will not have changed, and will still be alive and well in the cache.  In this way, the whole page can be 95% cached and only the parts that change will have to go through the whole trip to re-render.\r\n\r\nIt does still call your database to get the objects for digesting, but as we've already discussed, this is a small cost comparitively.  Down the road there are solutions to this issue as well one your optimizations get to that point.\r\n\r\n### Cache store\r\n\r\nWhen I first started implementing caching on this site, I started off easy with Rack Cache.  It's a simple HTTP cache that causes the whole page to be stored with a TTL time on it.  The TTL is set in the controller with something like `expires_in 5.minutes, public: true`.  Once I started moving into the fragment caching business, I moved out of Rack Cache and into using memcached as the store.  It's easy to set up.  So easy I'll probably never write a post about it.  It just works.\r\n\r\nIt did, however, seem to take up a fair share of memory - as you'd expect from a memory cache store.  I already had Redis running for queuing background jobs via Sidekiq though, so it occurred to me over dishes that I should give that a try.  Turns out it's just as easy as memcached.  Just swap out `gem 'dalli'` in your Gemfile for `gem 'redis-rails'` and change `config.cache_store = :dalli_store` to `config.cache_store = :redis_store`.  It seriously doesn't get any easier.  Redis is a lot like memcached, except that it has some more advanced fatures that I might never use.  It also writes to disk every now and then so if you restart your box, Redis can keep the cache warm rather than losing everything it's stored.", slug: "getting-up-to-speed-with-rails-4-russian-doll-caching-and-redis", summary: "", previous_id: nil, published: true, pub_date: "2014-02-19 15:59:11"},
  {title: "Merging two Drupal sites together with Migrate Module", body: "_Notes from Mike Ryan, the Migrate guy, at the bottom. Make sure you read them before copying any of this code._\r\n\r\n---\r\n\r\nThe Migrate module has some of the best documentation I've ever seen in DrupalLand, but there are still just a couple of things that I've figured out over the last month that I wish had been clearly explained to me up front.  This is an attempt to explain those things to myself.\r\n\r\nClearly, you're going to be writing code to perform this migration. \r\n\r\n- There is a module - [migrate_d2d](https://www.drupal.org/project/migrate_d2d) - that is specifically for stuff like this.  It's aware of Drupal content types' basic schema, so it'll save you a LOT of SQL writing to join each nodes' fields on to the base table. \r\n- You'll write a class for each migration that you need to perform.\r\n- You'll need to write a separate class for each content type that you have.\r\n- You'll need to write classes for roles, users, files, and each taxonomy vocabulary that you have on the site.\r\n- You'll tell Drupal about these migrations by writing an implementation of `hook_cache_clear()` that'll \"register\" the migrations and make them show up in the GUI and in drush. This looks basically like this -- \r\n\r\n~~~php\r\n\r\n<?php\r\n\r\nfunction abm_migrate_flush_caches() {\r\n\r\n  $common_arguments = array(\r\n      'source_connection' => 'dfi', // the \"source\" database connection\r\n      // there's a syntax for this that basically mirrors the way that\r\n      // you set up database connections in settings.php\r\n      'source_version' => 7, // a tip to the migrate_d2d module as to which \r\n      // version of Drupal you're migrating from\r\n  );\r\n  \r\n  $arguments = array_merge($common_arguments, array(\r\n    'machine_name' => 'AbmRole',\r\n    'role_mappings' => array(\r\n      'administrator' => 'administrator',\r\n      'editorial staff' => 'editorial staff',\r\n      'pre-authorized' => 'pre-authorized',\r\n      'directory listee' => 'directory listee',\r\n      'directory listee - preapproval' => 'directory listee - preapproval',\r\n      'directory manager' => 'directory manager',\r\n      'web production' => 'web production'\r\n    ),\r\n  ));\r\n\r\n  Migration::registerMigration('AbmRoleMigration', $arguments['machine_name'],\r\n    $arguments);\r\n\r\n  $arguments = array_merge($common_arguments, array(\r\n    'machine_name' => 'AbmUser',\r\n    'role_migration' => 'AbmRole', // forms the relationship between this \r\n    // user migration and the role migration that already happened.\r\n    // This only works for a few specific, simple cases.\r\n    // Relating nodes with taxonomy items, for example, happens elsewhere.\r\n    // (in the actual migration class...)\r\n  ));\r\n\r\n  Migration::registerMigration('AbmUserMigration', $arguments['machine_name'],\r\n    $arguments);\r\n  \r\n  $arguments = array_merge($common_arguments, array(\r\n    'machine_name' => 'AbmProdCats', // when you run \"drush ms\", \r\n    // (migration-status) this is the name that shows up\r\n    'source_vocabulary' => 'product_categories', // yay machine names\r\n    'destination_vocabulary' => 'product_categories'\r\n  ));\r\n\r\n  Migration::registerMigration('AbmProdCatsMigration', $arguments['machine_name'],\r\n    $arguments);\r\n}\r\n  \r\n~~~\r\n\r\n- Registering the migration also creates a set of database tables for each migration, the most interesting of which is the `migrate_map_xxx`, where \"xxx\" is the `machine_name` of your migration, downcased.\r\n\r\n~~~sql\r\n\r\nmysql> show tables like 'migrate%';\r\n+------------------------------------+\r\n| Tables_in_for (migrate%)           |\r\n+------------------------------------+\r\n| migrate_field_mapping              |\r\n| migrate_group                      |\r\n| migrate_log                        |\r\n| migrate_map_abmadterms             |\r\n| migrate_map_abmappnotes            |\r\n| migrate_map_abmarticle             |\r\n| migrate_map_abmawardwinners        |\r\n| migrate_map_abmblogs               |\r\n| migrate_map_abmcompanyprofiles     |\r\n| migrate_map_abmdigitaleditions     |\r\n| migrate_map_abmevents              |\r\n| migrate_map_abmfiles               |\r\n| migrate_map_abmnews                |\r\n| migrate_map_abmpodcasts            |\r\n| migrate_map_abmprodcats            |\r\n| migrate_map_abmproductreleases     |\r\n| migrate_map_abmproducts            |\r\n| migrate_map_abmrole                |\r\n| migrate_map_abmtopics              |\r\n| migrate_map_abmuser                |\r\n| migrate_map_abmvideos              |\r\n| migrate_map_abmwebinars            |\r\n| migrate_map_abmwhitepapers         |\r\n| migrate_message_abmadterms         |\r\n| migrate_message_abmappnotes        |\r\n| migrate_message_abmarticle         |\r\n| migrate_message_abmawardwinners    |\r\n| migrate_message_abmblogs           |\r\n| migrate_message_abmcompanyprofiles |\r\n| migrate_message_abmdigitaleditions |\r\n| migrate_message_abmevents          |\r\n| migrate_message_abmfiles           |\r\n| migrate_message_abmnews            |\r\n| migrate_message_abmpodcasts        |\r\n| migrate_message_abmprodcats        |\r\n| migrate_message_abmproductreleases |\r\n| migrate_message_abmproducts        |\r\n| migrate_message_abmrole            |\r\n| migrate_message_abmtopics          |\r\n| migrate_message_abmuser            |\r\n| migrate_message_abmvideos          |\r\n| migrate_message_abmwebinars        |\r\n| migrate_message_abmwhitepapers     |\r\n| migrate_status                     |\r\n+------------------------------------+\r\n44 rows in set (0.00 sec)\r\n\r\nmysql> describe migrate_map_abmblogs;\r\n+-----------------+---------------------+------+-----+---------+-------+\r\n| Field           | Type                | Null | Key | Default | Extra |\r\n+-----------------+---------------------+------+-----+---------+-------+\r\n| sourceid1       | int(10) unsigned    | NO   | PRI | NULL    |       |\r\n| destid1         | int(10) unsigned    | YES  |     | NULL    |       |\r\n| needs_update    | tinyint(3) unsigned | NO   |     | 0       |       |\r\n| rollback_action | tinyint(3) unsigned | NO   |     | 0       |       |\r\n| last_imported   | int(10) unsigned    | NO   |     | 0       |       |\r\n| hash            | varchar(32)         | YES  |     | NULL    |       |\r\n+-----------------+---------------------+------+-----+---------+-------+\r\n6 rows in set (0.00 sec)\r\n\r\nmysql> describe migrate_message_abmblogs;\r\n+-----------+------------------+------+-----+---------+----------------+\r\n| Field     | Type             | Null | Key | Default | Extra          |\r\n+-----------+------------------+------+-----+---------+----------------+\r\n| msgid     | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\r\n| sourceid1 | int(10) unsigned | NO   | MUL | NULL    |                |\r\n| level     | int(10) unsigned | NO   |     | 1       |                |\r\n| message   | mediumtext       | NO   |     | NULL    |                |\r\n+-----------+------------------+------+-----+---------+----------------+\r\n4 rows in set (0.00 sec)\r\n\r\n~~~\r\n\r\n- Since Migrate is an OOP thing, you can write a parent class for a generic \"Node\" migration that all of the other specific content types can inherit from.  Most of the node migration classes that I wrote look like this, due to most of the fields being set up in the parent class --\r\n\r\n~~~php\r\n\r\n<?php\r\n\r\nclass AbmBlogsMigration extends AbmNodeMigration\r\n{\r\n    public function __construct(array $arguments)\r\n    {\r\n        parent::__construct($arguments);\r\n        $this->addSimpleMappings(['field_pipes_flag']); // this is the only \r\n        // blogs specific field that existed on this content type, all of the fields\r\n        // that are common among all content types are mapped in the parent class - \r\n        // AbmNodeMigration - in exactly the same manner.  Except for some that aren't...\r\n    }\r\n}\r\n\r\n~~~\r\n\r\n- Most fields in a Drupal to Drupal migration will come over easily with `Migration::addSimpleMappings()`, but some require a little more coddling.  These are often fields that represent a relationship to another entity - Taxonomy term references, other node references, etc.  These will require something like this --\r\n\r\n~~~php\r\n\r\n<?php\r\n\r\nabstract class AbmNodeMigration extends DrupalNode7Migration\r\n{\r\n    public function __construct(array $arguments)\r\n    {\r\n        parent::__construct($arguments);\r\n        \r\n        $this->addFieldMapping('field_taxonomy', 'field_taxonomy') // sets up the mapping\r\n          ->sourceMigration('AbmTopics'); // tells you which migration to reference.\r\n          // This makes it look to the migrate_map_xxx table to pull out the NEW \r\n          // destination primary keys.  Without this bit, it'll try to bring over the\r\n          // related entity IDs verbatim, which will either fail because there is no\r\n          // taxonomy term/node/whatever with that ID, or it'll just relate it to the\r\n          // wrong entity.  Either way, bad.  \r\n          \r\n        $this->addFieldMapping('field_taxonomy:source_type') // I wish I could tell you more \r\n          ->defaultValue('tid'); // about what this part means, but I just don't know yet.  \r\n          // All I know is that is the previous lines are not enough to make it work\r\n    }\r\n\r\n~~~\r\n\r\n\r\n- Speaking of that, prior to finally putting the pieces together about how related entities maintain that relationship, I did lots of clever coding to maintain the relationships between imported entities.  It's not that complicated, but I was manually looking into the `migrate_map_xxx` tables to pull destination_ids out.  This is obviously wrong abd felt wrong when I was doing it, but it didn't all click until chasing down vague error messages about \"field validation errors\" in later migrations.  It doesn't tell you what fields are in error, it just throws an Exception on these nodes and doesn't save them.  I finally ended up dumping `$errors` in `field_attach_validate()` and saw that it was always a related entity field that was erroring.  It was easy to figure out after that, but it took me several weeks of getting my head around the rest of it all to be able to get to that very simple point.\r\n- I missed all of that for so long because the user migration has this tidy little line about `'role_migation'` that establishes the relationship, so I thought it would/should be something along those lines.  I spent a long time in the module code tracing down default arguments and the like before finally just doing it the hard way.  This is wrong.\r\n- Oh, by the way, **USE THE LATEST VERSION OF ALL OF THESE MODULES**. Migrate finally released 2.6, years in the making apparently, a couple of weeks ago, as I was in the middle of all this.  I'd been using the previous stable, which is of course missing years of work, and solves almost all problems out of the box.\r\n- Here's another little gem regarding files, and making those relationships tie out --\r\n\r\n~~~php\r\n\r\n<?php\r\n\r\n// In AbmNodeMigration::__construct()\r\n\r\n   $this->addFieldMapping('field_image', 'field_image') // sets up the mapping\r\n       ->sourceMigration('AbmFiles');\r\n   $this->addFieldMapping('field_image:file_class') // but for some reason it doesn't \r\n       ->defaultValue('MigrateFileFid'); // work without this part.  The answer is\r\n       // here - https://www.drupal.org/node/1540106 - but I haven't had time to \r\n       // fully absorb that part yet. I glossed over this part of the documentation\r\n       // a dozen times because file_class seems like it'd be unrelated to what you're\r\n       // trying to do - relate nodes and files. file_class sounds like something\r\n       // CSS related.  Needless to say, it is not.\r\n\r\n~~~\r\n\r\nBeer shot - \r\n\r\n![](/uploads/image/image/62/full_2014-12-23_19.52.18.jpg)\r\n\r\n---\r\n\r\nA review from the guy himself --\r\n\r\n>The blog post looks like a good intro to migrate_d2d 2.0, but I'm afraid now it's a bit dated (as you point out towards the bottom).\r\n>\r\n>hook_flush_caches() hasn't been considered a good practice for a while (defining migrations in hook_migrate_api() and using drush migrate-register is preferred - https://www.drupal.org/node/1824884), but I see that migrate_d2d_example still does it - I'll need to update that before the imminent new release so people aren't misled.\r\n>\r\n>Setting the source_type to 'tid' is covered at https://www.drupal.org/node/1224042 - by default the incoming value for a term field is assumed to be the term name, when you're making use of a separate term migration via sourceMigration, the incoming value is a tid and you need to set the source_type so the field handler knows what to expect.\r\n>\r\n>The file_class is similar - normally the value coming in to the file field is assumed to be a URL, but when using a separate file migration and referencing it via sourceMigration it's a fid. The \"class\" in file_class is a PHP class - the name of any class implementing MigrateFileInterface can be used here.\r\n\r\nThanks Mike!", slug: "merging-two-drupal-sites-together-with-migrate-module", summary: "", previous_id: nil, published: true, pub_date: "2015-01-13 15:41:39"},
  {title: "twitterAndHope.", body: "So RRE finally signed up on Twitter, right about the same time I succumbed to my curiosity on the same subject.  In case you could tell by this blog, I'm completely fascinated by Web stuff like this.  I mean, what a stupid concept, right?  A micro-blog so that people can talk about what they're doing at that moment.  As if I need to know what Scotty Baron had for lunch today!  But wait...<br /><br />The tech media is positively foaming at the mouth over this thing.  Every marketing site I go to is praising it, every music business blog is blathering about how to use it, in 10 parts no less.  So what is going on over here?  I see this journalist over here mentioned that when the plane went down in the Hudson the first place he heard about it was on Twitter.  He cruises around to some of the blogs he follows and none of them mentioned it until much later (in journalism time).  Okay, so this could be a journalism tool.  Outblog the bloggers.  But wait...<br /><br />Part of what I personally find so thrilling about technology like this is the potential that it has to become, at it's furthest extension, a tool for shining a light on the kind of evil that can only take place in the shadows.  North Korean gulags, Egyptian or Saudi repression, Israeli actions against the Palistinians, Darfur, Kenya, Afghanistan, China, not to mention whatever the American gov't has been up to over the past hundred years in terms of shady foreign policy wherever.<br /><br />I firmly believe that world harmony is at hand, and that once everyone has a cell phone and access to Twitter (or something like it), evil will have nowhere left to hide.", slug: "twitter-and-hope", summary: "So RRE finally signed up on Twitter, right about the same time I succumbed to my curiosity on the same subject.  In case you could tell by this blog, I'm completely fascinated by Web stuff like this.  I mean, what a stupid concept, right?  A micro-blog so that people can talk about what they're doing at that moment.  As if I need to know what Scotty Baron had for lunch today!  But wait...<br />", previous_id: nil, published: true, pub_date: "2009-03-05 17:00:17"},
  {title: "theEnemy", body: "This cannot be allowed.  There is a definite whiff of opportunity <a href=\"http://feedproxy.google.com/~r/Techcrunch/~3/EELkxo88_yI/\">here</a>...", slug: "the-enemy", summary: "This cannot be allowed.  There is a definite whiff of opportunity <a href=\"http://feedproxy.google.com/~r/Techcrunch/~3/EELkxo88_yI/\">here</a>...", previous_id: nil, published: true, pub_date: "2009-03-08 22:08:45"},
  {title: "The absolute bare minimum you need to know on the command line", body: "GUIs change, but the command line is eternal.  Memorize these 5 commands and a long and happy life awaits.\r\n\r\n~~~\r\n\r\n$cd\r\nchange directory.  This is how you move \r\naround the file system.\r\n\r\n$ls\r\nList, or tell me what's in this directory.  This has a \r\nhuge list of useful modifying flags, such as -l (long, \r\ntell me the size, ownership, and permissions on each \r\nthing in here too), or -a (all, as in, show me hidden \r\ndotfiles as well)\r\n\r\n$mv\r\nMove, this is how you move something from here \r\nto there.  This is also how you rename something \r\neven if it's in the right place.\r\n\r\n$cp\r\nCopy. Add -r to make it recursive, else it \r\nwon't copy directories because it won't \r\ndescend into them.\r\n\r\n$pwd\r\nNot sure what this stands for off the top of \r\nmy head (something working directory), but this \r\nis how you get it to tell you where you are \r\nin the file system.\r\n\r\n~~~", slug: "the-absolute-bare-minimum-you-gotta-know-on-the-command-line", summary: "A pre-101 level primer on the command line interface.", previous_id: nil, published: true, pub_date: "2015-01-21 12:13:02"},
  {title: "introduction.", body: "When in the course of your bands business, it becomes necessary to cast off your old, crappy website and the confusing, unnavigable interface which you present to the world as your first impression, and to assume the powers of PHP, CSS, XML, RoR, and other technologies not yet invented in the pursuit of a highly compelling online experience, a more meaningful dialogue with your fanbase, and the glorious rewards of possibly higher merch sales, a decent respect to the opinions of webmasters everywhere requires that I should declare the causes which impel me to dream of a better way....", slug: "introduction", summary: "When in the course of your bands business, it becomes necessary to cast off your old, crappy website and the confusing, unnavigable interface which you present to the world as your first impression, and to assume the powers of PHP, CSS, XML, RoR, and other technologies not yet invented in the pursuit of a highly compelling online experience, a more meaningful dialogue with your fanbase, and the glorious rewards of possibly higher merch sales, a decent respect to the opinions of webmasters everywhere requires that I should declare the causes which impel me to dream of a better way....", previous_id: nil, published: true, pub_date: "2009-03-04 14:41:30"},
  {title: "ibD Manifesto", body: "Disclaimer(s) : I will me using the terms \"we\" and \"us\" and \"our\" to refer alternately to my band <a href=\"railroadearth.com\">Railroad Earth</a>, and to my colleagues in the jamband scene without differentiating every time which I'm talking about. You'll just have to figure it out. Hope it's not too confusing.\r\n\r\nThis began as an email to a Rails developer that I'd been conversing with. He brought up the Digg Trent Reznor interview. After the first bit my response became more like a blog post. So I'm posting.\r\n\r\n---\r\n\r\n<span class=\"drop_cap\">I</span> think the deal is that noone has come up with a solution that actually benefits the artist that the fans actually appreciate enough to pay for. Trent failed because everyone assumes he's already rich, so why bother. Plus he's trying to sell new music, which people just don't want to pay for anymore. Every record label is failing because nobody trusts record label executives and the stuff they're selling sucks anyway. It's scientifically designed to be disposable, so who's gonna pay for it? The only way forward is to start some kind of populist movement, but most semi-successful musicians just don't have the network or the wherewithal or the motivation or the ideas. I actually <a href=\"/2009/04/trent-reznor\">linked to that Trent interview</a> when it came out, because I do think he's way ahead of alot of other people that high up in the biz, but he's just trying to sell music with nothing else attached to it. Yeah, the iPhone app is cool, but it still feels kinda piecemeal to me, since he's basically working a brand that's already 20 years old and trying to adapt.\r\n\r\nWhere we're going to succeed is here : we aren't just selling music. We have a huge fanbase that is rabid about supporting us whenever they can and coming to as many shows as possible and spreading the word about us far and wide because we're where the party is. We're the ultimate grassroots marketing test for web 2.0. Even String Cheese (and their business model) came along before Facebook, etc. Our fans buy our T-shirts and our music because they were probably at the show and they want a piece of that, and if they weren't at the show, they want  it for the collection.  We draw more people to any given show in any given town than 9 out of 10 people you see on late night TV. But noone knows how to market us because we're older or we're not very good looking so therefore we don't fit into the nice little mold that is the only thing most people in the PR or record label end of the biz know. Therefore, the reason we do 1500 people in Denver (for instance) with virtually no press or airplay at all is word of mouth, because we're where the party is. After the first 3 pages of Tribes, I started to put some pieces together.\r\n\r\nHere's where I come in. I am not rich. I am not a label suit. I am not some manager trying to sell your band. I'm not some software geek. I'm just Grubb, the bass player from RRE that knows a lot people up and down and side to side in the jamband world. There is a huge amount of business going on here that hardly anyone pays any attention to unless it happens to be Bonnaroo weekend. As excited as the marketing world is about Twitter and Facebook, nobody over here really seems to get it. They do in a sense, but step number one, their websites - the first exposure to new fans for virtually all of us - look like shit, don't relay information, don't pull people in, don't look professional, don't give anyone a sense of who the band is or why they should be interested. I propose that if we, as a unit, started getting a lot more active about using the means available to us, and applying some dead-simple marketing initiative to our individual and collective web presence, we could start that populist movement this summer and put the last nails in the coffin of the <a href=\"http://www.wmg.com/\">crap-spewing</a>, <a href=\"http://www.riaa.com/\">download-suing</a> <a href=\"http://www.rollingstone.com/\">dinosaur</a> that is the gasping, wheezing remnants of the major label/print media system.</span>\r\n\r\nThis is where the idea for the website/mobile app framework came from. It's not complicated or original. There are competitors already out there. See <a href=\"http://www.kyte.com/platform/pg/kyte_iphone_apps_framework\">kyte.com</a> for the iPhone app framework, but they don't get it either. Their product is kinda ugly to my eye, and they're apparently only concerned with selling it to labels for their puppets (Soulja Boy, All American Rejects) to have. A few bands have gone on their own and developed an app (Death Cab, PUSA, Trent), but what bands in this end of the biz have the resources to do that? None apparently, and it's a pity. It's a pity because our fans travel incessantly to see us and lots of them have iPhones now. The Model/Controller end of every app built upon such a framework could stay exactly the same, and the View could stay largely the same for each bands' app. The possibilities are absolutely unlimited for the cool stuff you could put in there that would be of use to a traveling music fan...\r\n\r\nOf course, only a relatively small portion of the world has a smartphone at this time, but virtually everyone has internet access. A huge swath of our fans are first exposed to us and our music via our websites. Our (rre's) website is okay, but not too spectacular visually, not too easy to navigate, and the eCommerce part of it is so outdated and difficult to use that it might as well not be there. Somehow we still manage to sell stuff through our website, which is a testament to our fans' determination to help support us. I suspect that many bands have a similar experience. They have merch there, but take a look at a well done eCommerce site, and there's no comparison. They need help. There's no reason to not have a better machine in place. One that's easy to use. One that's easy to find. One that integrates cleanly with the mobile app. I think I found the answer this weekend.\r\n", slug: "ibd-manifesto", summary: "Disclaimer(s) : I will me using the terms we and us and our to refer alternately to my band <a href=\"railroadearth.com\">Railroad Earth</a>, and to my colleagues in the jamband scene without differentiating every time which I'm talking about. You'll just have to figure it out. Hope it's not too confusing.\r\n\r\nThis began as an email to a Rails developer that I'd been conversing with. He brought up the Digg Trent Reznor interview. After the first bit my response became more like a blog post. So I'm posting.</p>", previous_id: nil, published: true, pub_date: "2009-05-27 12:13:44"},
  {title: "Something about Bluegrass", body: "I dunno.  I’m not really sure what I’m trying to say yet, but I’ll give it a whirl.\r\n\r\nThere’s a really interesting conversation going on right now, initially spearheaded by Pandolfi, but now spilling out into the wider stream.  The whole “what is bluegrass” conversation, and it’s almost certain that it’s always been going on but just never showed up on my radar.\r\n\r\nI’ve been, in the most nominal sense, a bluegrass musician for close to 10 years now.  Jeremy from the Dusters asked me the other night how long I’d been playing bluegrass.  I wasn’t sure what answer to give him.  Less than a year?  Almost 10 years?\r\n\r\nThen yesterday I read [that Devol interview](http://performermag.com/2011/11/09/8231/) and the part where he says that the Avetts brothers are “in NO way a bluegrass band” struck a chord.  Pardon the pun.  \r\n\r\nNow here’s a bass player that I love like a brother, in one of those bluegrass bands that gets routinely and deliberately ignored by the IBMA, the supposed torch-bearing organization of bluegrass music, succumbing to the same trap of bluegrass judgmentalism that drives musicians like us crazy.  I, for one, happen to think the Avetts ARE bluegrass, whether they care to be considered that or not.\r\n\r\nI think RRE and Cornmeal are bluegrass, even if they are loud as fuck and have drum kits and electric guitars.  I think Avetts and Mumford are bluegrass, even if they’re poppy and successful.  I think the Stringdusters are bluegrass even if they sound increasingly like a really good jamband.  I love bluegrass music, but honestly, the shit I can’t listen to for much longer than an hour or so is that SPBGMA (pronounced Spig-ma) style that is arguably the “most” bluegrass of all these subgenres.  I surely wouldn’t stoop to calling any of it “not bluegrass”.  It just seems hypocritical. \r\n\r\nIs there a “problem” with bluegrass?  By every available metric bluegrass and all it’s dialects is doing better than ever.  Is the problem just that it’s gone beyond it’s traditional borders and has a lot more people involved in the conversation and the scene than ever before?  \r\n\r\nIs that really a problem?  \r\n\r\nI could see how it would be if you were the organization that used to be the authoritative voice on the subject for the community that used to be easy to contain within defined borders.  I don’t know.  The [Church analogy](http://chrispandolfi.com/?p=567#comment-253) still seems fitting.  [The gated community one](http://ignoredbydinosaurs.com/2011/10/overly-long-analogy-about-ibma), also.\r\n\r\nI recently joined the IBMA to see if there’s any interest of this conversation within that community, rather than being one of these folks sniping from the outside.  I guess we’ll see.", slug: "something-about-bluegrass", summary: "", previous_id: 149, published: true, pub_date: "2011-11-15 00:56:00"},
  {title: "Chapter1b", body: "<div style=\"text-align: center;\"><span class=\"Apple-style-span\" style=\"font-weight: bold; \">Step 2. Learn to program</span></div><br />Here's the thing. Computers don't think like you and me. They think in 1s and 0s. Every programming language ever invented has basically been a way to translate what a human wants to have done into a stream of 1s and 0s to be read by the computer. The translation into binary can happen at a couple of different points along the way from programmers head to users computer screen, but there are basically two different methods for how different languages do this. Some languages, especially the older (pre-1990) ones are \"compiled\". That's a really byzantine process that basically involves taking the code that you have written, translating it into some 1s and os, linking it with other files in your code, and wrapping it up into an \"executable\" - a program that you can execute on your computer or whatever. The advantages of this method are thus:<br /><br />Some larger applications can have bazillions of lines of code to execute (think about a Windows installer disk). If all of these lines of code were translated into binary at the time you run the application, the app would run so slowly that it'd be useless. This was obviously a big deal before CPU speeds got to be what they are now. Back in the day, the act of compiling was in itself a very time consuming procedure, and still can be today, so by doing it beforehand you save that much time and effort on the part of your computer. You also have the advantage of tuning your application on a lower level with regards to interaction with the Operating System (we'll get to that), thus making it possible for your app to perform much more nimbly. So basically, most of the benefits of compiled languages are in the performance arena.<br /><br />The disadvantages of compiled languages have mostly to do with portability. Since the code has already been bundled into binary, the only machine on which the executable will run is the one for which it was written. That's why you have Mac and PC versions of the same software on the shelves. They had to be written and compiled separately since the two different computers have different methods of operating at the OS level and thus need different sets of instructions to accomplish the same task. C is the mother language from which virtually all other languages are descended, and the perfect example of a compiled language. iPhone apps are written in a language called Objective-C, descended from C with an OO twist. Since iPhone apps are written for one device and one device only, and since application performance on a phone really matters (think battery life), compilation makes perfect sense.<br /><br />The other side of the coin, and I've been looking for this side for a while and have only recently found it, is an \"interpreted\" language. HTML is the perfect example of an interpreted language. HTML is only lines of code, just like an iPhone app or the Windows executable. The difference is that you leave the code alone and don't compile it. The code is instead \"interpreted\" at the time it's run, in the case of HTML by the browser that you're working in. The pros and cons of interpreted languages are exactly the opposite of compiled languages. You only write the code once and it works for every machine out there. It's left alone until that particular section of code is needed at \"runtime\", at which point whatever is doing the interpreting, be it the browser or the server on the other end, crunches your code into binary and spits it out into whatever the application needs at the time. As computers have gotten more and more powerful, this method seems to be gaining a lot of traction as the preferred method of writing new applications. Some examples are JavaScript, PHP, and Ruby - languages that get chewed up into something actionable at runtime. In the case of Ruby on Rails, which is the hot-shit dev platform at the time of this writing, the code actually gets interpreted twice - once on the server side where the code is translated into HTML, and again on the browser side when the HTML is translated into something that you can read and work with.<br /><br />Twitter was originally written with Ruby on Rails. If you think about it, Twitter is just an application that communicates over the internet. It really only does that one thing. They don't even display advertising (yet). Many of the traditional features of a commercial website are not there, so why write it in HTML? Especially when you have this vast database of information that gets displayed uniquely on every different computer screen out there, it's a perfect solution. Parts of Facebook are written with PHP, another interpreted language. PHP is designed to interact with info in a database - users and their profiles, pictures, text, whatever - and to write the HTML to display that info on the fly at the time of the page request.<br /><br />Pretty cool, huh? Comments? Suggestions?", slug: "chapter1b", summary: "<div style=\"text-align: center;\"><span class=\"Apple-style-span\" style=\"font-weight: bold; \">Step 2. Learn to program</span></div>", previous_id: 29, published: true, pub_date: "2009-03-30 19:30:14"},
  {title: "Picking it up", body: "Seems a shame to have this site over here, ostensibly my personal site, and not be doing anything with it.  Seems a shame because so much of the last four months has been so personal.  It’s been the hardest, weirdest, best, worst four months of my life so far.\r\n\r\nI haven’t really been in-between-chapters-of-my-life for a very long time, and I now remember what it feels like.  It’s why I moved back down to ATL to take some shitty job at the Guitar Center, just so I’d have something to do.  I don’t equate my situation with not having enough to do, BTW, but RRE at least gave me some kind of purpose.  Rather, RRE made me feel like I had some kind of purpose.  Even the last few years when I was pretty good and miserable, it still  gave me something to rail against.\r\n\r\nNow it’s not my problem anymore.\r\n\r\nNow I’ve got two boys.\r\n\r\nNow I’m embarking on a new career that got a firm shove in a direction this week.\r\n\r\nI’m in San Francisco right now, getting ready to fly back to Jersey.  I’ve been on the fence for as long as I’ve been doing this dev thing about what exactly kind of dev did I want to be.  So many cool technologies, so many cool paradigms, a few of them able to actually get done what I’ve wanted to get done since I started this journey.\r\n\r\nI had narrowed it down to two frameworks - pretty much opposite each other.  Rails - the exotic, well-heeled cool kid on the block - and Drupal - the giant open source free-for-all.  I came to the DrupalCon this week and am pretty much in love.  I met some great people, many working on ideas that are very close to mine, ultimately.  When asked what I do I said “I’m a developer”.  When they asked if I was a freelancer I say, “Yes.”  \r\n\r\n“I’m a career changer.”\r\n\r\nAnyway, I got the same warm, fuzzy vibe from this scene here this week that I got at festivals.  Hanging out with like-minded folks, learning lots of cool stuff, people serious about creating a movement.  \r\n\r\nI can now put aside my dreams of Ruby coolness for a little while.\r\n\r\nI’m a Drupal developer.\r\n\r\n==>\r\n\r\nPS - people at DrupalCon think ignoredByDinosaurs is a cool name.  They don’t ask what it means, they just say “oh, that’s cool.”\r\n\r\nI’m home.", slug: "picking-it-up", summary: "", previous_id: nil, published: true, pub_date: "2010-04-22 23:52:00"},
  {title: "Compiling Nginx", body: "Because I have to look this up every. single. time.\r\n\r\npcre ---\r\n\r\n`apt-get install libpcre3 libpcre3-dev`\r\n\r\nzlib ---\r\n\r\n`apt-get install zlibc zlib1g zlib1g-dev`\r\n\r\n#### init script\r\n\r\n~~~sh\r\n#! /bin/sh\r\n\r\n### BEGIN INIT INFO\r\n# Provides:          nginx\r\n# Required-Start:    $all\r\n# Required-Stop:     $all\r\n# Default-Start:     2 3 4 5\r\n# Default-Stop:      0 1 6\r\n# Short-Description: starts the nginx web server\r\n# Description:       starts nginx using start-stop-daemon\r\n### END INIT INFO\r\n\r\nPATH=/usr/local/nginx/sbin:/sbin:/bin:/usr/sbin:/usr/bin\r\nDAEMON=/usr/local/nginx/sbin/nginx\r\nNAME=nginx\r\nDESC=nginx\r\n\r\ntest -x $DAEMON || exit 0\r\n\r\n# Include nginx defaults if available\r\nif [ -f /etc/default/nginx ] ; then\r\n        . /etc/default/nginx\r\nfi\r\n\r\nset -e\r\n\r\ncase \"$1\" in\r\n  start)\r\n        echo -n \"Starting $DESC: \"\r\n        start-stop-daemon --start --quiet --pidfile /var/run/$NAME.pid \\\r\n                --exec $DAEMON -- $DAEMON_OPTS\r\n        echo \"$NAME.\"\r\n        ;;\r\n  stop)\r\n        echo -n \"Stopping $DESC: \"\r\n        start-stop-daemon --stop --quiet --pidfile /var/run/$NAME.pid \\\r\n                --exec $DAEMON\r\n        echo \"$NAME.\"\r\n        ;;\r\n  restart|force-reload)\r\n        echo -n \"Restarting $DESC: \"\r\n        start-stop-daemon --stop --quiet --pidfile \\\r\n                /var/run/$NAME.pid --exec $DAEMON\r\n        sleep 1\r\n        start-stop-daemon --start --quiet --pidfile \\\r\n                /var/run/$NAME.pid --exec $DAEMON -- $DAEMON_OPTS\r\n        echo \"$NAME.\"\r\n        ;;\r\n  reload)\r\n          echo -n \"Reloading $DESC configuration: \"\r\n          start-stop-daemon --stop --signal HUP --quiet --pidfile     /var/run/$NAME.pid \\\r\n              --exec $DAEMON\r\n          echo \"$NAME.\"\r\n          ;;\r\n      *)\r\n            N=/etc/init.d/$NAME\r\n            echo \"Usage: $N {start|stop|restart|reload|force-reload}\" >&2\r\n            exit 1\r\n            ;;\r\n    esac\r\n\r\n    exit 0\r\n~~~\r\n\r\nAlso, try running configure with \r\n\r\n`./configure --with-http_realip_module --with-http_gzip_static_module`", slug: "compiling-nginx", summary: "", previous_id: nil, published: true, pub_date: "2014-02-22 01:19:00"},
  {title: "My favorite technical interview question", body: "It's very simple.  I work at a [publishing company](http://www.advantagemedia.com/) in northern New Jersey.  I think we hire pretty smart, but the technical interview tends to be more of a conversation about technology than a series of quizzes on the whiteboard.  We've been hiring for a few positions lately, and I've recently hit upon the perfect conversational tech interview question.  It's separated a lot of wheat from a lot of chaff for me in the past few months.\r\n\r\n_\"What text editor do you prefer?\"_\r\n\r\n---\r\n\r\nI've recently begun using [PHPStorm](https://www.jetbrains.com/phpstorm/) after several years of bouncing between Vim for server side languages and TextMate for Javascript.  I've had a license for PHPStorm for almost a year now, but never really got into it.  In my younger days I guess I was kind of a hipster in that I thought I too cool for an IDE.  Rather, I _wanted_ to be too cool for an IDE.  IDEs were something you used if you worked with some bloated language like Java, or some compiled thing like Objective-C.  If you used a slim, elegant, interpreted language like Ruby, you only needed a text editor.  TextMate was the perfect little text editor for me for a number of years.\r\n\r\nWhen I started here, we were still on Windows machines.  Our entire Drupal stack was running on Ubuntu, and all of my background was in Linux and Mac, so it didn't make any sense to me to learn the tooling to work on Windows.  So I downloaded VMWare Player and spun up my first Ubuntu 12.04 desktop VM.  I taught myself to set up an intermediate LAMP/LEMP stack on this VM, and decided to start using Vim as my editor.  I'd read about it plenty and most of the TM community seemed to be scattering to either Vim or Sublime.  So Vim it was.\r\n\r\nI became pretty proficient with Vim, but when I started playing Angular about this time last year, I was really missing a tree view.  One of the killer-est plugins for Vim is [vim-rails](https://github.com/tpope/vim-rails), and the reason is actually because of the way that Rails is architected.  It's very predictable if you go with the flow, and vim-rails let's you jump from controller to it's view to it's model to it's tests, over to any other model with a series of very simple and easy to learn shortcuts (the only kind I ever learn).  I found myself really missing something like this with Angular, and just decided to go back to TextMate for Angular projects.  TextMate has that fuzzy file search and a file tree explorer by default so it really made getting around an Angular project a little less tiresome.  I know, I should have taken the opportunity to get to know Vim better, but I had (as you can imagine) a shitload of work to do.\r\n\r\nSo I spent several weeks back in TextMate.  I'm vastly more productive in an editor with the Twilight theme, by the way.  Those weeks go by and it's back to Drupal and Vim.  My Vim chops have weakened by this point, and I've gotten pretty used to having the Twilight theme, which apparently didn't exist for Vim.  [So I spent a day hacking an approximation together](https://github.com/JGrubb/vim-Twilight).  It's also annoying to not have a file tree.  I could install NerdTree, and tried to several times, but just never could figure out if I was learning a tool to get a job done, or just as some kind of test.\r\n\r\nEnter my first project in Java a month ago.\r\n\r\n---\r\n\r\nWe have some infrastructure here.  It runs a lot of Java.  This is a critical and most interesting piece of infrastructure, and we only have one Java guy here and he's pretty booked.  Building web sites and writing javascript is fun and all, but underneath that is the layer of data in which my company lives and breathes.  This is the layer for which this piece of infrastructure does the plumbing, therefore it has become much more interesting to me as of late.\r\n\r\nThis requires, obviously, learning a little bit about Java - something I'd stringently avoided for several years now.  Java was old, Java was derided, Java could simply not be written without an IDE.  These are prejudices which I no longer hold.  I take this as a point of pride that I've risen to a level where I no longer define myself by my choice of technology.  I've chosen enough of them at this point to see the merits of each for what they're for, as well as what they shouldn't be for.  This is called experience, I think.\r\n\r\nSo anyway, my experience with Java and Eclipse is rather interesting.  \"Jump to declaration\".  Wow.  A tree view not just of the files within my project, but of the methods within a file!  Wow.  It's at this point that I have to jump back into Drupal to do some plumbing between this and that.  I fire up PHPStorm, thinking hey, this IDE thing is kinda cool.  \r\n\r\nLo and behold, many of the shortcuts in Eclipse are the exact same in PHPStorm.  The menu and layout are very similar.  I'm being productive in a tool which had previously only been sort of useful under come circumstances.  I haven't even gotten to the debugger yet, on account of plumbing it into Vagrant and back being a pain in the ass.  Just being able to reformat files and jump to function definitions is pretty nifty.  \r\n\r\nThen I have to jump back into another Angular project.  Hey, I think.  PHPStorm is basically also [WebStorm](https://www.jetbrains.com/webstorm/), and therefore should be aware of Angular.  It is!  It indexes my entire project and within 30 minutes I'm being way more productive in PHPStorm on an Angular project than I would've been in TextMate.  It's effing amazing!  So I'm pretty much sold on PHPStorm, and then I notice that it doesn't support the little Sinatra/Sidekiq endpoint that goes along with this Angular project.  I start thinking about IntelliJ a little bit, as I'm really starting to see the gains from being able to use one tool across many different technologies.\r\n\r\n---\r\n\r\nMy point here is that I can go on for a ridiculously long time about my text editor and why.  There's a story, and it also takes a winding path through what technologies I've used, why I used them, why I moved on or stayed with them.  \r\n\r\nI don't care what editor you use.  Ok, I kinda do actually, but I care much more that you have some opinions on the matter.  If you don't, I'm not sure you really write code and that's kind of a problem for the types of technical positions that we are filling.  These positions require a curious mind, one that likes to check out new things, and one that's ok with using old things if that's the right tool for the job.\r\n\r\nIf you're interviewing at ABM and you come across this blog post in doing some research about the team and the company, feel free to mention that.  Taking the initiative to do some research on your potential teammates speaks much more to the kind of curious mind that you posses than a long winded discussion about your text editor ;).", slug: "my-favorite-technical-interview-question", summary: "", previous_id: nil, published: true, pub_date: "2015-02-13 20:29:33"},
  {title: "Where is the Homebrew Memcached config file?", body: "I've finally been getting around to using Redis for caching on this blog and other Rails projects I've got laying around, and I've finally gotten around to Homebrewing PHP 5.5 to use for my local set up at work.  Jose's default PHP 5.5 brew doesn't install the new Opcache, so look around and make sure you install that version because it screams.  \r\n\r\nI guess you could fairly say that caching has been on my mind a lot lately as I also finally got around to installing and using Memcached here in development with our company's Drupal sites.  That's also a separate Jose homebrew install, so look around for that, too.  Anyway, after fiddling around with all the Drupal configs that I had commented out previously that dealt with Memcached, I got it up and running.  Make that hauling ass.  It's a lot of fun.  \r\n\r\nSo of course, the next step is to install some outdated script that gives me some visibility into the cache statistics.  Here's where I get to the point.\r\n\r\n---\r\n\r\nOut of the box, the Homebrew installation of Memcached gives you 64M, which is also what you get if you install it from Aptitude on Ubuntu.  I've finally done enough Ubuntu to get that most config files are stashed somewhere in /etc (/etc/memcached.conf), but where do these files live on the Mac?  \r\n\r\nThis is the only downside to Homebrew, that most of the brewers (and God bless y'all, not complaining) pick some arbitrarily weird places to stash stuff, and crazy commands to access the executables.  `mysql.server start`?  What distro does that come from?  It just doesn't make a lot of sense, but I guess that's what keeps your mind sharp.\r\n\r\nAnyway, I wanted to feed Memcached some more memory, and I couldn't find the config file for the life of me.  Maybe you're here for the same reason.  I dug pretty deep into Google before I found the answer.  It's in `~/Library/LaunchAgents/homebrew.mxcl.memcached.plist`.\r\n\r\nOut of the box it looks like this -- \r\n\r\n~~~xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r\n<plist version=\"1.0\">\r\n<dict>\r\n  <key>Label</key>\r\n  <string>homebrew.mxcl.memcached</string>\r\n  <key>KeepAlive</key>\r\n  <true/>\r\n  <key>ProgramArguments</key>\r\n  <array>\r\n    <string>/usr/local/opt/memcached/bin/memcached</string>\r\n    <string>-l</string>\r\n    <string>localhost</string>\r\n  </array>\r\n  <key>RunAtLoad</key>\r\n  <true/>\r\n  <key>WorkingDirectory</key>\r\n  <string>/usr/local</string>\r\n</dict>\r\n</plist>\r\n~~~\r\n\r\nSo instead of pointing at a config file, you just pass all the config in the startup command.  To bump it up, you need to pass in `-m 128`, or however much you want to feed it, like this.\r\n\r\n~~~xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r\n<plist version=\"1.0\">\r\n<dict>\r\n  <key>Label</key>\r\n  <string>homebrew.mxcl.memcached</string>\r\n  <key>KeepAlive</key>\r\n  <true/>\r\n  <key>ProgramArguments</key>\r\n  <array>\r\n    <string>/usr/local/opt/memcached/bin/memcached</string>\r\n    <string>-l</string>\r\n    <string>localhost</string>\r\n    <string>-m</string>\r\n    <string>256</string>\r\n  </array>\r\n  <key>RunAtLoad</key>\r\n  <true/>\r\n  <key>WorkingDirectory</key>\r\n  <string>/usr/local</string>\r\n</dict>\r\n</plist>\r\n~~~", slug: "where-is-the-homebrew-memcached-config-file", summary: "Where to find the Memcached config file when installing from Homebrew?  It's actually easy, but hidden...", previous_id: nil, published: true, pub_date: "2014-02-25 21:30:00"},
  {title: "Disable Chrome Notifier", body: "That unwanted thing that Google put in your top menu bar?  That bothers you, too?  Can't find where to turn it off?  That's because they wanted to hide it from you.\r\n\r\n1. `chrome://flags` - put that in your address bar.\r\n2. Search for 'notifi', as in 'notifications' (which is what it's called right now).\r\n3. DISABLE\r\n", slug: "disable-chrome-notifier", summary: "Remove Google Chrome notifications from mac os menu bar.", previous_id: nil, published: true, pub_date: "2014-02-27 15:33:41"},
  {title: "Slightly more in depth with Wordpress", body: "<blockquote>I am having a blast.  I found a nice photo gallery Gen Next - has lots of cool features; still working on it.\r\n\r\nI do need some help:\r\n\r\n1) how do I keep the 'home' page of the WP site clear of posts?  I just want to put some html text and links.  It seems to always show the latest posts.  I need to understand what is going on with that page.\r\n\r\n2) How can I order the posts within a category.  example:  For Lyrics I have category per album with a post for each song.  I need to order them in track order, it seems to always put the newest post first.  Ordering by permalink would work since I put the track number as the 1st part of the name.\r\n\r\n3) Gotta turn off the right nav stuff - not needed.\r\n\r\nI tried creating a category called Lyrics and then adding sub-categories for each album.  That created the Lyrics page with all songs listed, I wanted just links to the sub-categories; plus it made the menu real ugly with all the albums listed below main menu.  I resolved this by making Lyrics a page and putting links to the 'album' categories in the html.  It seems to work fine but I am not sure if I could have done this another way.\r\n\r\nalso:  where do I comment out the 'add comments' stuff?\r\n</blockquote>\r\n\r\n<p>Alright, in order --</p>\r\n\r\n<ol>\r\n<li>Go to Settings -> Reading and set the top option to display a static page as the home page.  You'll have a list of options for which static page you want.</li>\r\n<li>As with almost any programming challenge, there are a couple of ways to go about it.  I'm not exactly sure how you want them to display in every situation, but I'll take a beginning guess.\r\n<ol>\r\n<li>The easiest, and in this case probably best way to go is to just make sure you enter the lyrics for the songs in the reverse order than how you want them to appear.  If you've already entered some of them in, you can alter the \"published date\" on the edit screen of each lyric page.  I'd just edit that have them line up in the order that you want.</li>\r\n<li>The more stylish option would be to write a function in your theme's <code>functions.php</code> file.  To make this work correctly you'd have to make use of the \"custom fields\" feature.  I'm a tiny bit rusty on the exact way to go about this, but basically \"custom fields\" are extra bits of metadata that you can add to any page or post in WP.  For instance, you could create one custom field with a key called \"track number\" and use the value of that field to define the track number.  You'd then figure out the correct function to call with the correct arguments to make it show up in the right order when someone came to the lyrics section of the site.</li>\r\n<li>Doing the same thing from the theme template would also be an option, and probably a little more realistic since you'd be able to have the correct template called by following the naming convention for a given category.  <a href=\"http://codex.wordpress.org/Template_Hierarchy\">This page</a> will tell you how.</li>\r\n<li>Slightly off-topic, but there's also the option of creating a blanket \"Lyrics\" category, and then creating a post for each album that simply lists the songs in the running order, and then links the song titles to another post that contains the lyrics for that song.  This option might give you the most control for the least effort.</li>\r\n</ol>\r\n</li>\r\n<li>So you don't need a right sidebar at all?</li>\r\n<li>Right, yeah I would ditch the sub-categories for the albums, and probably go with option 4 above.</li>\r\n<li>If you look at <a href=\"http://github.com/JGrubb/Base-WP-theme/blob/master//page.php\">line 29 on the page.php</a> file and <a href=\"http://github.com/JGrubb/Base-WP-theme/blob/master//single.php\">line 39 on the single.php</a> file, you'll see the comment function.  I'd just comment it out so it reads -\r\n\r\n<code>&lt;?php //comments_template( '', true ); ?&gt;</code><br />\r\nand your comments will be gone.</li>\r\n</ol>\r\n", slug: "slightly-more-depth-wordpress", summary: "<blockquote>I am having a blast.  I found a nice photo gallery Gen Next - has lots of cool features; still working on it.\r\n\r\nI do need some help:\r\n\r\n1) how do I keep the 'home' page of the WP site clear of posts?  I just want to put some html text and links.  It seems to always show the latest posts.  I need to understand what is going on with that page.\r\n", previous_id: nil, published: true, pub_date: "2010-10-02 01:25:49"},
  {title: "After one week of Laravel", body: "So years ago, in the early days of my HN acct, I bought a book called \"Founders at work\" that happened to be authored by PG's wife Jessica Livingstone.  Great book with a bunch of interviews with various founder/hero types - Woz, Evan Williams, etc.  \r\n\r\nOne of the interviews with with DHH - the Rails guy.  I remember him talking about how he used to write PHP and it was just too hard, and that's how he found ruby and started building stuff with it.  \r\n\r\nSo, I've been going through these Laravel screencasts lately.  They're very helpful, especially if I were a total noob as far as most of thes concepts go, and the architecture of Laravel is so heavily based on Rails that I pretty much know what's coming next.\r\n\r\nThe thing about it though, is the amount of Laravel code that you have to write to do the same thing in Rails.  And it's just uglier.  And it just seems like more work.\r\n\r\nSo yeah, that's my 1 week assessment of Laravel.", slug: "after-one-week-of-laravel", summary: "", previous_id: nil, published: true, pub_date: "2015-02-24 16:40:14"},
  {title: "preamble.", body: "<p>When in the course of your bands business, it becomes necessary to cast off your old, crappy website and the confusing, unnavigable interface which you present to the world as your first impression, and to assume the powers of PHP, CSS, XML, RoR, and other technologies not yet invented in the pursuit of a highly compelling online experience, a more meaningful dialogue with your fanbase, and the glorious rewards of possibly higher merch sales, a decent respect to the opinions of webmasters everywhere requires that I should declare the causes which impel me to dream of a better way....</p>\r\n\r\n<p>We hold these truths to be self-evident, that all websites are <em>not</em> created equal, yet they are endowed by their creators with the potential to be entertaining, informative, and even useful in a utilitarian sense.  That to secure these ideals, most bands stumble blindly about with no technical idea of what's involved in actually building a modern website, that the layout and information contained in your average band website has been virtually untouched for several years in a field where technology is changing every day.  That the potential for truly democratizing the music industry has never been more at hand than it is today.  That nobody in the business of selling records is interested in seeing a better system devised.  That the only way forward for the record industry is via the ubiquitous distribution system present in every one of your homes.  That the only way to achieve such independence is to fight for change, to take up development tools, and to learn what bands and the music business are doing wrong, and to right these wrongs.</p>\r\n\r\n<p>Prudence, indeed, will dictate that those of us yearning for change learn as much as we can about the technologies available, so that we may make best use of them and not stumble where so many of our brethren have before.  This blog shall henceforth detail my quest to overhaul the sorry state of affairs that is the music recording industry, so that it may brighten all of our lives forevermore...</p>", slug: "preamble", summary: "<p>When in the course of your bands business, it becomes necessary to cast off your old, crappy website and the confusing, unnavigable interface which you present to the world as your first impression, and to assume the powers of PHP, CSS, XML, RoR, and other technologies not yet invented in the pursuit of a highly compelling online experience, a more meaningful dialogue with your fanbase, and the glorious rewards of possibly higher merch sales, a decent respect to the opinions of webmasters everywhere requires that I should declare the causes which impel me to dream of a better way....</p>", previous_id: nil, published: true, pub_date: "2009-03-04 14:59:10"},
  {title: "Parsing query string parameters out with javascript", body: "~~~javascript\r\n  // creates a global variable called urlParams\r\n  // adapt as needed.\r\n  \r\n  // will forcefully downcase all query string params\r\n  \r\n  // use --\r\n  // http://www.ignoredbydinosaurs.com?foo=bar&test=2\r\n  // urlParams.foo  // bar\r\n  // urlParams.test // 2\r\n  \r\n  window.urlParams = (function () {\r\n    var match,\r\n    pl     = /\\+/g,  // Regex for replacing addition symbol with a space\r\n    search = /([^&=]+)=?([^&]*)/g,\r\n    decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\r\n    query  = window.location.search.substring(1);\r\n\r\n    var params = {};\r\n    while (match = search.exec(query)) {\r\n      params[decode(match[1]).toLowerCase()] = decode(match[2]);\r\n    }\r\n\r\n    return params;\r\n  })();\r\n~~~", slug: "parsing-query-string-parameters-out-with-javascript", summary: "Parsing simple query string parameters out with javascript.", previous_id: nil, published: true, pub_date: "2014-01-30 16:28:17"},
  {title: "busyBusy", body: "Alright!  I finally have some time here.  I apologize for the dearth of interesting verbiage from this blog over the last week or so.  I'm still getting the hang of this whole thing, of course.\r\n\r\nOne thing that I've realized on reflecting over the past week is that the whole method that I have of getting all fired to write and then putting out four things at a time is probably not the most effective means of running this blog.  I guess that's why none of the blogs that I've been reading do it that way.  So, I'm going to try and keep this to a more or less daily occurrence.  We'll all see how well that works out.\r\n\r\nSo to catch up -\r\n\r\n---\r\n\r\nI've picked up a second job here that has been working for me very well.  I more or less started last fall and it started as a one-off consulting gig that snowballed into more or less a full time thing.  The consulting gig was to help this marketing company/call center up in NJ get set up with a computer recording system.  They wanted to be able to do hold music or messaging for their clients for whom they provide an answering service.  It went well.  Spending other peoples money on recording gear and computers is the perfect job for me, but alas, they only needed one system to get the job done.  That led into another freelance gig rebuilding some old crappy computers that they had laying around into <a href=\"http://lmgtfy.com/?q=citrix&amp;l=1\">Citrix</a> clients, which led into some more involved networking and pretty much whatever they need, which is alot.  The head of IT at this place is a friend and fan of the band who keeps throwing me random jobs that I either already know how to do or can figure out with less babysitting than expected.  Their network guy is completely swamped at this place, so I've been learning a lot from him about Windows networking.  This is what has kept me away from the computer for 2 weeks now.  I've been pulling the 6am-3pm shift, and on my feet basically the whole time, so it hasn't left much time for writing, even if I did have something interesting to say.  I haven't though.\r\n\r\nIn the few in between times that I have had time to screw around, I've been doing some tinkering around with RRE's web presence.  Check out our <a href=\"http://www.facebook.com/RailroadEarth#/RailroadEarth?v=box_3&amp;viewas=1134200354\">Facebook Page</a>, specifically the Boxes page, as that's the place where I've found the first foothold on the mountain that I've been sizing up for the last 9 months as far as this whole software/web development journey goes.\r\n\r\nI also got the codes to <a href=\"http://www.railroadearth.com/home_page/\">RRE's web page</a> and promptly learned why you don't do direct work on a live web page!  That was fun!  I got the site back up, fortunately, but there are a few broken links that I'll be fixing, on the local copy of the website, of course.  Stay tuned for those as well.  Now that I have the access, I intend to see what I can do with the RRE site as it is before I launch into my wet dream of a band website.\r\n\r\nGot a good Dummies book on a website framework called <a href=\"http://www.joomla.org/\">Joomla</a>, which seems very, very interesting.  It's what's known as a Content Management System, or CMS for short.  Joomla is an open source framework which is supposed to make it really easy to do exactly what I had the big idea about a few months ago.  It's a modular system for building, updating, and maintaining your web site with new content, new features, etc.  It's a cool idea, but also pretty mature and full featured.  This is good because it means that many of the bugs have been worked out for several years now.  This is bad because it means learning a LOT of stuff that I probably don't really need in the context of doing what I want to do.  I guess it's not so bad, since I like learning new stuff.\r\n\r\nLearned a little how <a href=\"http://www.livedownloads.com/live-music/3,66/Railroad-Earth-mp3-flac-downloads.html\">LiveDownloads</a> runs their operation from a content management standpoint.  I'm not gonna say, though, that'd probably be rude.\r\n\r\nFound another framework called <a href=\"http://drupal.org/\">Drupal</a>, which is actually what led me to Joomla.  It's another CMS, with a different paradigm.  We'll see which one I figure out first.\r\n\r\nStarted grasping the concept of web servers and managed to get Apache up and running on my system.  I'd suggest if you're a brand newby to web design and aren't working in a Windows VB environment, you might want to check out <a href=\"http://www.apachefriends.org/en/xampp.html\">Xxamp</a>, as it bundles together basically every single open source gadget you're going to need to build and maintain a web site.\r\n\r\nBought a domain, which will be the place I launch the early versions of all of this stuff to submit for your tinkering and inspection.  I'll let you know where it is when there's something there to look at.\r\n\r\nSooooo, it's been a busy week.  Fortunately I'm back on the road now, in the sense that now I can catch up a bit on everything I have to do.  I only wish that I'd had this idea a few years ago.  I feel like I have an absurd amount of catching up to do.  Last night's show kicked ass, by the way...", slug: "busybusy", summary: "Alright!  I finally have some time here.  I apologize for the dearth of interesting verbiage from this blog over the last week or so.  I'm still getting the hang of this whole thing, of course.  <div>", previous_id: nil, published: true, pub_date: "2009-03-20 14:17:09"},
  {title: "Geek Club.", body: "<p>I had so much fun last night that I'm writing about it before I've even had a cup of coffee.</p>\r\n\r\n<p>The first rule of Geek Club is:</p>\r\n\r\n<p>Don't talk about Geek Club.  Actually this first rule is my own, and I'm breaking it immediately, except that I shall not refer to Geek Club by it's true name.  It took me many months of searching to find it, and I don't want to spoil the sense of victory for you, should you be inclined to sniff out your own local chapter.</p>\r\n\r\n<p>The second rule of Geek Club is:</p>\r\n\r\n<p>Be prepared to practice your pitch.  That's what pretty much everybody is here for, and some of them may even try to poke holes in your idea.  Sooo much fun...</p>\r\n\r\n<p>The third rule of Geek Club is:</p>\r\n\r\n<p>There are no NDAs.  Presumably, everybody here has an idea that they're working on, so they don't really have time to steal your idea.  That and the ideas and interests and fields that people are working in and on are sooo widely varied.  I met a dude working on a project involving credit cards, a dude working on a project involving medical testing, a dude who cofounded a startup called <a href=\"http://www.seatgeek.com/\">SeatGeek</a>, and a dude who wants to help you find <a href=\"http://whatisfresh.com/\">fresh local food in NYC</a>.  Yes, Geek Club is a primarily, though not exclusively, male environment.</p>\r\n\r\n<p>The fourth rule of Geek Club is:</p>\r\n\r\n<p>Tolkien references are okay.  I had this image flash in my head toward the end of the meeting of storming the gates of some castle, that castle presumably being the tech scene that I'm busting into now.  So you know that scene at the end of <em>The Two Towers</em> where the humans are holed up in Helms Deep with the orc hoard at the gates?  As my brain was almost to sleep, I figured that actually, that fortress is the music business of old, and that mongrel hoard is me and my musician buddies.  And this idea that I'm working on is the big scary orc with the bomb that blows the joint to hell.  And the mongrel hoard is going to win this time, come hell or high water.</p>\r\n\r\n<p>SO EXCITED!</p>\r\n", slug: "geek-club", summary: "<p>I had so much fun last night that I'm writing about it before I've even had a cup of coffee.</p>\r\n\r\n<p>The first rule of Geek Club is:</p>\r\n\r\n<p>Don't talk about Geek Club.  Actually this first rule is my own, and I'm breaking it immediately, except that I shall not refer to Geek Club by it's true name.  It took me many months of searching to find it, and I don't want to spoil the sense of victory for you, should you be inclined to sniff out your own local chapter.</p>\r\n\r\n<p>The second rule of Geek Club is:</p>\r\n\r\n<p>Be prepared to practice your pitch.  That's what pretty much everybody is here for, and some of them may even try to poke holes in your idea.  Sooo much fun...</p>\r\n\r\n<p>The third rule of Geek Club is:</p>", previous_id: nil, published: true, pub_date: "2009-12-04 12:07:28"},
  {title: "Why doesn't 'authorized_keys' work?", body: "For a while now I've been leaving my work computer on 24/7 and remoting in to do all my work when I'm out in the world.  I have the same public key on both machines (perhaps not the safest thing in the world, true), so I was confused by why I needed to enter my password every time I logged in to my work computer.  Not so confused that I took the time to figure it out until recently.\r\n\r\nI had set permissions on the `authorized_keys` file to 400, but for some reason it needs to be 600.\r\n\r\n##### doesn't work\r\n\r\n`-r--------   1 grubb  staff    410 Nov 27 10:13 authorized_keys`\r\n\r\n##### works\r\n\r\n`-rw-------   1 grubb  staff    410 Nov 27 10:13 authorized_keys`\r\n\r\n", slug: "why-doesn-t-authorized_keys-work", summary: "Proper permissions on ssh public keys tends to have an outsized effect on whether or not they actually work.", previous_id: nil, published: true, pub_date: "2014-02-14 13:39:42"},
  {title: "Dear blog", body: "I've been so busy lately that I forgot to wish you a happy birthday yesterday.  I'm sorry.  I thought today was yesterday, and I really have been looking forward to this day, er yesterday, for a while now.  \r\n\r\nWe've both been through a hell of a lot in the last five years, I seriously can't believe it's been that long.  You were born in the RRE tour bus between Stroudsburg and Easton on our way to play the GA Theater (the old one!).  You only stayed in Blogger for all of a week before I whisked you away into Wordpress.  I've moved you a lot, and you've helped me keep a handle on where I've been over this vastly more difficult and private and rewarding section of my life.  Thanks for sticking with me.", slug: "dear-blog", summary: "", previous_id: nil, published: true, pub_date: "2014-02-25 21:03:24"},
  {title: "atLeastThere'sThis", body: "If not one more good thing happens during Obama's presidency, and I am an eternal optimist, the Data.Gov project sounds like a ball, and a huge step forward pretty much any way that I look at it.\r\n\r\n<a href=\"http://feeds.wired.com/~r/wired/index/~3/WDRdxmhvPFA/Open_Up_Government_Data\">Link.</a>", slug: "atleasttheresthis", summary: "If not one more good thing happens during Obama's presidency, and I am an eternal optimist, the Data.Gov project sounds like a ball, and a huge step forward pretty much any way that I look at it.<div><br /></div><div><a href=\"http://feeds.wired.com/~r/wired/index/~3/WDRdxmhvPFA/Open_Up_Government_Data\">Link.</a></div>", previous_id: nil, published: true, pub_date: "2009-03-08 22:23:33"},
  {title: "justAnotherReason", body: "So Eminem's old producers sued Universal over royalties.  For those of you who have never been signed to a record contract, they are shadier (pardon the pun) than you probably imagine.  The whole point of getting a record deal is to try and make some money off of selling your recording, right?  Well, over the last decades, the industry (and by industry, I mean the lawyers and label heads in charge of finding ever more inventive ways of scamming inattentive rock stars (which is generally easier than shooting fish in a barrel)) has come up with some novel ideas about how your royalty rate should be calculated.  They subtract the cost of all manner of promotional charges for the posters you see in the window of the record store, and then things like \"breakage\" (which hasn't been a real issue since records were made of shellac), and then just arbitrarily lop off another 10% for this, and 10% for that, until by the end you're not getting paid for the 1 million records you sold, you're getting paid for maybe 500k of them, if you're very lucky.  Then they charge you back for some more (usually bogus) stuff.  The whole game is to keep you, the artist, in the hole.  It's easy.  Oh, the label is sending a limo to pick you up at the airport and take you to the Grammy's!  Great!  Do I need to tip the driver?\r\n\r\nAdd into this that their lawyers have seen fit to jump on digital distribution by making your royalty rate 75% (again, if you're lucky) of what it would be if there were a physical medium being sold through a store (and this is in addition to subtracting for \"Breakage\", etc.), and the margins for the artist get even lower.  It's pathetic, honestly.  Even more pathetic is that artists are usually in a big hurry to sign these pieces of shit.\r\n\r\nSo, when I read things like <a href=\"http://digitaldaily.allthingsd.com/20090309/that-tiny-sum-its-your-digital-download-royalties-after-packaging-costs-and-breakage/\">this</a>, it really makes me wonder.  To sum up, Em's old producers sued over the fact that there were so many absurdly non-justifiable, pre-royalty charges added up before they got their cut.  They argue, and rightly so in my mind, that since you can't \"break\" a digital download, and the distribution costs are virtually nil, and that the labels aren't paying for in-store promotional material to market the download, that those charges shouldn't apply to their royalties.  They argued that the deals should work more like commercial and movie licensing agreements work.  That'd bring their cut up, as producers.  It'd also bring down the labels' cut, obviously.  The jury found for Universal, unfortunately...\r\n\r\nSo when I read articles like the <a href=\"http://feedproxy.google.com/~r/Techcrunch/~3/EELkxo88_yI/\">one that I posted earlier today</a>, I wonder why music label execs think we're all so stupid.  By \"we\", I don't just mean artists because there's plenty of empirical evidence that we are in fact, but the entire music listening populace.  Why do we want to consume the crap that they sell, ripping off artists in the process, ignoring or suppressing good music along the way?\r\n\r\nTime to get back on my musicTech thread...", slug: "just-another-reason", summary: "So Eminem's old producers sued Universal over royalties.  For those of you who have never been signed to a record contract, they are shadier (pardon the pun) than you probably imagine.  The whole point of getting a record deal is to try and make some money off of selling your recording, right?", previous_id: nil, published: true, pub_date: "2009-03-09 13:05:22"},
  {title: "link_to 'Seven years gone'", body: "<blockquote>Maybe ten years is too long a period of time to plan for. So how about seven?\r\n\r\nSeven years from now, what will you have to show for what you're doing right now?\r\n\r\nIf your answer is, \"not much,\" perhaps you should consider a new plan, one that might generate a different answer, or, at the very least, be a more fun way to waste seven years.</blockquote>\r\n\r\nvia => <a href=\"http://sethgodin.typepad.com/seths_blog/2009/12/seven-years-gone.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed:+typepad/sethsmainblog+(Seth's+Blog)\">Seth Godin</a>.", slug: "linkto-seven-years-gone", summary: "<blockquote>Maybe ten years is too long a period of time to plan for. So how about seven?\r\n\r\nSeven years from now, what will you have to show for what you're doing right now?\r\n\r\nIf your answer is, \"not much,\" perhaps you should consider a new plan, one that might generate a different answer, or, at the very least, be a more fun way to waste seven years.</blockquote>\r\n\r\nvia => <a href=\"http://sethgodin.typepad.com/seths_blog/2009/12/seven-years-gone.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed:+typepad/sethsmainblog+(Seth's+Blog)\">Seth Godin</a>.", previous_id: nil, published: true, pub_date: "2009-12-31 20:54:02"},
  {title: "Almost every YoshiToshi podcast", body: "<iframe src=\"//embed.gettyimages.com/embed/123396015?et=EUyx8Ft7NUm3t2j8sdXfRA&sig=3R37pVaNPWX91xqOljjMvE-TTdUVoN2mE0fKzEZEn4Q=\" width=\"647\" height=\"500\" frameborder=\"0\" scrolling=\"no\"></iframe>\r\n\r\n---\r\n\r\n- <a href=\"/YoshiRadio/Episode 01 - Sharam_s Mix.m4a\">Episode 01 - Sharam_s Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 02 - Sultan_s Mix.m4a\">Episode 02 - Sultan_s Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 03 - Dean Coleman_s Mix.m4a\">Episode 03 - Dean Coleman_s Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 04 - Cedric Gervais_ Mix.m4a\">Episode 04 - Cedric Gervais_ Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 05 - Prompt_s Mix.m4a\">Episode 05 - Prompt_s Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 06 - David Tort_s Mix.m4a\">Episode 06 - David Tort_s Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 07 - Miss Nine_s Mix.m4a\">Episode 07 - Miss Nine_s Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 08 - Ned Shepard_s Mix.m4a\">Episode 08 - Ned Shepard_s Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 09 - D-Unity_s Mix.m4a\">Episode 09 - D-Unity_s Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 10 - Pig & Dan_s Mix.m4a\">Episode 10 - Pig & Dan_s Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 11 - DJ Simi_s Mix.m4a\">Episode 11 - DJ Simi_s Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 12 - 16 Bit Lolitas_ Mix.m4a\">Episode 12 - 16 Bit Lolitas_ Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 13 - Kamisshake_s Mix.mp3\">Episode 13 - Kamisshake_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 14 - Cocodrills_ Mix.m4a\">Episode 14 - Cocodrills_ Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 15 - The Flash Brothers_ Mix.m4a\">Episode 15 - The Flash Brothers_ Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 16 - Andrew Bayer_s Mix.mp3\">Episode 16 - Andrew Bayer_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 17 - Namito_s Mix.mp3\">Episode 17 - Namito_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 18 - Dimitri Andreas_ Mix.mp3\">Episode 18 - Dimitri Andreas_ Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 19 - Prompt_s Mix.mp3\">Episode 19 - Prompt_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 20 - Boris M.D._s Mix.mp3\">Episode 20 - Boris M.D._s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 21 - Spektre_s Mix.mp3\">Episode 21 - Spektre_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 22 - Alex Kenji_s Mix.mp3\">Episode 22 - Alex Kenji_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 23 - Schadenfreude_s Mix.mp3\">Episode 23 - Schadenfreude_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 25 - Timo Garcia_s Mix.mp3\">Episode 25 - Timo Garcia_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 26 - Anton Pieete_s Mix.mp3\">Episode 26 - Anton Pieete_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 27 - D-Formation_s Mix.mp3\">Episode 27 - D-Formation_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 29 - Pig & Dan_s Mix.m4a\">Episode 29 - Pig & Dan_s Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 30 - Solee_s Mix.mp3\">Episode 30 - Solee_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 35 - D-Formation_s Mix.mp3\">Episode 35 - D-Formation_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 36 - Matt Lange_s Mix.mp3\">Episode 36 - Matt Lange_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 38 - Coll Selini_s Mix.mp3\">Episode 38 - Coll Selini_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 39 - Solee_s Mix.mp3\">Episode 39 - Solee_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 40 - Scalambrin & Sgarro_s Mix.mp3\">Episode 40 - Scalambrin & Sgarro_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 42 - Pig & Dan_s Mix.mp3\">Episode 42 - Pig & Dan_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 44 - Ahmet Sendil_s Mix.mp3\">Episode 44 - Ahmet Sendil_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 45 - Federico Epis_s Mix.mp3\">Episode 45 - Federico Epis_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 46 - Sinisa Tamamovic_s Mix.mp3\">Episode 46 - Sinisa Tamamovic_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 47 - Koen Groeneveld_s Mix.mp3\">Episode 47 - Koen Groeneveld_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 48 - Pig & Dan_s Mix.mp3\">Episode 48 - Pig & Dan_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 49 - Quivver_s Mix.mp3\">Episode 49 - Quivver_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 50 - Tom Middleton_s Mix.m4a\">Episode 50 - Tom Middleton_s Mix.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 51 - Babicz_s Mix.mp3\">Episode 51 - Babicz_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 52 - Yoshitoshi Best of 2011.m4a\">Episode 52 - Yoshitoshi Best of 2011.m4a</a>\r\n- <a href=\"/YoshiRadio/Episode 53 - DBN_s Mix.mp3\">Episode 53 - DBN_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 55 - Tom Novy_s Mix.mp3\">Episode 55 - Tom Novy_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 56 - Nicole Moudaber_s Mix.mp3\">Episode 56 - Nicole Moudaber_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 57 - Ahmet Sendil Mix.mp3\">Episode 57 - Ahmet Sendil Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 58 - Heren Mix.mp3\">Episode 58 - Heren Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 59 - Sinisa Tamamovic Mix.mp3\">Episode 59 - Sinisa Tamamovic Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 60 - Rene Kuppens Mix.mp3\">Episode 60 - Rene Kuppens Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 61 - Scalambrin & Sgarro_s Mix.mp3\">Episode 61 - Scalambrin & Sgarro_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 62 - Pirupa_s Mix.mp3\">Episode 62 - Pirupa_s Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 63 - Darwin & Backwall Mix.mp3\">Episode 63 - Darwin & Backwall Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 64 - Nicole Moudaber Mix.mp3\">Episode 64 - Nicole Moudaber Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 65 - Stefano Noferini Mix.mp3\">Episode 65 - Stefano Noferini Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 66 - HEREN [Dirt Jugglerz] Guest Mix.mp3\">Episode 66 - HEREN [Dirt Jugglerz] Guest Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 67 - Sharam Live at Sensation (Denmark).mp3\">Episode 67 - Sharam Live at Sensation (Denmark).mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 68 - D-Unity Guest Mix.mp3\">Episode 68 - D-Unity Guest Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 69 - Sharam Live at Kool Beach BPM Festival.mp3\">Episode 69 - Sharam Live at Kool Beach BPM Festival.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 70 - Sharam Live at BPM Festival (Part 0).mp3\">Episode 70 - Sharam Live at BPM Festival (Part 0).mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 71 - Philipp Straub Guest Mix.mp3\">Episode 71 - Philipp Straub Guest Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 72 - El Mundo Guest Mix.mp3\">Episode 72 - El Mundo Guest Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 73 - Sisko Electrofanatik Guest Mix.mp3\">Episode 73 - Sisko Electrofanatik Guest Mix.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 74 - Sharam Live at Space Ibiza Opening Fiesta 2013.mp3\">Episode 74 - Sharam Live at Space Ibiza Opening Fiesta 2013.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 75 - Sharam 4th of July Edition.mp3\">Episode 75 - Sharam 4th of July Edition.mp3</a>\r\n- <a href=\"/YoshiRadio/Episode 76 - Mar-T Guest Mix.mp3\">Episode 76 - Mar-T Guest Mix.mp3</a>", slug: "almost-every-yoshitoshi-podcast", summary: "", previous_id: nil, published: true, pub_date: "2014-03-06 20:02:35"},
  {title: "My little pony's first shell script", body: "<p>So I've been doing a lot of CMS work lately, both Drupal and Wordpress.  The Wordpress gigs seem to come and go within a week, and are mostly just banging together a theme with varying amounts of complexity.  I'm a recent convert to the 960.gs CSS framework, which makes the absolute quickest work of laying out a website.  It's a thing of beauty and I've actually <a href=\"http://github.com/JGrubb/Base-WP-theme\">created my own base theme</a> to make the work even quicker, but that's for another post.</p>  \r\n\r\n<p>Every one of these gigs requires the exact same setup - downloading various bits of software from all over the internet and copying them to specific places on my hard drive and then wiring them all together.  It's a time consuming and utterly repetitive process, which makes it perfect for a computer to do.  Even more perfect is that I'm already on a computer when I'm doing it!  Wow...</p>\r\n\r\n<p>I'd already taken to doing much of this work from the \"command line\", and it only occurred to me yesterday that if I were doing the exact same series of commands from the command line every time I set one of these things up, isn't that something I could write a \"script\" to do for me?  For those of you - a \"script\" is exactly what it sounds like.  In the most basic sense all computer programs are scripts, be they <a href=\"http://ignoredbydinosaurs.com/2009/03/chapter1b\">compiled scripts or interpreted scripts</a>.  You must tell the computer what to do in no uncertain terms at all times for all possible scenarios.  Failure to do so is a Bad Thing.  So in this sense, I'm writing a series of terminal commands in the same order every time.  I had no idea until yesterday that it was as simple as saving those commands into a file and running that file to get what I want done.</p>\r\n\r\n<p>So, about 20-30 minutes worth of downloading, copying, and renaming has been reduced to about 20-30 seconds, depending on bandwidth.  Here's the script, in case you're curious --</p>\r\n\r\n~~~bash\r\n#!/bin/sh\r\n\r\nwget http://wordpress.org/latest.tar.gz\r\ntar xzvf latest.tar.gz\r\nrm latest.tar.gz\r\necho \"Name of directory?\"\r\nread directory\r\nmv wordpress $directory\r\ncd $directory/wp-content/themes\r\nwget http://github.com/JGrubb/Base-WP-theme/tarball/master\r\ntar xzvf JGrubb-Base-WP-theme-0efd724.tar.gz\r\nrm JGrubb-Base-WP-theme-0efd724.tar.gz\r\nmv JGrubb-Base-WP-theme-0efd724 ibd\r\n\r\n~~~\r\n\r\n<p>Now I'm off to write a script to do the same thing for me for Drupal...</p>", slug: "my-little-ponys-first-shell-script", summary: "<p>So I've been doing a lot of CMS work lately, both Drupal and Wordpress.  The Wordpress gigs seem to come and go within a week, and are mostly just banging together a theme with varying amounts of complexity.  I'm a recent convert to the 960.gs CSS framework, which makes the absolute quickest work of laying out a website.  It's a thing of beauty and I've actually <a href=\"http://github.com/JGrubb/Base-WP-theme\">created my own base theme</a> to make the work even quicker, but that's for another post.</p>", previous_id: nil, published: true, pub_date: "2010-09-29 13:30:00"},
  {title: "How (and why) to set up your Mac for Rails development - part 1", body: "The short version -\r\n\r\n<p><a href=\"https://github.com/JGrubb/laptop\">https://github.com/JGrubb/laptop</a></p>\r\n\r\n<hr>\r\n\r\n<p>The longer version -</p>\r\n\r\n<p>Setting up your Macintosh for Rails development is actually sort of like Rail development itself - you have to at least kind of know about a lot of different things before you can really get anywhere.  I&#39;d say I&#39;m new to Rails development even though I&#39;ve been poking at it since 2.1.  2.1 is the first version I remember after I first bought a Mac and started trying to teach myself to &quot;program&quot;.  It&#39;s taken me until 3.2 to come back to Rails with enough of a rounded web development skill set to really be able to fly around and build the things that have been locked up in my head for the last 4 years.  I&#39;ve written about this before, as have many others, but Rails isn&#39;t exactly a framework for beginners.  That is, it requires you to have at least some idea of what you&#39;re trying to do before it will let you sit down and do it.  Many of us probably grew up programming in Basic, but some of us might have gotten sidetracked into other vocations besides software development.  the world has come quite a ways since then.  So this post, or series maybe, will be an attempt to teach you not only what to install, but why.</p>\r\n\r\n<hr>\r\n\r\n<h3>Step 0 - the compiler</h3>\r\n\r\n<p>If you are on a Mac, you are lucky to already have a rather large lot of tools that software developers use already installed.  But they haven&#39;t given you everything.  Some of the ones that will come in handy down the line as you get further in to this process will have to be installed by you.  This will toughen you up and help you get more acquainted with a side of your computer that perhaps you didn&#39;t even know about.  The world (and by that I mean the guy who made up Homebrew) has made life a lot easier for the Mac-using developer, but in order to access all of those goodies, you&#39;ll need to install a compiler.  A compiler is basically a piece of software that builds other software.  </p>\r\n\r\n<p>One of the first pieces of software that you&#39;re going to build will be the Ruby language itself, but first things first.</p>\r\n\r\n<h3>XCode</h3>\r\n\r\n<p>If you&#39;re on Lion or the latest Snow Leopard, you can open up the App Store and search for &quot;XCode&quot;.  XCode is the official Apple development environment.  With it you can build iPhone apps, applications for the Macintosh, and really pretty much anything that isn&#39;t specifically meant to be run on Windows.  It&#39;s an enormous download, about 4GB recently.  </p>\r\n\r\n<p>After you download it, open it up, open the Preferences, and find the extra downloads part.  What you&#39;re looking for is the &quot;Command Line Tools&quot; bundle.  It&#39;s in one of the tabs toward the right.  Download and install.  Should be fairly simple.  Just to be safe, restart your computer.  Once it&#39;s back on open the Terminal.app (get used to the terminal, you&#39;ll be there a lot) and type <code>which gcc</code>.  If it doesn&#39;t spit anything back at you, you haven&#39;t installed the compiler.  Figure it out and come back for the next step - the package manager.</p>\r\n", slug: "how-and-why-set-your-mac-rails-development-part-1", summary: "    <p>The short version - </p>\r\n\r\n<p><a href=\"https://github.com/JGrubb/laptop\">https://github.com/JGrubb/laptop</a></p>\r\n\r\n<hr>\r\n\r\n<p>The longer version -</p>", previous_id: nil, published: true, pub_date: "2012-07-01 05:00:00"},
  {title: "Rust / Kansas", body: "It feels like ages since my last post, even though I've tried to keep it up with some links to some good dorkery.  Today is spent in the bus, driving the 735 miles from Denver to Columbia, MO.  We left at 9 this morning and have made a small dent in Kansas, but we'll most likely be rolling in around midnight or so tonight.  So here goes...\r\n\r\nYesterday was spent at the Mile High Music Festival in Denver, one of our hometowns.  It was kind of a strange lineup - us, Ani, Ben Harper, Tool, Panic, Black Keys, India Arie.  Sort of like a festival we do all the time, but not exactly.  I can't explain it without sounding like I'm getting down on the festival, but it was sorta like Rothbury without all the vibe.  Now, Rothbury, there's a festival.  My friend Laura has a great blog about her involvement with the copious vibe-ification that took place.  Check it out <a href=\"http://shaktisunfire.wordpress.com/2009/07/10/rothbury-2009/\">here</a>.  It's not kosher for me to be proclaiming any festival the \"best\", but if it were...\r\n\r\nFestival season aside, I've pretty much just been at work on Railroad Earth's next website.  After months of research, I've pretty well settled on WordPress as the platform and have been building for the last few weeks, talking to numerous developers and designers that can help with the look - the backend and build-out has pretty much become my baby.  I'm very excited about it.  I'd tell you where it's stashed, but not only do I want it to be a surprise to as many people as possible, the metrics tell me that perhaps a few of you have already found it.  \r\n\r\nPardon my lack of anything interesting to say, but my creative fire seems to go in cycles.  I've had to venture into the woods for more firewood lately, and will hopefully have more to say one of these days.", slug: "rust-kansas", summary: "It feels like ages since my last post, even though I've tried to keep it up with some links to some good dorkery.  Today is spent in the bus, driving the 735 miles from Denver to Columbia, MO.  We left at 9 this morning and have made a small dent in Kansas, but we'll most likely be rolling in around midnight or so tonight.  So here goes...\r\n\r\nYesterday was spent at the Mile High Music Festival in Denver, one of our hometowns.  It was kind of a strange lineup - us, Ani, Ben Harper, Tool, Panic, Black Keys, India Arie.  Sort of like a festival we do all the time, but not exactly.", previous_id: nil, published: true, pub_date: "2009-07-19 19:17:20"},
  {title: "Open sourcing the idea.", body: "<p>So, the 14 of you that still swing by here know my backstory.  Sometime in 2003 I joined a band with a neglected website.  At one of my first band meetings we discussed overhauling said website, since the majority of our fanbase was a grassroots kinda thing and most of our promotion happened via online channels like the <a href=\"http://www.archive.org/search.php?query=collection:RailroadEarth\">Archive</a> and <a href=\"http://launch.groups.yahoo.com/group/earthboard/\">YahooGroups</a>, etc.  Sometime in 2005 we still had that same website.  I was at my parent's house in north Georgia when it occurred to me \"hey, you know, you could probably learn how to build websites in the time that it's going to take this band to get it together enough to hire someone to do it.\"  If I'd only listened to that voice more clearly, but instead I got bogged down on the Dreamweaver section of the Adobe site and gave up without really exploring what web development was all about.  I was still trying to be a musician in any case.</p>\r\n\r\n<p>Fastforward to 2008 and we'd finally done something about our website a few months prior.  I got an iPhone.  I'll skip this part of the story since <a href=\"http://ignoredbydinosaurs.com/category/iphone/\">it's been documented ad nauseum on this blog</a>.  Anyway, it didn't take long for the potential of mobile apps as a huge and brand-spanking-new market to become an obsession.  In particular - the potential for such apps to help revitalize a music business that had become very long on the latter and very short on the former.  There's also the simple fact that in 50 years people are going to be on these little things and not big old screens anymore and therefore the internet is at the very least going to need to be reformatted.  So, start learning to program iPhone apps...</p>\r\n\r\n<p>Hey, this is hard to do yourself and really expensive if you hire someone.  Wouldn't it be cool if you could make a reusable framework for all your friends' bands so that y'all could share the cost and the rewards of such a system?  Well, if you're all sharing a mobile platform, you might as well be sharing a website platform too, since most of the stuff that's gonna be on that mobile app is going to have to live somewhere on the internet.  It'd be a lot easier to just interact with one protocol than a million, right?  If I'm not making sense, let me know.</p>\r\n\r\n<p>Well, hey if we got everyone on the same platform for their website, then we could also build in lots of features that would make those sites more interactive with the rest of the internet as a whole.  I mean, who likes posting your tour dates to your own website and then to Facebook and then to MySpace (or <a href=\"http://www.artistdata.com/us/\">paying someone to do that for you</a>)?  Raise your hand if you know <a href=\"http://ignoredbydinosaurs.com/2009/04/chapter-4-api/\">what an API is</a>, and why it's important.  Wow, it seems like 10 years ago that I wrote that.</p>\r\n\r\n<p>This was my thought process two years ago.  I'll be back.</p>", slug: "open-sourcing-the-idea", summary: "<p>So, the 14 of you that still swing by here know my backstory.  Sometime in 2003 I joined a band with a neglected website.", previous_id: 144, published: true, pub_date: "2010-05-27 17:19:59"},
  {title: "The State of Bluegrass", body: "It's a toy I've been wanting to build for a while.  I stole the domain name from Book fair and square, and have been quietly honing the skills to actually build it.\r\n\r\n<p>What I&#39;d ultimately like to have is a site that is basically a collection of all current, working bluegrass bands.  When you come to the front page, you get a list of bluegrass shows happening in your area.  It does this by roughly guessing via your IP address.  It has a list of shows in the database that it scrapes from somewhere.  I used to think Facebook would come in handy for this, but it seems to have fallen somewhat out of favor as a place that bands keep updated with their shows.  I tried Artist Data after that, but they have the most nebulous docs imaginable for the their API, which I&#39;m not even sure is open.</p>\r\n\r\n<p>So that&#39;s the big trick.  Everything else is basically - add band, enter facebook and twitter username.  It then gets bio and whatever other profile info from Facebook, whose API is somewhat open, and tweets from Twitter, whose API is way open.  Yay Twitter.</p>\r\n\r\n<p>It basically an experiment in modern web scraping.  My first.  It&#39;s built on <a href=\"http://www.sinatrarb.com/\">Sinatra</a>, for those who care.  the code lives here - <a href=\"https://github.com/JGrubb/sinatra-facebook\">https://github.com/JGrubb/sinatra-facebook</a></p>\r\n\r\n<p>Anyway, the prototype - <a href=\"http://sobg.johnnygrubb.com/\">http://sobg.johnnygrubb.com/</a></p>\r\n\r\n<p>It&#39;s easily breakable right now.</p>", slug: "state-bluegrass", summary: "    <p>It&#39;s a toy I&#39;ve been wanting to build for a while.  I stole the domain name from Book fair and square, and have been quietly honing the skills to actually build it.  </p>", previous_id: nil, published: true, pub_date: "2012-06-29 05:00:00"},
  {title: "Meta", body: "I might as well ditch this blog.  I have no idea where to start another post. Is this a technology blog?  Is this a blog about life as a musician?  Is this still my rallying cry against the music industry?  So much has gone on the last month/year/decade I don't even know where to begin.\r\n\r\nI've joined a band.  I didn't think I'd be doing that ever again.  I actually thought my career as a professional player was over.  I thought I'd seen the top of the mountain and that was that and it was time to move on into the next phase of my life, whatever that would be.  I sort of had to jump out of the last phase of my life so quickly and so definitely that I didn't have nearly the prep time I'd have liked to have had for that kind of thing.  The result?  Last year was one of the roughest of my entire life.  _The_ roughest.  \r\n\r\nThen last year's [November surprise](/2009/12/more-on-quitting-a-band/) ended up being another bass player in a band that I fit into pretty neatly.\r\n\r\nSo here I am, back from the musical dead.  I just had the most righteously good time in Big Sky MT at a bluegrass festival called Big Grass, and I'll tell you what feels the best of all - feeling like part of a musical community.  It's no secret that I'm a born-again Stringdusters fan, so I was actually nervous when half of them were standing stageside while we were getting out set going last night.  It was more an acute awareness that people were there and were listening, which is how nervousness tastes to me.  But then we got some of them up, and a few more of them up, and a KILLER time was had by all.\r\n\r\nAfterward we went back to the main lodge where everyone was staying and there was a giant picking session going on in front of the giant fireplace until about 4:15 or so when it broke up to take care of other duties.  Right about then Vince and Chad and the rest of Great American Taxi showed up.  It was just so cool to me, because the last time I saw those dudes was my last gig in CO with RRE.  It's cool to be in a band where I already know everybody, so I can relax about all that.  It's cool to be in a band where we take days off to go skiing with the lift passes that are thrown in with the gig.  It's cool to be in a band where load-in and setup takes all of 15 minutes and there are only a dozen inputs to check.  It's cool to already be up toward the top of the bill at a bunch of the festivals for which we're booked this summer.  It's cool to play bluegrass.  ", slug: "meta", summary: "I might as well ditch this blog.  I have no idea where to start another post. Is this a technology blog?  Is this a blog about life as a musician?  Is this still my rallying cry against the music industry?  So much has gone on the last month/year/decade I don't even know where to begin.\r\n\r\nI've joined a band.  I didn't think I'd be doing that ever again.  I actually thought my career as a professional player was over.  I thought I'd seen the top of the mountain and that was that and it was time to move on into the next phase of my life, whatever that would be.", previous_id: nil, published: true, pub_date: "2011-02-20 05:00:00"},
  {title: "on the tall trees crowding out the saplings", body: "Someone left this as a comment for me on Facebook (I think), something in reference to a snarky status update I made about Phish and my not really giving much of a shit about them.  I meant this in a mildly light-hearted manner, but I got more comments on it than most Railroad Earth updates get.  People get fired up about some Phish, boy!  \r\n\r\nI will admit a certain amount of aggravation at Phish, not because they haven't worked their butts off to get where they are, and not because they aren't smart and well-managed with good music to boot (to some), but for other socio-economic reasons.  Whomever posted the comment about the tall trees crowding out the saplings has a very definite point, and one that speaks to the core of the problem with the music business.  In the 5 years since Phish \"retired\" an entire festival culture managed to spring up in it's place.  I don't personally believe that Wakarusa, Bonnaroo, Rothbury, or any of the rest of them would've have been able to take root and become the ecosystem that they have without Phish's absence.  And for Phish to come back at the time that they did - with the economy already in the shitter and festivals thusly placed on shaky financial ground - seems a little bit rude to me, as a casual observer.  \r\n\r\nNow, why should Phish give a rats ass about Langerado?  They shouldn't, I suppose, because business is business.  If Phish has a superior product to whatever festival or band might otherwise get the attendance and people vote with their wallets to go to Phish, then more power to them.  Personally, I hope once this year is over and people have gotten their fix Phish either goes back to cashing checks from their investments or sees some decline in their numbers next year.  I don't care how good they are, how big they are, how hard they've worked, or how long they've been around, Phish is a Dinosaur exacerbating the issues that have essentially taken down the old way and are keeping a chosen few on life support.  They become a logo for the popular music press to feel like they've given some face-time to the \"alternative\".  They become an easy distraction for music lovers out there that would otherwise be looking for a new band, a relevant band, to follow around.  I'm not just talking about RRE.  I'm talking about every band and festival in our scene.\r\n\r\nI don't personally feel that Phish's return has impacted RRE one single bit, for better or for worse, but I do get the sense that something very big has entered our ecosystem here, and I don't want to be anywhere near it, ever.  Sorta like the T Rex in Jurassic Park...\r\n", slug: "tall-trees-crowding-out-saplings", summary: "Someone left this as a comment for me on Facebook (I think), something in reference to a snarky status update I made about Phish and my not really giving much of a shit about them.  I meant this in a mildly light-hearted manner, but I got more comments on it than most Railroad Earth updates get.  People get fired up about some Phish, boy!  \r\n\r", previous_id: nil, published: true, pub_date: "2009-08-26 15:27:00"},
  {title: " bluegrassintelligencer.com", body: "It's about time somebody told me about this site.\r\n\r\n<a href=\"http://bluegrassintelligencer.com/\">bluegrassintelligencer.com</a>.", slug: "bluegrassintelligencercom", summary: "It's about time somebody told me about this site.\r\n\r\n<a href=\"http://bluegrassintelligencer.com/\">bluegrassintelligencer.com</a>.", previous_id: nil, published: true, pub_date: "2009-06-23 00:52:59"},
  {title: "Drupal Angular tidbits -- multisite", body: "### Exposition\r\n\r\nOne of these days I'll get around to writing the post that's been in my head for 6 months now about how to get up and running with Angular in a Drupal setting.  Today is not that day, however.\r\n\r\nWhat I'd like to talk about today is a little hack that I came up with to allow me/us to maintain a single codebase to serve several different mobile apps.\r\n\r\n#### Multisite Drupal\r\n\r\nYou're likely already familiar with this concept, and it has [its proponents](https://www.acquia.com/blog/power-drupal-multi-site-part-1-code-management) and [its detractors](https://www.getpantheon.com/blog/drupal-multisite-not-enterprise-grade).  The second (anti) blog post has some good points -- it is a \"hack\" and you can paint yourself into a corner if your feature set starts to diverge between your \"sites\".  Depending upon your business case however, it can be extremely useful.  \r\n\r\nWe use this [at my day job](http://www.advantagemedia.com/) to generally good effect.  Someday there should be a blog post about the pitfalls of Features and why its siren song leads so many Drupal developers to crash their ships upon the rocky shores of circular dependencies and conflicted configurations, but this is not that post either.\r\n\r\n#### Multisite Angular (to the point)\r\n\r\nSo how do you do this with Angular?  In an Angular setup, you probably don't have any \"moving pieces\", ie - this thing is just HTML, JS, and CSS, talking to a server endpoint somewhere.  That's cool!  But it also means you don't really have the luxury of inspecting requests and setting environment variables on the server (like Drupal does it) to serve multisite.  It has to happen in the browser.  So what can you look at in the browser to set configuration for your multisite setup?\r\n\r\n__The URL, of course!__\r\n\r\n#### Angular \"config\" service\r\n\r\nI'll just drop the code.  \r\n\r\n~~~js\r\n'use strict';\r\n\r\nangular.module('mobileApp')\r\n  .factory('Config', ['$window', function($window) {\r\n    // Set up whatever variables you need here\r\n    var test = {\r\n      endpoint: 'http://testing-endpoint.com',\r\n      randomVar: 'foo'\r\n    };\r\n\r\n    var prod = {\r\n      endpoint: 'http://production-endpoint.com',\r\n      randomVar: 'bar',\r\n      otherVar: 'baz'\r\n    };\r\n\r\n    // A pointer object, basically.  Keeps things\r\n    // a little more organized\r\n    var configs = {\r\n      // production config\r\n      'production-mobileapp.com': prod,\r\n      // test config\r\n      'testing-mobileapp.com': test,\r\n      // dev config\r\n      'localhost': test\r\n    }\r\n\r\n    return {\r\n      fetch: function() {\r\n        // 'configs' object returns whatever it's holding in the \r\n\t// property with the key of 'window.location.hostname', \r\n\t// which in this case is our config for this \"site\"\r\n        var config = configs[$window.location.hostname];\r\n        \r\n        // Maybe you have some special snowflakes still\r\n        // This can help you keep the divergence in check\r\n        config.otherVar = config.otherVar || config.randomVar;\r\n  \r\n\r\n        return config;\r\n      }\r\n    }\r\n\r\n  }]);\r\n~~~\r\n\r\nIn the module that needs to know this stuff, you just pass in `Config` as a dependency and call `fetch()` on it.\r\n\r\n~~~js\r\nvar siteVars = Config.fetch();\r\n~~~\r\n\r\nWe use this setup to specify, for instance, the path to site specific CSS, or site specific DFP ad tag configuration.\r\n\r\n~~~js\r\n// In mainController.js, or wherever it makes sense\r\n\r\nvar stylePath = \"/sites/\" + siteVars.randomVar + \"/styles.css\"\r\n~~~\r\n\r\nAnd then that gets referenced in the head of the doc\r\n\r\n~~~html\r\n<link rel=\"stylesheet\" ng-href=\"{{ stylePath }}\">\r\n~~~\r\n\r\nA hack?  Yes.  I've built two fairly large apps with this approach and have yet to paint myself into a corner though, so it's a fairly useful and rather robust hack, IMHO.", slug: "drupal-angular-tidbits-multisite", summary: "", previous_id: nil, published: true, pub_date: "2014-08-24 13:57:10"},
  {title: "Anybody wanna pile on Apple? You, there!", body: "For those of you following along at home, here's <a href=\"http://calacanis.com/2009/08/08/the-case-against-apple-in-five-parts/\">The Case Against Apple–in Five Parts</a>.  It's a broader version of my \"<a href=\"http://ignoredByDinosaurs.com/category/iphone/\">Phases of iPhone Ownership</a>\".  Enjoy.\r\n\r\n<!--break-->\r\n\r\n<div><br><p>=>Reprinted with permission from <a href=\"http://calacanis.com/\">Jason Calacanis</a>, CEO of <a href=\"http://www.mahalo.com/\">Mahalo.com</a> and co-founder of the <a href=\"http://calacanis.com/www.techcrunch50.com\">TechCrunch50.com</a> conference taking place on September 14-15th in San Francisco.\r\n\r\n<br><p>About six years and $20,000 ago, I made the switch to Apple products after a 20-year love affair with Microsoft. That love affair started with the humble PCjr and ended with an IBM ThinkPad. From DOS to the first version of Windows (the run-time version that only loaded one program), and on to Windows 95 and XP, I dealt with the viruses, driver incompatibilities and other assorted quirks of Microsoft’s wildly open ecosystem.</p>\r\n<p>It sucked to have to buy anti-virus software and reinstall Windows every 12 months, so moving to Apple’s rock-solid and virus-free OS was, in a word, delightful.</p>\r\n<p>Sure, everything on the Mac platform costs twice as much, but considering the fact that my entire career centers around a desktop connected to the Internet, it really doesn’t matter if I spend $2 a day or $20 a day for my hardware. I replace everything at about a two-year pace (i.e. phone, MP3 player, desktop and laptop). So, at $10 a day, what some folks spend on Starbucks, I have a two year budget of $7,500 for my gear. In fact, the only things I don’t replace every two years are my 30″ and 24″ Dell Monitors, which I tend to keep for five years.</p>\r\n<p>Over the last 12-18 months, my love affair with Apple has waned. Steve Jobs’ peculiar, rigidly closed, and severe worldview have started to cramp my style. It’s not entirely Steve’s fault, as Apple’s style and grace are a large part of what drew me to the platform initially. My collection of Mac products now includes seven iPods ($1,500), four Mac laptops ($8,000), two Airports ($500), a Time Capsule ($500), two Mac towers ($4,000), a Mac Mini ($600), two iMacs ($4,000) and all three iPhones ($1,500).</p>\r\n<p>The cost of these items is just over $20,000, or about $3,300 a year. That’s almost exactly $10 a day–what I budget for technology in my life. Half of that is personal, half of that is probably business. While I know I am a high-end consumer, since I do this for a living, I think there are many folks putting $5-10 a day toward hardware. Blogger Robert Scoble of RackSpace must spend $20 a day and Leo Laporte of This Week in Tech must spend $40 a day!</p>\r\n<p>Key Point 1: For the past six years, if Steve makes something, I buy it. Sometimes, I buy two (one for my wife).</p>\r\n<p>Key Point 2: I over-pay for Apple products because I perceive them to be better (i.e. Windows-based hardware is 30-50% less–but at 38 years old I don’t care).</p>\r\n<p>The Love Affair Ends<br>\r\n===================<br>\r\nSteve’s a great guy, and the love affair has been wonderful, but I’m starting to look past him and back to Microsoft for a more healthy relationship that is less–wait for it–anti-competitive in nature.</p>\r\n<p>Years and years after Microsoft’s antitrust headlines, Apple is now the anti-competitive monster that Jobs rallied us against in the infamous 1984 commercial. Steve Jobs is the oppressive man on the jumbotron and the Olympian carrying the hammer is the open-source movement</p>\r\n<p>For folks in the tech industry, this is not a new discussion. Another radical visionary, Steve Gillmor, has been hosting this discussion since Apple’s draconian iTunes updates led smart people to *downgrade* their software. Think about that mind bomb for a second: people downgrading their software to maintain their freedoms–is this a William Gibson novel?</p>\r\n<p>Steve Jobs is on the cusp of devolving from the visionary radical we all love to a sad, old hypocrite and control freak–a sellout of epic proportions.*</p>\r\n<p>[ * Important Note: I've written this piece three times over the past year and never released it. It felt like releasing something like this about a personal hero when they were, according to all counts, dying was too harsh. With Steve back to work and healthy for what will probably be his last five to ten years of full-time work (based on when most folks retire), I feel obligated to let this out. I know many folks in the industry are saddened to see our LSD-taking, radical free-thinking and fight the power hero, turning to the Dark Side. This note is written from a place of admiration and love.   ]</p>\r\n<p>The Case, The Five Parts<br>\r\n===================<br>\r\nI’d like to discuss four major issues around Apple’s current product line that I believe are stifling the industry, consumer choice and pricing. Instead of just giving a simple solution to the problem, I thought long and hard about the opportunities for Apple to be less controlling and more open. For example, if the iPhone was available on more carriers, Apple would sell many, many more units, which would inevitably lead to people switching from Windows desktops to Macs (which is what happened with the iPod).</p>\r\n<p>Bottom line: Of all the companies in the United States that could possibly be considered for anti-trust action, Apple is the lead candidate. The US Government, however, seems to be obsessed with Microsoft for legacy reasons and Google for privacy reasons.</p>\r\n<p>The truth is, Google has absolutely no lock-in, collusion or choice issues like Apple’s, and the Internet taught Microsoft long ago that open is better than closed.</p>\r\n<p>Let’s look at the case against, and the opportunities for, Apple:</p>\r\n<p>1. Destroying MP3 player innovation through anti-competitive practices<br>\r\n——————————————————–<br>\r\nThere is no technical reason why the iTunes ecosystem shouldn’t allow the ability to sync with any MP3 player (in fact, iTunes did support other players once upon a time), save furthering Apple’s dominance with their own over-priced players. Quickly answer the following question: who are the number two and three MP3 players in the market? Exactly. Most folks can’t name one, let alone two, brands of MP3 players.</p>\r\n<p>On my trips to Japan, China and Korea over the past couple of years, I made it a point to visit the consumer electronics marketplaces like Akihabira. They are filled with not dozens, but hundreds, of MP3 players. They are cheap, feature-rich and open in nature. They have TV tuners, high-end audio recorders, radio tuners, dual-headphone jacks built-in and any number of innovations that the iPod does not. You simply will not see those here because of Apple’s inexcusable lack of openness.</p>\r\n<p>Not only does Apple not build in a simple API to attach devices to iTunes, they actually fight technically and legally block people from building tools to make iTunes more compatible.</p>\r\n<p>Think for a moment about what your reaction would be if Microsoft made the Zune the only MP3 player compatible with Windows. There would be 4chan riots, denial of service attacks and Digg’s front page would be plastered with pundit editorials claiming Bill Gates and Steve Ballmer were Borg.</p>\r\n<p>Why, then, does Steve Jobs get a pass?</p>\r\n<p>Steve Jobs gets a pass because we are all enabling him to be a jerk. We buy the products and we say nothing when our rights are stripped away. We’ve been seduced by Steve Jobs: he lifts another shiny object over his head with a new eco-friendly feature and we all melt like screaming schoolgirls at Shea Stadium in ‘65.</p>\r\n<p>Simple solution and opportunity: An iTunes API which allows the attachment of any mass storage device,not just a short list of players that jumped through Apple’s hoops. If need be, perhaps consumers pay a simple licensing fee of $1-5 a unit to attach a non-Apple MP3 player to iTunes (i.e. pure profit for Apple).</p>\r\n<p>2. Monopolistic practices in telecommunications<br>\r\n——————————————————–<br>\r\nApple’s iPhone is a revolutionary product that has devolved almost all of the progress made in cracking–wait for it–AT&T’s monoply in the ’70s and ’80s. We broke up the Bell Phone only to have it put back together by the iPhone. Telecommunications choice is gone for Apple users. If you buy an Apple and want to have a seemless experience with your iPhone, you must get in bed with AT&T, and as we like to say in the technology space, ‘AT&T is the suck.’</p>\r\n<p>Simple solution and opportunity: Not only let the iPhone work on any carrier, but put *two* SIM card slots on the iPhone and let users set which applications use which services. (Your phone could be Verizon and your browser Sprint!) Imagine having two SIM cards with 3G that were able to bond together to perform superfast uploads and downloads to YouTube.</p>\r\n<p>3. Draconian App Store policies that are, frankly, insulting<br>\r\n——————————————————–<br>\r\nLike lemmings, we fell for your bar charts extolling the openness of the iPhone App platform and its massive array of applications. We over-paid for your phone–which you render obsolete every 13 months, like clockwork–and then signed our lives away to AT&T. The way you pay us back is by becoming the thought police, deciding what applications we can consume on the device we over-paid for!</p>\r\n<p>Yes, every application on the phone has to approved by Apple, and if you were interested in something adult in nature…well…you can’t do that.</p>\r\n<p>Apple’s justification for this nonsense is that they have to protect AT&T’s network. Oh really? Aren’t there dozens and dozen of open phones on everyone’s network? The network hasn’t crashed yet, and even if someone did create a malicious iPhone application, you would know EXACTLY who was running the application and be able to block and/or turn off their phone. The network was MADE to deal with these issues on a NETWORK level. To say you have to control people down to the application level defies all logic. A second year CS student understands this.</p>\r\n<p>Who in their right mind feels the need to control the application-level anyway? It’s absurd.</p>\r\n<p>Imagine for a moment if every application on Windows Mobile or Windows XP had to be approved by Microsoft–how would you react? Exactly. Once again we’ve enabled Steve Jobs’ insane control freak tendencies. This relationship is beyond disfunctional–we are co-dependent.</p>\r\n<p>Simple solution: Apple could have a basic system setting that says ‘Allow Non-Approved Applications.’ When you click this setting, a popup could come on warning that, if you click this setting, you are waiving your previously-understood customer service arrangement (i.e. only people with approved applications can hand over their money at the Genius bar).</p>\r\n<p>4. Being a horrible hypocrite by banning other browsers on the iPhone<br>\r\n——————————————————–<br>\r\nOpera is a fantastic browser built by a company in Oslo, Norway. In fact, a decade ago, I had a speaking gig there and got to interview the CEO of the company for Silicon Alley Reporter. (Sidebar: Man, do I miss being a journalist. I wish I could split 50% of my time being a journalist and 50% of my time being a CEO.) For over a decade, Opera has been making lighting-fast, lightweight and quirky browsers. Long before Apple launched Safari, with the goal of designing the fastest browswer on the Web, Opera was already there.</p>\r\n<p>Opera’s mobile browsers are ‘full of WIN,’ as the kids like to say these days. If you’re a Windows Mobile or Blackberry user, you’ve probably downloaded them and enjoyed their WINness. The company started an iPhone browser project but gave up when faced with Apple’s absurd and unclear mandate to developers: Don’t create services which duplicate the functionality of Apple’s own software. In other words: ‘Don’t compete with us or we will not let you in the game.’</p>\r\n<p>The irony of this is not lost on anyone who had a computer before they had an Internet connection. Apple was more than willing to pile on after Microsoft’s disasterous inclusion of Internet Explorer with Windows. In fact, what Apple is doing is 100x worse than what Microsoft did. You see, Microsoft simply included their browser in Windows, still allowing other browsers to be installed. In Apple’s case, they are not only bundling their browser with the iPhone, but they are BLOCKING other browsers from being installed.</p>\r\n<p>Simple solution and opportunity: Don’t be a control freak and hypocrite. Allow people to pick their browser; the competition to make a better browser will increase the overall use of iPhones and mobile data services.</p>\r\n<p>5. Blocking the Google Voice Application on the iPhone<br>\r\n——————————————————–<br>\r\nApple took Google’s innovative and absurdly priced phone offering, Google Voice, out of the App Store and is currently being investigated by the FCC for this action. This point is similar to the browser issue, in that Apple wants to own almost every extension of the iPhone platform. How long before Apple decides to ban a Twitter client in favor of an Apple Twitter-like product? Seems crazy, I know, but by following Apple’s logic you should not be able to use Firefox or Google Chrome on your desktop.</p>\r\n<p>Simple solution and opportunity: Let people have three or four phone services coming in to their iPhones and perhaps charge a modest licensing fee for those types of service. Or, just simply stop being jerks and let the free market decide how to use the data services they’ve BOUGHT AND PAID FOR. That’s the joke of this: you’re paying for the data services that Apple is blocking. You pay for the bandwidth and Apple doesn’t let you use it because, you know, they know better than you how you should consume your data minutes.</p>\r\n<p>In Summary<br>\r\n——————————————————–<br>\r\nI’m not a huge fan of government involvement in business, so I would rather see Apple resolve these issues for themselves.</p>\r\n<p>In fact, I believe many forces are already at work, with Michael Arrington of TechCrunch and Peter Rojas of GDGT.com (and founder of Engadget) coming out publicly against these very issues. Neither of these two individuals will use an iPhone *specifically* because it is incompatible with their lives.</p>\r\n<p>Apple will face a user revolt in the coming years based upon Microsoft, Google and other yet-to-be-formed companies, undercutting their core markets with cheap, stable and open devices. Apple’s legendary comeback ability will be for naught if they don’t deeply examine their anti-competitive nature.</p>\r\n<p>Making great products does not absolve you from technology’s cardinal rule: Don’t be evil.</p>\r\n<p>It also doesn’t save you from Scarface’s cardinal rule: Never get high on your own supply.</p>\r\n<p>Questions:</p>\r\n<p>1. Do you think Apple would be more, or less, successful if they adopted a more open strategy (i.e. allowing other MP3 players in iTunes)?</p>\r\n<p>2. Do you think Apple should face serious antitrust action?</p>\r\n<p>3. Do you think Apple’s dexterity and competence forgive their bad behavior?</p>\r\n<p>all the best,</p>\r\n<p>Jason</p>\r\n\r\n\r\n\r\n<p>(Via <a href=\"http://calacanis.com\">The Jason Calacanis Weblog</a>.)</p>", slug: "anybody-wanna-pile-apple-you-there", summary: "For those of you following along at home, here's <a href=\"http://calacanis.com/2009/08/08/the-case-against-apple-in-five-parts/\">The Case Against Apple–in Five Parts</a>.  It's a broader version of my \"<a href=\"http://ignoredByDinosaurs.com/category/iphone/\">Phases of iPhone Ownership</a>\".  Enjoy.\r\n\r\n", previous_id: nil, published: true, pub_date: "2009-08-09 03:17:27"},
  {title: "On Beta \"invites\"", body: "This is currently in regards to the Atom editor that I dutifully filled out an \"invite\" request for.  It could be about anything, though.  I get this same feeling every time.\r\n\r\nIt takes me right back to high school gym class and waiting to get picked for a team.  And waiting.  And waiting.  And God this is embarrassing, will somebody please fucking pick me already?\r\n\r\n---\r\n\r\nThis is a piece of software that you install on your computer.  Not a Saas thing that'll buckle under the weight of too many users.  I thought Mailbox actually did a pretty cool thing by providing that countdown that gave you all the visibility you really needed into the process, and removed that feeling from the waiting.  \r\n\r\nAnd waiting.  \r\n\r\nAnd waiting.\r\n", slug: "on-beta-invites", summary: "", previous_id: nil, published: true, pub_date: "2014-02-28 19:39:54"},
  {title: "Building a mobile app with Drupal and Angular (part 1)", body: "### The beginning\r\n\r\nI'll make the \"what is Angular\" part as brief as possible.  \r\n\r\nAngular is a giant JavaScript framework from our friends at Google.  It fits into a similar camp with Backbone, a framework that Drupalists will likely have heard of since it's included in D8 core.  Angular aims to make it as easy as possible to build a single page CRUD app, and in my limited experience it succeeds.\r\n\r\nI've never built anything with Backbone, but have the Peepcode series on it, and have been working heavily with Rails for a good while now.  I'll avert a gush on Rails for the time being, but let's just say I really love the way that Rails doesn't really write any markup for you.  It's much simpler to find your way through the request/response path, and in general I find developing with Rails to be a vastly more pleasant experience than developing with Drupal.\r\n\r\nAlas, I've been a professional Drupal dev for about 4 years now.  \r\n\r\n### The use case\r\n\r\nI work at a publishing company.  We publish about 26 different pubs, many of them still in print.  Within the last year we finished a migration of all of our websites from various proprietary CMSs into a Drupal 7 multisite installation.  The sites support desktop only at this point as we are a small company and resources are definitely constrained.  (This also has it's upsides which we'll get to).\r\n\r\nLast fall we rebuilt the [company website](http://www.advantagemedia.com/) from a static HTML site into Drupal 7.  Since this was not a part of the multisite install, we were allowed to architect the site from scratch with my boss doing all the site building and myself doing all the theming.  Mobile was a big priority this time, so I spent a good chunk of the development cycle implementing mobile-friendly behavior and presentation and generally getting a good feel for how to really do a responsive site.  As an aside, for mobile/responsive site building and crafting responsive stylesheets, less is definitely more.\r\n\r\nThe end of this winter has brought a time table for offering a more accommodating mobile experience on our \"brand sites\".\r\n\r\n### The dream\r\n\r\nSo my boss and his boss want a mobile site like \"The financial Times has\".  If you have an iOS device, go to [app.ft.com](app.ft.com), and if you're a Drupal developer, try and get your head around how you'd pull that off, but try and forget that this is a post/series about Angular first.  Pretend that you were going to try and pull that off in a more or less responsive fashion.\r\n\r\nI spent a couple of days surveying the landscape for JS libraries that help out with touch behavior, and trying to figure out how to prefetch content so that when the user swipes from page to page or section to section, there wouldn't be a giant delay while the network does its thing transferring 1,000 lbs. of panels-driven markup.  This was Monday and Tuesday of last week.\r\n\r\n### A pause for reflection\r\n\r\nMy enthusiasm for the project already waning, I sat back and though about how we ought to be doing this thing.  What they want is a mobile app, not a responsive website. \r\n\r\nThe way that you implement a mobile app is not by loading a page of HTML markup with every user action, it's by loading the app once and then communicating with the server via JSON (or XML or whatever if you wanna get pedantic).  This kind of thing is supremely easy to do with Rails mainly due to Rails's deep embrace of Rest 6 years ago totally getting ahead of, perhaps even enabling, this whole javascript app revolution in which we find ourselves.  Outputting a particular resource as JSON is as simple a line of extra code to allow the controller to respond to a request with a different format.\r\n\r\n### Step 1, Services\r\n\r\nI'd never played with [Services](https://drupal.org/project/services), so I didn't know how easy it was to output a node as JSON.  On Wednesday of last week, some time after lunch, I decided to find out.  Turned out we already had Services installed for another use case that we just recently implemented (offloading our Feeds module aggregation to another open source project called Mule, but that's a whole other series of posts), so all I had to do was bumble through a tutorial on how to set up a Node endpoint.\r\n\r\nIn less that 5 minutes I had exactly what I needed set up in terms of dumping a node to JSON.  I've been reading Lullabot's recent posts about their use of Angular, so the rest of this series will follow along as I learn how to use this giant beast of a JS framework to build the mobile app my boss' boss wants without a minimum of Drupal hackery.\r\n\r\nThe next post will pick up Thursday morning (as in, 6 days ago) where I first downloaded Angular into the project.", slug: "building-a-mobile-app-with-drupal-and-angular-part-1", summary: "The beginning of an X-part series on how to build a mobile app on top of Drupal using AngularJS.", previous_id: nil, published: true, pub_date: "2014-03-12 15:07:54"},
  {title: "Dear Dennis", body: "Hey Dennis, I became a first time WNCW member during the Gospel Truth a few weeks ago.  It really is a different feeling you get listening to a radio station that you're helping to support, but that's not my point...\r\n\r\nI moved up to New Jersey for the Railroad Earth gig a very long time ago now, but I'm an App State alumni, class of 2001.  I've been trying to get back down to somewhere in the NCW listening area ever since but despite my best efforts, me and my family have gone and grown roots up here.  I don't know if I'll ever make it back down there, and that makes me sad.\r\n\r\nBut lately, I've been listening to Goin Across the Mt every weekend on some NPR app on my phone and hearing your voice makes me a little less sad, so thank you.", slug: "an-open-letter-to-dennis", summary: "", previous_id: nil, published: true, pub_date: "2014-03-15 19:27:40"},
  {title: "How to test meta tags with CasperJS", body: "> Hi, this post is wildly out of date.  I tried to follow it to set up some test within the last year and none of this stuff actually worked.  The concepts are likely still valid, but don't expect to be able to copy much.\r\n\r\njg - Oct 2015\r\n\r\n---\r\n\r\n<p>I went down to Drupaldelphia (the name should be self-explanatory) a couple weeks ago mainly for a session called &quot;Testing your site with CasperJS&quot;.  <a href=\"http://casperjs.org/index.html\">CasperJS</a> is what&#39;s known as a &quot;headless&quot; Webkit testing framework.  That means it&#39;s essentially a browser and can click around your site, fill out forms, test validation, etc.  It&#39;s pretty much exactly what I&#39;ve been looking for for one of my clients for a while now.  I knew they were out there, but there&#39;s nothing like having something shown to you for an hour to really help you get your head around it.</p>\r\n\r\n<p>So I came home and immediately went to work trying to figure out how to use it.</p>\r\n\r\n<p>I have an assignment right now from a client to reorganize their website per instructions from their SEO vendor.  It&#39;s about 10 or 12 little, tiny changes to about 50 pages.  Most of the changes involve redoing their URLs, splitting content up, updating meta tags, page titles, and the like.  The pattern for the updates is completely repetitive, but altogether we&#39;re talking about 500 or so changes to a Drupal site, which means it&#39;s going to be me sitting there typing all of this stuff into a web page edit form.  I will screw up.  I wont know it until somebody sends an email yelling at me.  Enter Casper.</p>\r\n\r\n<p>Casper is a Javascript tool.  You can also use Coffeescript.</p>\r\n\r\n<p>The tricky thing about Casper is that it basically has two scopes.  One is the testing environment in which you write most of your code, and the other is the actual page environment, where the actual markup you might want to test is.  Casper has a host of functions that all center around one called <a href=\"http://casperjs.org/api.html#casper.evaluate\" title=\"API documentation | CasperJS 1.0.0-RC1\">Casper.evaluate()</a>.  Code executed here in executed in the browser window context/scope.</p>\r\n\r\n<p>I had a hell of a time trying to figure out how to test the meta tag for these pages.  I knew I wanted to set up an array for the 25 different states =</p>\r\n\r\n<script src=\"https://gist.github.com/4055287.js?file=gistfile1.coffee\"></script>\r\n\r\n<p>A few utility functions to help out - </p>\r\n\r\n<script src=\"https://gist.github.com/4055293.js?file=gistfile1.coffee\"></script>\r\n\r\n<p>The base url = <code>url = &quot;http://example.com&quot;</code></p>\r\n\r\n<p>Create an instance of Casper. <code>casper  = require(&#39;casper&#39;).create()</code></p>\r\n\r\n<p>I&#39;ll plop the code first and explain after.</p>\r\n\r\n<script src=\"https://gist.github.com/4055294.js?file=gistfile1.coffee\"></script>\r\n\r\n<p>The first line <code>casper.start()</code> obviously starts the test.  <code>each</code> is a method which will look familiar if you work with any modern OO languages.  It iterates over an array.  The array in this case is <code>states</code>.  <code>self</code> is the Casper instance, and <code>state</code> is the name of the current member of the array we&#39;re testing.</p>\r\n\r\n<p>Most of this is pretty standard Casper 101.  The more interesting stuff is about halfway down.  </p>\r\n\r\n<script src=\"https://gist.github.com/4055298.js?file=gistfile1.coffee\"></script>\r\n\r\n<p><code>@evaluate</code> drops us into the actual page context.  There we can operate on what&#39;s in the DOM, as well as things that appear as a result of actions in the DOM.  The contents of that function make a selection from one select box.  The value of that select box determines what gets returned from a jQuery Ajax call.  The return of that Ajax call populates another select box.  Ajax 101, but we&#39;re testing, automatically, 25 pages here!  You have to use legit javascript unless you can figure out how to get jQuery into this context.  I haven&#39;t figured it out yet because actually learning core JS is something I need to do more of.</p>\r\n\r\n<p>After that all happens we drop back into the DOM again to make sure that there are more than one option in the second select box.  </p>\r\n\r\n<h3>Finally - Meta tags</h3>\r\n\r\n<p>Sorry.  So I&#39;m kinda new to JS and function scope gave me a time on this one.  The main problem I was having was trying to get a piece of text that could only be found in the DOM scope back into <code>Casper.each()</code> scope so I could run some sort of <code>assert()</code> on it.  Turns out it was really easy after several days of passive Googling.</p>\r\n\r\n<script src=\"https://gist.github.com/4055299.js?file=gistfile1.coffee\"></script>\r\n\r\n<p>So this drops back into the DOM and pulls out the contents of the Description meta tag and assigns it to the var <code>descrip</code>.  Then all you have to do is a simple <code>assertEquals()</code></p>\r\n\r\n<script src=\"https://gist.github.com/4055301.js?file=gistfile1.coffee\"></script>\r\n\r\n<p>Presto.</p>\r\n\r\n<h3>The entire test</h3>\r\n\r\n<script src=\"https://gist.github.com/4055302.js?file=gistfile1.coffee\"></script>\r\n", slug: "how-test-meta-tags-casperjs", summary: "    <p>I went down to Drupaldelphia (the name should be self-explanatory) a couple weeks ago mainly for a session called &quot;Testing your site with CasperJS&quot;.  <a href=\"http://casperjs.org/index.html\">CasperJS</a> is what&#39;s known as a &quot;headless&quot; Webkit testing framework.  That means it&#39;s essentially a browser and can click around your site, fill out forms, test validation, etc.  It&#39;s pretty much exactly what I&#39;ve been looking for for one of my clients for a while now.", previous_id: nil, published: true, pub_date: "2012-07-03 05:00:00"},
  {title: "On Miles", body: "I was always more of a Miles Davis man.  I guess what I'm comparing it to is perhaps if someone were a Coltrane man.  I'm not sure why you need to pick one or the other, hell you could like them both as much as you want, it's just that Miles' style always spoke to me so much more.  His was so understated whereas the style that Coltrane made famous was one that seems to be embraced and expounded upon by many many legions of jambands, rock bands, jazz fusion bands, etc.  Anyone that really liked a long jam with sheets and sheets of notes from the soloist.  Not that Miles wasn't into big long jams either, but the period of his that is my favorite is somewhere between 1958 and 1965...\r\n\r\n1958 actually saw him in a marvelous quartet with the aforementioned Mr. John Coltrane.  Personally this is my favorite period of either artist.  My all time favorite jazz record is one called \"Relaxin with the Miles Davis Quintet\".  There's a tune on there called \"You're My Everything\" that is one of the most beautiful things I've ever heard.  The piano player, Red Garland, starts the tune after Miles calls it (this is one of the four albums that Miles cut on the same day, there's lots of rough edges which is part of what I love about it.  They keep a lot of the studio chatter on the master).  Miles cuts him off and tells him to play it completely differently, which Red does with hardly a pause.  It's heartbreaking.  Coltrane's solo still gives me goosebumps after listening to this album for almost 15 years now.\r\n\r\nAnother amazing Coltrane solo is his from \"Blue on Green\" from Kind of Blue.  I'm not a guy who ever sat around and really got off on other people's solos, but these two are very much worth checking out if you don't already own the recordings.\r\n\r\n1965 saw Miles putting together his second \"great\" quintet.  This is the one with a young Herbie Hancock, Ron Carter on the bass, Wayne Shorter on the sax and an 18 year old Tony Williams on the kit.  My personal favorite tune of theirs is called \"Madness\" from the album Nefertiti.  Miles was starting to get more than a little out there by this point.  He was breaking down the traditional walls of form that he'd begun taking out with Kind of Blue.   The level of talent and drive of this quintet took it way beyond where he was able to go with Cannonball and Bill Evans.  I'm not really sure there is a form to the tune Madness, but it's worth a listen.  I never consciously realized this in college, or even until recently, but Tony Williams doesn't touch a damn thing on his kit except the ride cymbal for the entire tune.  If any jazz student out there wants to know what it sounds like to \"swing\", start here.  Most of the tune after the head is Tony's ride and Ron Carter's bass, swinging like a wrecking ball.  The solos are nice, but what really kills me about how powerful this tune is is all the space, and how ballsy it is to leave so much of it there.  Believe me, leaving space is way harder than filling it up, but it <strong>always</strong> leaves the listener more satisfied.  Hearing this tune again this morning for the first time in a while reminds me of that and makes me wonder if I'm not in the wrong band sometimes...", slug: "on-miles", summary: "I was always more of a Miles Davis man.  I guess what I'm comparing it to is perhaps if someone were a Coltrane man.  I'm not sure why you need to pick one or the other, hell you could like them both as much as you want, it's just that Miles' style always spoke to me so much more.  His was so understated whereas the style that Coltrane made famous was one that seems to be embraced and expounded upon by many many legions of jambands, rock bands, jazz fusion bands, etc.  Anyone that really liked a long jam with sheets and sheets of notes from the soloist.", previous_id: nil, published: true, pub_date: "2009-05-18 23:24:30"},
  {title: "Weaning off of jQuery animations with CSS Transitions", body: "I've recently finished up a project here at the job that gave me a blank check as far as writing the front end code was concerned.  It was among the most blissful Drupal projects I've ever worked on, as my boss did all of the Drupal stuff, and I wrote all the code.  It was heaven.  \r\n\r\nSo, there were a lot of requests for some cool javascript features, and rather than reaching for the plugin drawer, I decided to write most of them from scratch.  The main feature pages are mostly [like this](http://www.advantagemedia.com/brands/electronic-component-news).  The left hand \"scrollspy\" navigation was ripped off from Twitter's Bootstrap UI library, and (imho) warrants it's own write up, as it's some of the coolest code I've written yet.  \r\n\r\nMost of the moving features on the site, especially the left nav when activated and the contact tab flyout thingy were written initially using jQuery to animate positioning and display properties on the DOM elements themselves.  \"60 fps\" is the battle cry of the UI engineer this month though, so I thought I'd try a few new tricks, namely swapping out those jQuery animations for CSS transitions.  Turns out this is insanely easy, requires way less code than the previous alternative, and will outperform the JS implementation any day of the week.\r\n\r\n~~~js\r\nvar ABM = window.ABM || {};\r\nABM.contactFlyout = {};\r\n \r\nABM.contactFlyout = (function() {\r\n \r\n  var $ = window.jQuery;\r\n \r\n \r\n  var cloneContacts = function() {\r\n    // Clones the contacts div, which already exists on the page,\r\n    // attaches the copy to the page elsewhere where it can be \r\n    // persistent, and slid out with a toggle.\r\n  };\r\n \r\n  var attachToggle = function() {\r\n    $flyout = $('#flyout-wrapper');\r\n    $('#toggle', $flyout).on('click autoFlyout', function() {\r\n      var posY = ($flyout.hasClass('open')) ? -670 : 0;\r\n      var winWidth = $(window).width();\r\n      $flyout.animate({\r\n        right: posY\r\n      }, 350);\r\n      $flyout.toggleClass('open');\r\n      $(this).toggleClass('open');\r\n    });\r\n  }\r\n \r\n  var flyoutFlash = function() {\r\n    // A thing Marketing wanted where the flyout would popout if you'd never\r\n    // visited this page before, determined by a cookie.\r\n  }\r\n \r\n  // positions the contact flyout\r\n  var makeSticky = function() {\r\n    // SSIA\r\n  }\r\n \r\n  return {\r\n    init: function() {\r\n      if ($('.lt-ie9').length) return;\r\n      cloneContacts();\r\n      attachToggle();\r\n      setInterval(makeSticky, 250);\r\n      var cookieRE = /flyout/;\r\n      if (!cookieRE.test(document.cookie)) {\r\n        flyoutFlash();\r\n        document.cookie = 'flyout=flown';\r\n      }\r\n    }\r\n  }\r\n \r\n})();\r\n~~~\r\n\r\n*The initial implementation.*\r\n\r\nSo, obviously, the meat of the animation is in that attachToggle() method, which is totally poorly named and I'll refactor that right after I finish writing this.  But, it just animates the positioning of that whole div, totally simple, right?  So the only thing that's animating the is \"right\" property of that div, maybe we should try a CSS transform on that instead?\r\n\r\nTurns out all that involves is removing that animation bit so it looks like this -- \r\n\r\n~~~js\r\n  var attachToggle = function() {\r\n    $flyout = $('#flyout-wrapper');\r\n    $('#toggle', $flyout).on('click autoFlyout', function() {\r\n      $flyout.toggleClass('open');\r\n      $(this).toggleClass('open');\r\n    });\r\n  }\r\n~~~\r\n\r\nAnd then the stylesheet for that div goes from this --\r\n\r\n~~~sass\r\n#flyout-wrapper\r\n  position: fixed\r\n  width: 700px\r\n  right: -670px\r\n  top: 20px\r\n  z-index: 3\r\n~~~\r\n\r\nTo this --\r\n\r\n~~~sass\r\n#flyout-wrapper\r\n  position: fixed\r\n  width: 700px\r\n  right: -670px\r\n  top: 20px\r\n  z-index: 3\r\n  transition: right .5s\r\n  &.open\r\n    right: 0\r\n~~~\r\n\r\nYeah.  Seriously.  Instead of animating whole element, try just adding a class to it - the after state - and animate the in between with CSS.  I did the same thing with the left nav dropdown bit.  The whole page is a lot smoother now and I'm going to rework the main nav as soon as feasible.\r\n\r\n#### Edit\r\n\r\nIf you're animating the position of something, say a `#page-wrap` element for an off-canvas menu, and it should present in a \"normal\" state when not activated, you still have to specify the default positioning (ie. `left: 0`), or the transition **will not work**.  Just wasted too much time figuring out why my off canvas nav wasn't working like I wanted it to.", slug: "weaning-jquery-animations-css-transitions", summary: "I've recently finished up a project here at the job that gave me a blank check as far as writing the front end code was concerned.  It was among the most blissful Drupal projects I've ever worked on, as my boss did all of the Drupal stuff, and I wrote all the code.  It was heaven.  \r\n\r\nSo, there were a lot of requests for some cool javascript features, and rather than reaching for the plugin drawer, I decided to write most of them from scratch.  The main feature pages are mostly [like this](http://www.advantagemedia.com/brands/electronic-component-news).", previous_id: nil, published: true, pub_date: "2013-12-09 21:30:21"},
  {title: "Chapter 4 - The API", body: "Facebook made <a title=\"FBDevLink\" href=\"http://developers.facebook.com/news.php?blog=1&amp;story=225\" target=\"_blank\">this announcement yesterday</a> through the Developers section of their site:\r\n\r\n<blockquote>Today we are excited to announce an important step toward greater openness through Facebook Platform. For the first time, we're opening the core Facebook product experience -- the <a href=\"http://blog.facebook.com/blog.php?post=57822962130\"><em>stream</em></a> -- with the new Facebook Open Stream API.</blockquote>\r\n\r\nWhat this says to me is that Twitter is having a major impact on the evolution of the internet right now, namely in the heat they're putting on Facebook to innovate.\r\n\r\nNow, the close up view of Twitter and Facebook looks pretty similar.  Facebook is a place where people can make their own little website and stash pictures there to show their friends, etc., but the real innovation of Facebook has been to tap into the collective ADD of humanity and provide a place where you can tell people what you're doing and read about what they're doing, in small chunks.  Twitter is a place where you can tap into the collective ADD of humanity and tell people what you're doing and read about what they're doing in small chunks, but the real innovation of Twitter is their API.\r\n\r\nAn API (<a href=\"http://en.wikipedia.org/wiki/API\">Application Programming Interface</a>) is basically the software equivalent to a door into your application.  The 3rd party developer is then able to write his own application that uses that door to do stuff with the application (or it's data) on the other side.  It's cool.  It's what takes your application from being more or less a mute, single-celled organism to one that all the sudden can speak with others and communicate.  That's why there are so many Twitter clients coming out all the time.  Twitter on it's own is cool, if a bit mundane, but that they've opened the system to others to make more fun/valuable for them is why they are changing the world right now.\r\n\r\nFacebook is paying close attention.  They've kept lean and innovative where MySpace went bloated and corporate, but they've always preferred the closed ecosystem approach.  All those applications that people continually send you are cool and all, but they force the developer to work within the confines of FB rules if you want to interact with the stuff that's going on within their walls.  And there is an unfathomable amount of stuff going on within their walls.  Think what you could do if you could break out all those people talking to each other, all those people posting photos, all those people connecting over similar interests or old school ties and start figuring out new ways to play with all that.  The possibilities make Twitter look like a drop in the bucket...\r\n\r\n<em>\r\n</em>", slug: "chapter-4-api", summary: "Facebook made <a title=\"FBDevLink\" href=\"http://developers.facebook.com/news.php?blog=1&amp;story=225\" target=\"_blank\">this announcement yesterday</a> through the Developers section of their site:\r\n\r\n<blockquote>Today we are excited to announce an important step toward greater openness through Facebook Platform.", previous_id: 47, published: true, pub_date: "2009-04-28 19:49:48"},
  {title: "Facebook may rule the world, but you still need your own website.", body: "### I was having this conversation on Saturday...\r\n\r\nI'm hanging with my new musical buddy George Kilby.  He's decided to upgrade his website so we're doing a consult to get a feel for what direction we're going to move him in (pardon my grammar).  He said something at one point about a friend of his who'd decided to totally forgo having their own website in favor of just managing their presence through Facebook and a couple of other social sites.\r\n\r\nI'm kicking myself for not having a canned response as to why I think that's a bad idea, but I guess i hadn't really thought about it too much in a while.\r\n\r\n### In my humble opinion...\r\n\r\nI can totally understand why an artist would do that.  It's a hassle to manage your own website.  There's tons of traffic already happening for free over on Facebook, they already have most of the goodies that a band website needs to have built for you, and you've got to spend half your life posting all this crap there *again* anyway.  Why not just skip the middle man?\r\n\r\nTo me it's two things - branding and informational liberty.\r\n\r\n#### Branding\r\n\r\nIf you fold up your own website and just manage your presence through mySpace or Facebook or Reverb Nation, you're effectively subordinating your brand to theirs. I don't mean to suggest that you are bigger than Facebook, but to me it almost implies that Facebook or MySpace owns you if you send your potential fans there instead of a property of your own.  Would a \"normal\" business send people to MySpace instead of having their own site?  No!  They want to _make_ money...\r\n\r\n#### Informational liberty\r\n\r\nI have some friends in a band.  They've moved their main website onto a platform called Ning.  Ning is a well funded company that aims to make the process of building a \"social network\" something that anyone can do.  It's sort of like the old days of having your own message board on your site, except with the features one would expect of a modern social network.  They have a pretty decent system for listing their tour dates, and maintaining the info is pretty easy.  It doesn't cost that much and it works well, so what's the problem?\r\n\r\nWhat if they every want to do something different?  What happens when the day comes that they want to do something that Ning won't let them do (or won't let them do at a price they can afford), like maybe host and sell their own digital downloads or build a design template that's outside the parameters of what Ning allows?\r\n\r\nThey're faced with a tough decision.  On the one hand they don't have access to tools that they'd like to use to promote their band.  On the other hand they shutter a social network that they've asked their fans to join and be a part of, one that has been a definite success so far.  Maybe it's not an issue right now and maybe it won't be that big of one ever, but by inviting their fans to create a community around them using proprietary software that they'll never fully control they're rolling the dice that Ning (or whoever ultimately buys Ning) will continue to do them and their fans right.\r\n\r\n### In summary\r\n\r\nBetter to build your own site and use that as the hub around which you organize the rest of your social accessories.  ", slug: "facebook-may-rule-world-you-still-need-your-own-website", summary: "## I was having this conversation on Saturday...\r\n\r\nI'm hanging with my new musical buddy George Kilby.  He's decided to upgrade his website so we're doing a consult to get a feel for what direction we're going to move him in (pardon my grammar).  He said something at one point about a friend of his who'd decided to totally forgo having their own website in favor of just managing their presence through Facebook and a couple of other social sites.\r\n\r\nI'm kicking myself for not having a canned response as to why I think that's a bad idea, but I guess i hadn't really thought about it too much in a while.\r\n\r\n## In my humble opinion...\r\n\r\nI can totally understand why an artist would do that.  It's a hassle to manage your own website.  There's tons of traffic already happening for free over on Facebook, they already have most of the goodies that a band website needs to have built for you, and you've got to spend half your life posting all this crap there *again* anyway.  Why not just skip the middle man?\r\n\r\nTo me it's two things - branding and informational liberty.\r\n\r\n### Branding\r\n\r\nIf you fold up your own website and just manage your presence through mySpace or Facebook or Reverb Nation, you're effectively subordinating your brand to theirs. I don't mean to suggest that you are bigger than Facebook, but to me it almost implies that Facebook or MySpace owns you if you send your potential fans there instead of a property of your own.  Would a \"normal\" business send people to MySpace instead of having their own site?  No!  They want to _make_ money...\r\n\r\n### Informational liberty\r\n\r\nI have some friends in a band.  They've moved their main website onto a platform called Ning.  Ning is a well funded company that aims to make the process of building a \"social network\" something that anyone can do.  It's sort of like the old days of having your own message board on your site, except with the features one would expect of a modern social network.", previous_id: nil, published: true, pub_date: "2010-12-20 05:00:00"},
  {title: "Function 'fooController' is undefined", body: "I spent about an hour pulling my hair over this one.  I'm deploying an Angular to dev for the first time, it works fine locally, but everything is busted when I `grunt build` and push it up to a server.  I'm using ngMin and using the supposedly safe syntax for defining all my dependencies, but unfortunately any Google search that includes \"grunt build\" and/or \"minify angular\" only turns up answer that pertain to that fairly well know problem.\r\n\r\nSo, I commented out Uglify in the build process and am still getting the error, only it's a lot easier to track down now, because my JS isn't minified.  It blows up on the first one of my controllers that I wrote in Coffeescript, and is wrapped by Coffee's default function wrapper.\r\n\r\nIf this sounds like you, go to your Gruntfile and add an option to the coffeescript config ---\r\n\r\n~~~ javascript\r\n    coffee: {\r\n      options: {\r\n        sourceMap: true,\r\n        sourceRoot: ''\r\n      },\r\n~~~\r\n\r\nbecomes this ---\r\n\r\n~~~ javascript\r\n    coffee: {\r\n      options: {\r\n        sourceMap: true,\r\n        sourceRoot: '',\r\n        bare: true\r\n      },\r\n~~~\r\n\r\nJust make sure you're defining your scripts with (one of )the approved syntax(s) for keeping stuff out of the global scope - \r\n\r\n~~~ javascript\r\nangular.module('fooApp').controller('fooController', function(){\r\n  // stuff here\r\n});\r\n~~~", slug: "function-foocontroller-is-undefined", summary: "", previous_id: nil, published: true, pub_date: "2014-04-30 15:21:04"},
  {title: "iDidIt", body: "I pulled the trigger.  I am now an official iPhone developer.  I can put apps on the app store, just as soon as I figure out how to write one.  Had to tell somebody...", slug: "i-did-it", summary: "I pulled the trigger.  I am now an official iPhone developer.  I can put apps on the app store, just as soon as I figure out how to write one.  Had to tell somebody...", previous_id: nil, published: true, pub_date: "2009-03-20 20:20:57"},
  {title: "Git and Dropbox", body: "I've just recently started to discover what Dropbox is really good at. I've had one for at least a year and almost never used it. The only thing I'd ever really used it for was client assets like PSDs and the like. I just discovered the Dropbox secret weapon - the symlink.\r\n\r\nA symlink (short for symbolic link), if you don't know, is basically like a pointer to a folder/directory. It's a really nifty way to help you organize your filesystem. Say you use iTunes and for some reason you like to dig around in your iTunes music folder a lot. Rather than going into the Finder and drilling down into the folder from there, you could just create a symlink from your Desktop into that folder. Then, without actually moving your iTunes folder and possibly screwing things up, you've just created a shortcut to get into that folder.\r\n\r\nSo say I've got a client. Let's also say I have two different computers that I regularly work from. I've started using some code to test the project with that I don't want to check into their repo because they don't even really need to know that I'm doing automated testing with a tool of my choosing. So I add the directory that contains the tests to my .gitignore file. But (!), then I switch computers and need access to those test files. A git pull doesn't do anything because those files were never checked in. This struck me as the perfect use case for my dormant Dropbox folder.\r\n\r\nI moved all the test files into a folder in my Dropbox. Then I created symlinks on both computers from that folder into the project directory. That way, they stay in sync across my two computers without needing to be checked in to the client's repo. Thank you Dropbox!", slug: "git-and-dropbox", summary: "I've just recently started to discover what Dropbox is really good at. I've had one for at least a year and almost never used it. The only thing I'd ever really used it for was client assets like PSDs and the like. I just discovered the Dropbox secret weapon - the symlink.\r\n\r\n", previous_id: nil, published: true, pub_date: "2012-07-05 05:00:00"},
  {title: "jQuery Noob - script not working?", body: "<p>It&#39;s simple really, but you have to know a few things about how a browser renders a page to get it.  jQuery is a wonderful thing because it removes the need to know a LOT about a LOT to do with the DOM and still get amazingly cool things done - slideshows, form validation, etc.  However, if you go and learn a bit more about how JavaScript works in a browser you can go beyond copying and pasting code snippets and really start getting creative.  Or surgical.  Or whatever you want.  </p>\r\n\r\n<p>So when code comes through the wire into your browser, your browser parses it from the top down.  That&#39;s the fancy, mechanical way of saying it follows the instructions from the top of the page to the bottom.  Any time it encounters a piece of JavaScript, be it either directly embedded in the page source or linked to another file (from your site or somewhere else), it will take a detour into that JavaScript and execute any instructions in that script before it moves on with parsing the rest of the page.  If you put a humongous blob of JavaScript at the top of the page, your site will seem slower because everybody&#39;s browser is stopping to follow/execute the JS before it moves on down into the content of your page.</p>\r\n\r\n<p>That means what?  Well say you have a date field on a form in your page and you want to use the <a href=\"http://jqueryui.com/demos/datepicker/\">jQueryUI datepicker</a> on it.  All you then need to do is write <code>$(&#39;#event-date&#39;).datepicker();</code> and you have a datepicker.  But there&#39;s a catch.  If you put that code at the top of your page (in the head), or in a file that&#39;s linked to in the head of your page (using <code>script src</code>), then the browser will execute that instruction as soon as it encounters it.  The datepicker won&#39;t show up.  You&#39;ll pull your hair out.  The reason is that the browser goes and sets a <code>datepicker()</code> on an element that it doesn&#39;t know yet exists because it hasn&#39;t gotten down into the page to actually render that yet.  It&#39;d be like giving the steps for a recipe before giving the ingredient list.  Only your computer is too stupid to look down the page and read the ingredients list.  It&#39;ll just say <code>&quot;flour?  There&#39;s no flour on my table.  Moving on.&quot;</code> and no datepicker.</p>\r\n\r\n<p>There are two solutions.  </p>\r\n\r\n<p>One is to delay the execution of the <code>datepicker()</code> instruction until the page has been rendered/parsed/whatever you want to call it.  You do this by putting all of your custom code inside a call to <code>jQuery(document).ready()</code> like this - </p>\r\n\r\n~~~js\r\njQuery(document).ready(function($) {\r\n  $('#event_date').datepicker();\r\n}\r\n\r\n// equivalent (and better) ->\r\n\r\njQuery(function($) {\r\n  $('#event_date').datepicker();\r\n}\r\n~~~\r\n\r\n<p>That basically &quot;hides&quot; the instruction inside of a function that doesn&#39;t get called until the page is ready.  When the page is &quot;ready&quot; (that happens once the browser has loaded the whole page and knows what&#39;s there) the function fires and your browser gets the instruction to add datepicker functionality to the field that it knows exists now.  You can put as many things inside that function as you want, all your code if you like.  And you should learn more about JS because it&#39;s a wonderfully cool language.</p>\r\n\r\n<p>The other solution is to put all of your JS code at the bottom of the page.  This was in vogue over the last couple years as a good way to increase the perceived performance of your website anyway, but I bet lots of people were still wrapping their jQuery code in <code>document.ready()</code> even though they didn&#39;t need to.  I was anyway.  Since your JS isn&#39;t encountered by the browser until after the rest of the page you don&#39;t need to wrap it in that call if you put it at the bottom.</p>\r\n", slug: "jquery-noob-script-not-working", summary: "    <p>It&#39;s simple really, but you have to know a few things about how a browser renders a page to get it.  jQuery is a wonderful thing because it removes the need to know a LOT about a LOT to do with the DOM and still get amazingly cool things done - slideshows, form validation, etc.  However, if you go and learn a bit more about how JavaScript works in a browser you can go beyond copying and pasting code snippets and really start getting creative.  Or surgical.  Or whatever you want.  </p>", previous_id: nil, published: true, pub_date: "2012-07-10 05:00:00"},
  {title: "standingWaves", body: "Sitting here in the surprisingly nice Richmond VA airport, so I thought I'd check in.  Cool cabby on the ride here.  He saw my big PHP book and started asking me about what I was doing, so that pretty much filled up the 20 minute cab ride.  \r\n\r\nLast night's show was kinda just alright for me, personally.  It's funny because Phil and Stacy both thought it was the best show of the weekend.  It's just goes to show, you never know.  I've learned through the years (you never let me down..) that I have absolutely the most subjective opinion about the quality of any given show of anyone in the listening world.  It's the double edge sword that keeps us from putting out more LiveDownloads.  Typically for me, the quality of the experience that I have on any given night is directly proportional to the frequency distribution between 40 and 150 Hz in the location on the stage at which I'm standing.  That's a pretty specific requirement, but last night it just wasn't that happening.  The theater we were playing in last night was Very Big.  Very Big means a lot of air that you have to get moving before the entire room starts to feel right, which is what makes it sound good between 40-150 Hz wherever I am on stage.  \r\n\r\nI suppose that we probably wouldn't be as subject to the peculiarities of a given rooms acoustics if we were a more electric band.  Let's just take my bass for example.  My bass is a giant wood box that's designed to resonate.  I stand next to a drum set.  If you were to solo up the signal from my DI during a show and listen to what is making my bass resonate, you'd hear the notes I'm playing, but also the kick drum loud and clear.  You hear a good bit of fiddle, or God forbid the electric guitar, and the rest of the stage, muffled.  This makes my bass essentially the biggest microphone on the stage, with a frequency response that tapers off at about 100 Hz.\r\n\r\nWhat this means to me is that if the room is shaped just so, and you never know until you start playing, there's the possibility of a 'standing wave' on certain notes.  A standing wave is one that has a wavelength that's some multiple of the dimensions of the stage we're playing.  Suppose I play an open D.  Suppose that D vibrates at a frequency of 65 Hz.  That means that 65 times every second that string is going to return to more or less the same place in space on my bass (nice).  While that string is vibrating it's sending a signal to my amp and to Mikey out in front.  That string is going to cause air to be pushed out of the speakers 65 times a second.  The air being pushed out of those speakers is going to travel at the speed of sound and bounce off of hard surfaces and dancing bodies alike.  The hard surfaces reflect the sound much better, and those soundwaves bounce off and travel back toward me.  Meanwhile, other soundwaves have been continuing to come out of my amp and the PA.  If the note that I'm playing at the time lines up in a certain reinforcing way with the note that's bouncing back toward me from the wall and the PA, you get a standing wave.  That's when feedback begins, and my night starts to go downhill.\r\n\r\nOther nights it's the exact opposite, and the note that's bouncing off the wall is totally out of sync with the note that I'm playing at the time.  That's when you get 'phase cancellation', which means that the soundwaves are canceling each other out.  That's even worse than a standing wave for me, because then there's really no balls to the sound.  Phase cancellation is what makes outdoor concerts sound weird when the wind is blowing and you're about 100 yards away from the stage and the sound kinda shifts around and sounds, well, phasey..\r\n\r\nAnd then some nights, the PA and the amp and my bass are all playing nice with each other and you get that nice even low end.  A nice even low end means ceasing to consider the sound and actually listening to what my bandmates are playing.  That's a good night.\r\n\r\nAnd then some nights, the PA and the amp and my bass are all playing nice with each other, but we still can't get it sounding right.  That was last night.  It usually happens in a Big Room because the Big Room swallows sound waves and doesn't let them come back to you in time to be useful.  It sends them back to you much later so that it sounds like a delay on your entire band being blasted back at you.\r\n\r\nAnd then some nights the sound is so God awful that you just say fuck it, and those are usually really great nights.  Blacksburg was one of those.  It was in a tiny little basement of a club, my bass was acting up all night, but the crowd was blazing.  You can't possibly have a bad time in that situation.\r\n\r\nNow boarding.  Later...", slug: "standing-waves", summary: "Sitting here in the surprisingly nice Richmond VA airport, so I thought I'd check in.  Cool cabby on the ride here.  He saw my big PHP book and started asking me about what I was doing, so that pretty much filled up the 20 minute cab ride.  \r\n\r", previous_id: nil, published: true, pub_date: "2009-03-22 12:54:49"},
  {title: "On Wakarusa", body: "'Twas an interesting time.  Some backstory:\r\n\r\nThe Wakarusa festival has been going on for 5 years now (or something like that).  They experienced great success at the previous site of the festival in Lawrence, Kansas.  The only problem with the site was that it was held at a state park there, which gave local AND federal law enforcement free reign to be a real pain in the ass.  Lots of people got busted pretty much every year.  It was kind of a bad scene in amidst all the fun and great bands and good beer and 20k or so people that came.  We started doing it the second year, which must've been the year that the promoters, both independent and corporate, decided to make a push toward making it a big festival.  We'd never even heard of it before we booked it and all of a sudden String Cheese is on there and Wilco.  Cool.  Wilco was awesome - it was the Ghost is Born tour.  Anyway...\r\n\r\nDue to such monumental hassles from the law, they finally decided to find a new site.  They uprooted the festival and moved it to Arkansas - not their Kansas - to a giant farm out in the Ozarks.  The guy that owns the place is named Dewey.  He's an all around cool guy and he has a perfect place for holding a giant festival, complete with giant stage and all.\r\n\r\nThe first thing that I noticed was the lack of beer.  Well, not exactly, but the keg beer was Miller High Life, which I can be all about sometimes, but usually not for an entire weekend.  That was really the only bummer of the entire festival.  The second thing I noticed was how much nicer the weather was than it ever was in Kansas.  It was usually brutally hot at the old site, but up in the Ozarks it was cool and clear all weekend.  Our set on Thursday night went very well despite some technical mishaps in front of Carbone.  I personally kinda like it when his gear malfunctions because he inevitably plays his ass off like he's trying to prove something, so no problem there.  The only thing was that for 15 agonizing minutes when we should've been starting our set, there were a couple thousand people watching Tim have a hard time with his gear.  For those of you that were at DelFest, yes we need some stage help.  We know.\r\n\r\nOne thing that I really noticed at this festival was the near-perfect timing of the stages.  Everything was timed to have traffic move from here to here to here like a ballet.  The walk from big stage to big stage was a lot shorter than the mile or so at the old festival site.  Camping was right there.\r\n\r\nOne other thing that I noticed was the huge preponderance of really young, wookie kids.  I think that just means that I'm getting older because at one point I remember thinking that most of these kids were probably in middle school when Phish broke up the last time.  Young.  There were some young kids there, but it didn't have the family vibe like DelFest or High Sierra do.  Then I started pondering the sociological aspects of the festival scene in America and it's coincidence with Phish taking a break.  The rise of the big corporate-sponsored festival happened more or less when Phish split, which left legions of summertime revelers with no Phish show to follow.  Enter the big music festival and presto.  I'm not sure about the economics of throwing a large festival like that, it's probably just dicey on a larger scale than a smaller family festival, but I think that corporate sponsorship probably helped to cushion the stress of making sure you brought enough people to the fest to pay the bands.  Couple a deep recession leading to corporate festival sponsorship drying up and people having less available income with f-ing Phish going back on the road and I'd say it's probably going to be a rough summer for festival promoters.  Langerado already tanked.  Bonnaroo this weekend has Bruce Springsteen for a headliner (I can't fathom how the promoters of that one think that spending that much money on an artist like him is going to be worth it), so it should be interesting to see how that goes.\r\n\r\nConversely, it seems like a perfect time to be a club band.  It's not that much money to spend to go to a show, especially compared with a vacation or a festival.  Ahh, the music biz.\r\n\r\nMusical highlights :\r\n\r\nSly and Robbie.  The real deal.  Matisyahu went on after them, which must've been rough for him.\r\n\r\nSplit Lip Rayfield, of course.  \"I drove that car for nearly two years, i even drove it on LSD...\"\r\n\r\nNew Mastersounds.  Yes, they are as good as everyone says.  Can't lose with british accents, either.", slug: "wakarusa", summary: "'Twas an interesting time.  Some backstory:\r\n\r", previous_id: nil, published: true, pub_date: "2009-06-08 13:17:33"},
  {title: "Enlightenment", body: "\r\n\r\nEnlightenment is realizing that the straight job with the commute and the boss actually provides more of what you were seeking from the experience of being a professional grade musician than being in a professional grade band.\r\n\r\nFor the first time ever I'm part of a team with stated goals and long term plans laid out in service of attaining those goals.  It's an amazing feeling that I wouldn't have had I not given the band thing the commitment that I did.\r\n\r\nSo thank you, Railroad Earth, for letting me have the experience that gives me the perspective that I have now.\r\n\r\nAnd thank you, ABM teammates.  Looking forward to it.", slug: "enlightenment", summary: "", previous_id: nil, published: true, pub_date: "2014-07-16 23:27:06"},
  {title: "chapter1a", body: "<strong>Quick bio - The difference between</strong>\r\nAs in, the difference between your brain and your computers CPU.  The difference between how you think and speak and interact, and how your computer does.  The difference between languages, be they interpreted or compiled, object oriented or procedural.  This first chapter will hopefully assist in the process of the first few days after the moment where it first occurs to you that you want to learn how to develop software, be they games or business or iPhone apps.  The real difference for me was the the one between what I thought the process was going to be and what it's actually turned out to be.\r\n\r\nThe moment occurred for me in a car.  I had bought an iPhone a few months after it first came out.  It was the first such early adopter move that I'd made, technologically speaking.  I knew as soon as I started screwing around with it that this was a tool that could really help you get your life organized, something that I'd managed to get around doing for the previous 30 years.  All of the built in applications that Apple provided for their first tier of users were most helpful in that task - email everywhere, calendar, internet, maps, oh yeah, and a phone.  The real fun didn't begin for me until they (Apple) released the 2.0 software update.  This was the update that heralded the opening of the AppStore, where there were now hundreds of apps available from 3rd party developers that could extend the usefulness of your phone.  Anyway, to make a long story no less long, the first long car ride I took after updating my phone was the one where the <em>real</em> potential of mobile computing dawned on me.\r\n\r\nI came home that weekend determined to figure out what it would take to learn the art and craft of building my own applications, as this was clearly a vast and uncharted territory for creative people to make things that could affect the lives of huge numbers of people (and maybe even make a living doing it).\r\n\r\nI got home that week and started Googling.  A search on Computer Programming turned up a mountain of information that was so staggeringly huge as to be almost useless.  I did learn a few things - Wikipedia can be your best friend; there are many different ways to program computers; there are endless amounts of information on programming computers, most of it written by computer programmers with no conversational or literary ability whatsoever.\r\n\r\nI was able to discern a few important pieces, however.  One was something called \"compilation\".  I wasn't sure what this was or why it was important, but hey.  Another was that if you're going to develop software, and you're used to working in a more or less standard Windows environment, you're in for a ride.  Another was that there was something called Object Oriented programming, that supposedly is some kind of elevated way to program.  iPhone apps are written in an OO manner.  Oh, and if you really want to develop apps for the iPhone, you have to buy a Mac.  That's some clever marketing, and the push over the cliff that I'd been waiting for for years.  The bonus was that once you bought the Mac, all of the tools to develop apps, as well as an enormous user community was there to help, for free.  Step 1.", slug: "chapter1a", summary: "<strong>Quick bio - The difference between</strong>", previous_id: 72, published: true, pub_date: "2009-03-30 17:08:31"},
  {title: "The Musician's Curse", body: "> And I wonder - will you miss your old friends once you've proven what you're worth?\r\n> And I wonder - when you're a big star, will you miss the Earth?\r\n\r\nI heard some news this weekend that really shook me up - that one of my old musician acquiantances and his wife of several years had recently split up.  \r\n\r\nHe's a young dude and his band is killing it, and I know first-hand how rough that is on a relationship, so it was not suprising at all.  Yet somehow it was also simultaneously shocking.  \r\n\r\nIt's brought up a lot of emotions and thoughts that I didn't have time to jot down, but I had this weird feeling all weekend.  This feeling like I had to get off a plane that all my friends were on, and that plane later went down.\r\n\r\n---\r\n\r\nAnother buddy of mine just moved to a new town, stocked with tons of music and musicians.  He's trying to make a run at it, and is out and about meeting musicians and going to shows.  It's causing a little bit of strain on his relationship, since his girl is out there for work, not to socialize.\r\n\r\nI empathize with both parties.  Once the music bug bites you, and god forbid you find some success with it, it's almost impossible to find anything to do with yourself that feels as meaningful as that.  Pursuing music and playing music is one of the highest callings I've ever felt. I think it's kind of a miracle that I didn't go completely off the deep end when I walked away, and another miracle that I've managed to find a work situation and a home life that together have surpassed music in terms of how much, I dunno, living I get out of life now.\r\n\r\nBut on the other hand, I don't talk to God nearly as much as I did when I was playing music full time.\r\n\r\n---\r\n\r\nSo yeah, I heard that news and my reaction was both really sad for them and really glad it wasn't me, and I'm guessing that's kinda what they call \"survivor's guilt\".  In my opinion, it's basically impossible to be the kind of man you want to be for your family at the same time that you're being the kind of musician that you want to be for yourself, and for that higher calling.  That's why it feels sort of like a curse to me.  ", slug: "the-musician-s-curse", summary: "", previous_id: nil, published: true, pub_date: "2015-02-24 20:37:36"},
  {title: "Simpletons guide to web server analysis", body: "All of the sudden, by bandwidth has gone up?  I wonder what people are doing on there?\r\n\r\n<a href=\"http://www.webalizer.org/simpleton.html\">Simpletons guide to web server analysis</a>.", slug: "simpletons-guide-web-server-analysis", summary: "All of the sudden, by bandwidth has gone up?  I wonder what people are doing on there?\r\n\r\n<a href=\"http://www.webalizer.org/simpleton.html\">Simpletons guide to web server analysis</a>.", previous_id: nil, published: true, pub_date: "2009-04-08 19:16:28"},
  {title: "trentReznor", body: "<embed type=\"application/x-shockwave-flash\" src=\"http://revision3.com/player-v2997\" allowfullscreen=\"true\" width=\"450\" height=\"350\"  />", slug: "trent-reznor", summary: "<embed type=\"application/x-shockwave-flash\" src=\"http://revision3.com/player-v2997\" allowfullscreen=\"true\" width=\"450\" height=\"280\"  />", previous_id: nil, published: true, pub_date: "2009-04-10 20:59:22"},
  {title: "bandMeetingsAgain", body: "They still suck!", slug: "band-meetings-again", summary: "They still suck!", previous_id: nil, published: true, pub_date: "2009-04-11 22:37:10"},
  {title: "Numero Uno", body: "To speak into the void.\r\n\r\nSo I've had this idea simmering on the front burner of my brain for several months now.  But first, I should probably introduce myself, or do a bio, or something.  Maybe this will take several parts, because I've never tried to write a bio, and I feel like I've done a good job living unconventionally with my first 30 years here...\r\n\r\nI was born in ATL, Georgia, that is.  No brothers or sisters.  Great parents.  Always totally behind me for some reason.  I got pretty mediocre grades at the private school they sent me to, and spent most of my time getting in trouble.  Nothing big ever, no real cause for concern, I just didn't really feel like fitting into their mold over there.  I realize now in hindsight that I left high school with pretty low self esteem after being told for half of my life what an underachiever I was, how much potential I had that if I just \"applied myself\".  I had some really good friends, though, and at some point found music.\r\n\r\nI'd been in the school band since 6th grade, trombone.  I realize now that I never knew how to read music.  I think I learned the parts by listening to whomever I was sitting next to.  That amazes me in hindsight, but nobody picked up on it, least of all me.  I was that into the trombone anyway, I was much more into the drums.  I used to get on my band directors nerve because as soon as we got into the room I'd be back in the percussion section, not learning the trombone parts.\r\n\r\n\"Why didn't you just switch to percussion?\"  you might ask..\r\n\r\n\"Because we need trombones\" was the answer I got for years and years whenever I asked to switch to percussion.\r\n\r\nThere was one time that I was really into building model planes.  I didn't use plastic cement, for some reason I used a hot glue gun.  It was messy and my models turned out looking like crap, but that's not the point.  One time I'd set my glue gun down, with it pointing into my glass of water.  It had dripped some hot glue into the glass, apparently, right before I took a sip.  I burned the crap out of my top lip and had a huge ugly scab for weeks.  The band concert was coming up that week.  I couldn't play the trombone.  I got to be a percussionist for a week.  It was like heaven.  I couldn't read music for the bass drum either, but I damn sure could make the part up.  Nobody ever knew, and I never told them.  I totally forgot about that until now.\r\n\r\nAnyway, at some point I got more or less kicked out of the band.  I skipped a mandatory concert to go on a youth group trip with my church.  I asked them if I could skip the concert to go on a youth group trip and they said \"no\".  This would've been a reasonable answer, except that five minutes before my best friends James had asked them if he could go on the exact same trip that I was asking to go on, and they told him \"sure\".  So I went anyway.  Now I remember why.  Amazing this blogging...\r\n\r\nAnyway, now I'm in a band, and right now I'm on a tour bus heading to the GA theater in Athens.  I've got some time to kill, so I'll keep catching you up, whoever you are.  At this rate, I'll get to my big idea in another 20 posts or so.", slug: "numero-uno", summary: "To speak into the void.<br /><br />  So I've had this idea simmering on the front burner of my brain for several months now.  But first, I should probably introduce myself, or do a bio, or something.  Maybe this will take several parts, because I've never tried to write a bio, and I feel like I've done a good job living unconventionally with my first 30 years here...<br />", previous_id: nil, published: true, pub_date: "2009-02-24 16:48:57"},
  {title: "Using the MySQL command line with Media Temple's grid server", body: "I've been a Media Temple customer for a long while now, almost 4 years.  The file system on my grid server is a timeline of my learning programming and systems administration.  I mostly work on big-boy systems over the last 2 years or so, so my comfort level with working through SSH is pretty high now (much higher than working through GUI tools that want to hold your hand, actually).  That's one thing that I always loved about MT - the fact that they give you a pretty decent command line experience for administering your server.\r\n\r\nOne thing that's kind of always gotten on my nerves, however, is the DB admin experience. Lately since it seems like their PHPMyAdmin installation has completely gone to shit.  Seriously, it's unusable.  I couldn't even restore/import a <1 MB brand-new-site database the other day because it kept timing out.  Of course, this would be a 3 second maneuver on the command line `mysql -u user -p pass target_database < dump.sql`, but they have the command line locked down on the grid server.\r\n\r\nI've recently moved a rather involved client project back onto their production server which is hosted on said grid server.  I'm still banging on the thing, so I'd like to delete some rows straight out of the DB without having to spend 30 minutes trying to get PHPMyAdmin to do what I need it to.  So the other day I went poking around the hosting admin panel.\r\n\r\nI'd seen this years ago, and fortunately it's still there, probably just for this use case.  In the \"global settings\" under the \"databases\" section of your admin panel at the very bottom of the screen is an option to allow external IP addresses access to the DB server.  It even has a handy option to \"use current IP\" to prefill the field for you.  Do this.\r\n\r\nNext, invoke `mysql` locally, but pass it the `--host` option, like this --\r\n\r\n`mysql -u user -p pass --host=external-db.s123456.gridserver.com`.  \r\n\r\nYou're welcome.  \r\n\r\nPS - I tried importing the aforementioned <1 MB db in this method to no avail.  Don't know if their db servers were on the blink at the time, but it definitely wasn't bandwidth.\r\n\r\nPPS - it has occurred to me since this morning that mysql doesn't run on localhost, that's why you can't login as you normally would.  Thus, if you were logged into your webserver, you could pass the same `--host` argument and specify the `internal-db` host to carry on about your business.  \r\n\r\nNever said I was that good at this stuff.", slug: "using-mysql-command-line-media-temples-grid-server", summary: "I've been a Media Temple customer for a long while now, almost 4 years.  The file system on my grid server is a timeline of my learning programming and systems administration.  I mostly work on big-boy systems over the last 2 years or so, so my comfort level with working through SSH is pretty high now (much higher than working through GUI tools that want to hold your hand, actually).", previous_id: nil, published: true, pub_date: "2013-01-18 12:26:51"},
  {title: "The drush command 'mongodb-migrate-prep' could not be found.", body: "For some reason I got it into my head the other day to tinker around with MongoDB and Drupal, masochism I guess.  Anyway, I finally had the opportunity to start tinkering with it last night.  \r\n\r\nThe set up was fairly easy - if you're on a Mac with Homebrew just hit up the josegonzalez builds of PHP5.5 and then `brew install php55-mongo` or something like that. Just `brew search php55-mongo` before you go blindly copying that command in.\r\n\r\nMaking the connection between Drupal and Mongo was also pretty straightforward, just follow the instructions on [this post](http://spf13.com/post/getting-started-with-drupal-and-mongodb).\r\n\r\nAfter that I was ready to migrate some content, so I did the old `drush | grep mongo` to see a list that looked like this --\r\n\r\n~~~\r\nAll commands in mongodb: (mongodb)\r\n mongodb-cli (mdbc)    Open a mongodb command-line interface using Drupal's credentials.\r\n mongodb-conf          Print mongodb connection details using print_r().\r\n mongodb-connect       A string for connecting to the mongodb.\r\n mongodb-query (mdbq)  Execute a query against the site mongodb.\r\nOther commands: (adaptivetheme,archive,browse,cache,coder_review,topic,features_plumber,apachesolr_site,redirect,image,libraries,make,mongodb_migrate,nodequeue_generate,print_pdf,queue,rules_scheduler,runserver,search,shellalias,sitealias,ssh,acquia_search,acquia_spi,strongarm,test,usage,uuid,variable,views_bulk_operations,views_data_export,watchdog,xmlsitemap)\r\n mongodb-migrate       Migrates fields. Run mongodb-field-update first.\r\n mongodb-migrate-prep  Prepare for migrate. Resets existing migration. No data is lost.\r\n~~~\r\n\r\nSo, cool!  Only problem is I repeatedly got this back ---\r\n\r\n`The drush command 'mongodb-migrate-prep' could not be found.  Run 'drush cache-clear drush' to clear the commandfile cache if you have installed new extensions.`\r\n\r\nOver and over, clearing drush cache over and over, until I finally figured to look in the drush files that came with the Mongo module.  The trick is that Chx actually meant to say that command is called `drush mongodb-migrate-prepare` instead of just \"prep\".\r\n\r\nIt's not that reassuring about the experience that lay ahead of me that an error this simple and fixable is lying there unpatched, apparently after 2 years worth of development, since I first tried the green \"official\" release before going -dev on it.  I suppose I'll be submitting a patch for that.\r\n\r\nI have another blog post about the migration tribulations, but I eventually got through it and it's kinda cool.  Instead of a giant throbbing schema full of `field_data_this_and_that`, all you have is ---\r\n\r\n~~~\r\n> show collections\r\ncache\r\ncache_bootstrap\r\nfields_current.file\r\nfields_current.node\r\nfields_current.taxonomy_term\r\nfields_current.user\r\nfields_revision.node\r\nmigrate.file\r\nmigrate.node\r\nmigrate.taxonomy_term\r\nmigrate.user\r\nqueue.feeds_importer_expire\r\nqueue.feeds_push_unsubscribe\r\nqueue.feeds_source_clear\r\nqueue.feeds_source_import\r\nqueue.file_entity_type_determine\r\nqueue.print_mail_send\r\nqueue.views_bulk_operations\r\nsession\r\nsystem.indexes\r\n~~~\r\n\r\nEach node document in that collection has every field that it needs to have, right on the node!  Win!  Now to figure out what to do with it!!", slug: "the-drush-command-mongodb-migrate-prep-could-not-be-found", summary: "", previous_id: nil, published: true, pub_date: "2014-08-23 17:09:10"},
  {title: "The Bass influence countdown, number 4", body: "### #4 - John Digweed\r\n\r\nSo this one's might need a little explaining.  I've said it here before, but it's likely that you weren't here for that - I went through a phase in college where I traveled all over the southeast going to see shows.  I didn't go to Phish shows except for a few times, and String Cheese was a bit after my time.  I and my buddies went to go see DJs.  This was the golden age of Keoki, Rabbit in the Moon, Simply Jeff, the Dubtribe Soundsystem, Scott Hardkiss..  My first party was to go see the Dubtribe at some club in Raleigh.  I couldn't figure out where the music was coming from the whole time, but it didn't matter because I danced my ass off all night long.  It was awesome.  \r\n\r\nAfter a year or two of this and getting more established in the Boone music scene as a bassist, it occurred to me one night that perhaps I should pick up a pair of decks and figure out how to rock the crowd like these guys do.  It was DJ Icey running the show at that particular time.  From [another post](/2009/04/file-under-random-memory/) - \r\n\r\n> I still remember this one record he played that night - the vocal hook was “can you feel the BASS”, and when the record said ‘bass’ there was this note that came out of the subs that can’t be related verbally. It shook the world. It made my hair stand up. It made the entire party, all 5000 of us, stop dancing and look around at each other.\r\n\r\nSo anyway, pretty much like this whole software quest but somewhat more informed, I began groping about for a style and a sound.  \r\n\r\n### Local influences\r\n\r\nI had two good buddies in Boone at the time that really helped inform my direction and encourage me to go for it.  Most of these style of music probably don't really exist anymore or have come to be called by different names, but [Matty](http://www.youtube.com/watch?v=mjUKQhYywAE \"YouTube - Matt Harder - The Basics (Cipster's 'Spontaneous Combustion' Mix)\") was into the breakbeats (careful, that link is pretty hard).  My other buddy Breckenridge was more into downtempo and deep house.  Those two areas being covered, I began to search around for something that wasn't already being done.  There was quite a lively DJ scene in the the NC high country in the late 90s, and there were lots of drum and bass DJs around, so I turned the tempo down a bit.  I still wanted to rock the house, but in a smoother more subtle way.  Wasn't long before I found a mix CD by John Digweed.\r\n\r\n### The build\r\n\r\nI'd attribute most of my love for music that \"jams\" to the crop of progressive house DJ/producers that England was churning out 10 years ago.  The main thing with that style of music is to lull your crowd into a trance (not like that [circuit-housey gay bar](http://www.google.com/search?q=backstreet+atlanta \"Google\") trance, but an actual state of hypnosis).  After about an hour or so of playing with them and giving them alternate chances to rest and whatnot, you start building over the course of a few records to a HUGE record.  This is where you kill them with your best bass line.  \r\n\r\nI learned two things from DJing - how to build a set over the course of a night and a metronomic sense of time and tempo.  The whole idea of mixing two records together without anyone else even noticing it's happening is something that really appealed to me, and requires a hell of a lot of skill to do well.  Your sense of time has to be perfect, you have to listen harder than almost any live musician has to (just realized that while writing this) in order to achieve the right blend and keep your records together, and you have a to have a good ear for pitch so that you don't clash two records together that are a minor second apart.  There's also quite a lot of acoustic theory to delve into on your mixer so that your two kick drums don't cancel each other out.  Good times.  So help me, some day I'm going to get back over that way musically.  \r\n\r\nOther notable prog house influences - Steve Lawler, Dave Seaman, Danny Tenaglia, G Pal, Gui Boratto, Deep Dish, Sasha of course...\r\n\r\nGod, this blogging shit takes forever.  No wonder I've been so off this year.  Later y'all.  Thanks for reading...", slug: "bass-influence-countdown-number-4", summary: "So this one's might need a little explaining.  I've said it here before, but it's likely that you weren't here for that - I went through a phase in college where I traveled all over the southeast going to see shows.  I didn't go to Phish shows except for a few times, and String Cheese was a bit after my time.  I and my buddies went to go see DJs.  This was the golden age of Keoki, Rabbit in the Moon, Simply Jeff, the Dubtribe Soundsystem, Scott Hardkiss..  My first party was to go see the Dubtribe at some club in Raleigh.  I couldn't figure out where the music was coming from the whole time, but it didn't matter because I danced my ass off all night long.  It was awesome.  \r\n\r\nAfter a year or two of this and getting more established in the Boone music scene as a bassist, it occurred to me one night that perhaps I should pick up a pair of decks and figure out how to rock the crowd like these guys do.  It was DJ Icey running the show at that particular time.  From [another post](/2009/04/file-under-random-memory/) - \r\n\r\n> I still remember this one record he played that night - the vocal hook was “can you feel the BASS”, and when the record said ‘bass’ there was this note that came out of the subs that can’t be related verbally. It shook the world. It made my hair stand up. It made the entire party, all 5000 of us, stop dancing and look around at each other.\r\n\r\nSo anyway, pretty much like this whole software quest but somewhat more informed, I began groping about for a style and a sound.  \r\n\r\n##Local influences\r\n\r\nI had two good buddies in Boone at the time that really helped inform my direction and encourage me to go for it.  Most of these style of music probably don't really exist anymore or have come to be called by different names, but [Matty](http://www.youtube.com/watch?v=mjUKQhYywAE \"YouTube - Matt Harder - The Basics (Cipster's 'Spontaneous Combustion' Mix)\") was into the breakbeats (careful, that link is pretty hard).", previous_id: nil, published: true, pub_date: "2010-12-17 05:00:00"},
  {title: "Deconstructing the Google Analytics tag", body: "If you're a web developer, I'm sure you've placed this snippet of code more into more than a few projects.\r\n\r\n~~~html\r\n<!-- Google Analytics -->\r\n<script>\r\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\r\n\r\nga('create', 'UA-XXXX-Y', 'auto');\r\nga('send', 'pageview');\r\n\r\n</script>\r\n<!-- End Google Analytics -->\r\n~~~\r\n\r\nLet's unpack it a little bit -\r\n\r\n~~~js\r\n(function(i, s, o, g, r, a, m) {\r\n\ti['GoogleAnalyticsObject'] = r;\r\n\ti[r] = i[r] || function() {\r\n\t\t(i[r].q = i[r].q || []).push(arguments)\r\n\t}, i[r].l = 1 * new Date();\r\n\ta = s.createElement(o),\r\n\tm = s.getElementsByTagName(o)[0];\r\n\ta.async = 1;\r\n\ta.src = g;\r\n\tm.parentNode.insertBefore(a, m)\r\n})(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');\r\n~~~\r\n\r\nNow let's make those local variables a little more clear -\r\n\r\n~~~js\r\n(function() {\r\n        var a, m;\r\n\twindow['GoogleAnalyticsObject'] = 'ga';\r\n\twindow['ga'] = window['ga'] || function() {\r\n\t\t(window['ga'].q = window['ga'].q || []).push(arguments)\r\n\t}, window['ga'].l = 1 * new Date();\r\n\ta = document.createElement('script'),\r\n\tm = document.getElementsByTagName('script')[0];\r\n\ta.async = 1;\r\n\ta.src = '//www.google-analytics.com/analytics.js';\r\n\tm.parentNode.insertBefore(a, m)\r\n})()\r\n~~~\r\n\r\nSo if you go to your javascript console and type \"GoogleAnalyticsObject\", you'll get back the string \"ga\".  `window.ga` is a function, but since functions in javascript are also objects, it has a property called `q`, which is just an array.  This is reminiscent of the old ga.js syntax which went something like this --\r\n\r\n~~~js\r\nvar _gaq = _gaq || [];\r\n  _gaq.push(['_setAccount', 'UA-XXXX-Y']);\r\n  _gaq.push(['_trackPageview']);\r\n\r\n  (function() {\r\n    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\r\n    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\r\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\r\n  })();\r\n~~~\r\n\r\n`_gaq` is/was just a plain old Javascript array, which gives it the `push()` method for free.  This new `ga.q` property serves the exact same purpose, an array to push things into and wait for something to come along later and pop them off.  That something that comes along later is whatever is contained in that async script that this snippet also builds.  \r\n\r\nThis is super clever because it doesn't have to wait for anything, it can go ahead and do all its business the instant the page loads and even if the main tracking script doesn't come down for some reason, nothing breaks.\r\n\r\nBack to analytics.js...\r\n\r\nWhatever you hand as arguments to `ga()` gets fed into `ga.q` right here --\r\n\r\n~~~js\r\nwindow['ga'] = window['ga'] || function() {\r\n\t(window['ga'].q = window['ga'].q || []).push(arguments)\r\n}\r\n~~~\r\n\r\nIf you pop open the console on the front page of this blog, and type in `ga.q`, you'll get this --\r\n\r\n~~~shell\r\n> ga.q\r\n[\r\nArguments[3]\r\n0: \"create\"\r\n1: \"UA-8646459-1\"\r\n2: \"ignoredbydinosaurs.com\"\r\ncallee: function (){\r\nlength: 3\r\n__proto__: Object\r\n, \r\nArguments[2]\r\n0: \"send\"\r\n1: \"pageview\"\r\ncallee: function (){\r\nlength: 2\r\n__proto__: Object\r\n]\r\n~~~\r\n\r\nThose are stashed in the Q because as soon as that first bit of code is parsed out, there are two quick calls to ga(), and that's exactly what they have as their arguments.  It's so simple, it's almost stupid to explain, but the script is so heavily optimized it's not at all obvious on first glance what's going on here.\r\n\r\nMoving on, there's another property of the `ga` function/object - `ga.l`.  `ga.l` gets initialized to a javascript timestamp (in milliseconds).  `new Date()` returns a javscript `Date` object, but multiplying it by the integer `1` casts it into a number, which automatically converts it into the number of milliseconds since the epoch.  Another way of writing this would be `+new Date()` - another, albeit less clear way, of performing the same casting to a timestamp.  `ga.l`'s purpose is to provide a time for the initial \"create\" and \"pageview\" calls to `ga()`.\r\n\r\nLastly, an asynchronous javascript tag is written to make the call to fetch the ga.js script from Google's servers so the real magic can start.\r\n\r\nAnother interesting bit is that the `a` and `m` parameters are not assigned anything at the [IIFE](http://stage.learn.jquery.com/javascript-101/functions/#immediately-invoked-function-expression-iife) call at the end.  This leaves them as `undefined` in the script until they are assigned the script tags toward the end of this snippet.  Another way of writing the exact same thing would be to only have `(i,s,o,g,r)` as parameters to the function, and then declaring `var a, m;` somewhere in this snippet.  I'm not sure off hand if this is a memory or performance optimization or if it's just a handy way to save a couple bytes over the network, but someday I'll figure it out.\r\n\r\n---\r\n\r\nThanks for sticking with me - this is one of the most common little snippets that I've probably placed in my web development career, and I'd never totally dug in to understand what exactly it does beyond writing an async script tag.  The pattern of declaring a \"plain old javascript array\" and then pushing your \"stuff\" into it as a queue for working with later is an extremely common pattern in 3rd party javascript, since you want everything to be as performant as possible, and you want to make sure you don't break anything if for some reason the rest of your payload script doesn't actually load.", slug: "deconstructing-the-google-analytics-tag", summary: "Digging in to the mechanics of the Google Analytics tag.", previous_id: nil, published: true, pub_date: "2014-09-03 19:43:07"},
  {title: "Finding that pesky Acquia host entry for your development environment", body: "At my gig we host our sites on Acquia's dev cloud.  The dev environment is pretty locked down, obviously, since you don't want multiple, publicly accessible copies of your sites floating around out there, especially when it could be in any state of brokenness at any given time.  So the way we do it is to use `.dev` domains that aren't publicly routable via DNS.  We have a big ole master hosts entry in the local network that takes any of those dev domains and routes them to the proper IP.\r\n\r\nToday however, I go out and my car won't start.  This means I'm working from home, and that I need to add these host entries on my local machine myself since I'm not on the company network.  As I type this I realize I could VPN, but that's no fun and I'm already done with this method that I'm about to explain.\r\n\r\nSo, I go to Acquia's cloud panel thingy.  They have a \"servers\" menu item, but it only gives you the names of your servers, not IP addresses.  Oh, we also have a load balancer sitting in front of everything that I can't log in to to get the IP that way (via `ifconfig`, presumably).  So, they do give you this really vague\r\n\r\n> The following tables show all of the servers and the services(s) they provide for each of your site's environments. Each server's full DNS name is **server**.prod.hosting.acquia.com.\r\n\r\nSo anyway, the answer is the `dig` command - [more or less a DNS swiss army knife](http://en.wikipedia.org/wiki/Dig_(command)).  \r\n\r\n`dig server.prod.hosting.acquia.com` spits back a wealth of info at you, including the IP address of your load balancer, which you can then put into an entry in your `/etc/hosts` file.  \r\n\r\nLove this stuff...", slug: "finding-pesky-acquia-host-entry-your-development-environment", summary: "At my gig we host our sites on Acquia's dev cloud.  The dev environment is pretty locked down, obviously, since you don't want multiple, publicly accessible copies of your sites floating around out there, especially when it could be in any state of brokenness at any given time.  So the way we do it is to use `.dev` domains that aren't publicly routable via DNS.  We have a big ole master hosts entry in the local network that takes any of those dev domains and routes them to the proper IP.\r\n\r\nToday however, I go out and my car won't start.", previous_id: nil, published: true, pub_date: "2013-05-21 14:48:23"},
  {title: "Getting Started with Rails", body: "A fantastic <a href=\"http://guides.rubyonrails.org/getting_started.html\">Getting Started with Rails</a> guide.  I'll probably reference this page later.", slug: "getting-started-rails", summary: "A fantastic <a href=\"http://guides.rubyonrails.org/getting_started.html\">Getting Started with Rails</a> guide.  I'll probably reference this page later.", previous_id: nil, published: true, pub_date: "2009-04-01 21:23:08"},
  {title: "Altering the Drupal Password Reset process", body: "<h3>WARNING! D6 code ahead!!</h3>\r\n\r\n<p>As improved as D7 is, they don&#39;t seem to have caught on to this one, so maybe this will help those of you as well.</p>\r\n\r\n<hr>\r\n\r\n<p>The internet is surprisingly scarce on information about this topic.  Maybe most people don&#39;t need to alter the password retrieval process, but I&#39;ve got a client with a variety of different roles on their site.  These different roles have different profiles via the <a href=\"http://drupal.org/project/content_profile\" title=\"Content Profile | drupal.org\">Content Profile</a> module.  On account of numerous other account/profile management related modules that I&#39;ve added - LoginToboggan, Auto Assign role, Invite - the whole process as well as the standard Drupal callbacks have gotten a little muddled.  </p>\r\n\r\n<p>By muddled I mean broken.  For instance, the standard user/%uid%/edit page is broken to hell.  I don&#39;t know why really except that there&#39;s some competing permissions/access thing that I just can&#39;t, for the life of me, find.  Unfortunately this is the page that the stock Drupal password reset process brings you to to reset your password after logging in.</p>\r\n\r\n<p>&quot;No sweat!&quot;, you might say.  &quot;Just call <code>hook_password_reset()</code> and be on your merry way!&quot;</p>\r\n\r\n<p>&quot;I&#39;d love to!&quot;, I&#39;d say in reply.  &quot;But there is no <code>hook_password_reset()</code>!&quot;</p>\r\n\r\n<p>After much digging I finally found a clue to look in the user.module in a file called <code>user.pages.inc</code>.  Herein lies the function that handles this very process - <a href=\"http://api.drupal.org/api/drupal/modules%21user%21user.pages.inc/function/user_pass_reset/6\" title=\"user_pass_reset | user.pages.inc | Drupal 6 | Drupal API\"><code>user_pass_reset()</code></a>.  Reading through this function is pretty cool.  It&#39;s very readable, but also feels kind of bloated and hackish in a way that makes me feel a little better about how shitty a programmer I actually am.</p>\r\n\r\n<p>Down around line 111 is where the magic happens.  Now, if you&#39;re reading this, you&#39;ve probably tried everything I tried.  I tried setting <code>#redirect</code> on the form, which doesn&#39;t work because Drupal will ignore <code>#redirect</code> on the form if <code>#action</code> is set.  I tried unsetting <code>#action</code> on the form, which breaks the whole thing because Drupal relies on that very unique URL being submitted to validate the password reset.  All that logic can be viewed in <code>user_pass_reset</code>, so there&#39;s no monkeying with that.  All you want to do is change that stinking URL inside that <code>drupal_goto()</code> and the end of that function!  Has noone encountered this use case before?!?</p>\r\n\r\n<p>So I did what any desperate soul would do.  I hacked core.  I didn&#39;t respect myself afterward, but at least the process worked like my client needed it to.</p>\r\n\r\n<p>Step away, do some thinking.  The comment at the top of the function says &quot;menu callback for&quot;...</p>\r\n\r\n<h3>Enter <code>hook_menu_alter()</code>.</h3>\r\n\r\n<p>So obviously, the solution requires a custom module.  In the absence of a <code>hook_password_reset()</code>, you have to move a little deeper down the chain.  <code>hook_menu_alter()</code> is the backdoor into the club of elation that is having this project behind you.  <code>hook_menu_alter()</code> lets you grab and <em>alter</em> any menu item in the whole process.  Looking a little higher in the call chain on the User.module I take a peek inside <code>user_menu()</code>.</p>\r\n\r\n~~~php\r\n$items['user/reset/%/%/%'] = array(\r\n  'title' => 'Reset password', \r\n  'page callback' => 'drupal_get_form', \r\n  'page arguments' => array('user_pass_reset', 2, 3, 4), \r\n  'access callback' => TRUE, \r\n  'type' => MENU_CALLBACK, \r\n  'file' => 'user.pages.inc',\r\n);\r\n~~~\r\n\r\n<p>So let&#39;s copy that <code>user_pass_reset()</code> into our module (the <em>sweet_module</em> in this case) and rename it <code>sweet_module_user_pass_reset()</code>.  Then let&#39;s define <code>my_menu_alter()</code> to be something like this - </p>\r\n\r\n~~~php\r\nfunction sweet_module_menu_alter(&amp;$items) {\r\n  $items['user/reset/%/%/%'] = array(\r\n    'title' => 'Reset password',\r\n    'page callback' => 'drupal_get_form',\r\n    'page arguments' => array('sweet_module_user_pass_reset', 2, 3, 4),\r\n    'access callback' => TRUE,\r\n    'type' => MENU_CALLBACK,\r\n  );\r\n}\r\n~~~\r\n\r\n<p>Note the new function name for the callback, and the removal of the &#39;file&#39; bit at the end.  <strong>Flush your menu cache</strong> and you should now be hooking into that damn function finally.</p>\r\n\r\n<p>What you do now is totally up to you, but you can hack away at the entire function until it behaves properly.  In my case it was sending this type of user this way and that type of user that way.  And nobody to the stock drupal user edit path.  And you didn&#39;t hack core, and you can keep upgrading your site like you always did with the flick of a drush command without ever having to worry.</p>\r\n\r\n<p>You&#39;re welcome.</p>\r\n", slug: "altering-drupal-password-reset-process", summary: "    <h3>WARNING! D6 code ahead!!</h3>\r\n\r\n<p>As improved as D7 is, they don&#39;t seem to have caught on to this one, so maybe this will help those of you as well.</p>", previous_id: nil, published: true, pub_date: "2012-12-10 05:00:00"},
  {title: "Nginx, Unicorn, Redmine, and my truncated attachment downloads", body: "I'm the honcho in charge of our in-house bug tracker - Redmine.  Redmine is a rather large Ruby on Rails project, thus nobody in house when I started here had any knowledge or interest in maintaining the thing, since Ruby servers have a bad rap for being kind of finicky to set up, at least in relation to PHP.  So it goes.  \r\n\r\nI recently upgraded to the lastest stable release - 2.3.1 - and decided to 86 Passenger as our app server in favor of Unicorn.  I've been setting up all my Ruby servers with Unicorn lately and find it to be easier than Passenger, even tho ease of deployment is Passenger's whole selling point.  I find the Nginx reverse proxying back to a pool of app servers, ala PHP-FPM that's running this site currently to be an easy mental model to get my head around.  I get Passenger's mod_rails/mod_php approach, I just prefer the other. \r\n\r\nAnyway, sorry.\r\n\r\nSo I upgraded the whole infrastructure last week to Ruby 1.9.3-p392, Redmine 2.3.1, and everything went fairly smoothly.  I was alerted to a bug this morning though, where attachments were being mangled.  Basically, everything was being truncated to the first 48k in the file, and this applied to images as well as PDFs and Excel spreadsheets.  I dove into the files/ directory in Redmine and saw that the files were all there, and that the file sizes were correct, so they were getting **to** the server, just not coming back.\r\n\r\nI suspected I'd broken something with the new app server, but it took me a while to track it down.  I'd previously been running the Nginx process and the Passenger process as the same user on the server, something I changed in this recent deployment.  After trotting through all the Unicorn logs, the Rails logs, and what I thought were the Nginx logs, I found some \"other\" Nginx logs that happened to be the ones that were actually being used now.  They were filled with this --\r\n\r\n~~~\r\n2013/05/22 14:13:58 [crit] 17604#0: *9408 open() \"/opt/nginx/proxy_temp/7/06/0000000067\" failed (13: Permission denied) while reading upstream, client: 65.126.154.6, server: _, request: \"GET /attachments/download/2323/AdvertiserEmailLeads_with_Verbiage_Changes.xls HTTP/1.1\", upstream: \"http://unix:/tmp/redmine.sock:/attachments/download/2323/AdvertiserEmailLeads_with_Verbiage_Changes.xls\", host: \"redmine.advantagemedia.com\", referrer: \"http://redmine.advantagemedia.com/issues/4958\"\r\n\r\n2013/05/22 14:14:43 [crit] 21936#0: *8 open() \"/opt/nginx/proxy_temp/1/00/0000000001\" failed (13: Permission denied) while reading upstream, client: 65.126.154.6, server: _, request: \"GET /attachments/download/1454/Balluff_112012html5.zip HTTP/1.1\", upstream: \"http://unix:/tmp/redmine.sock:/attachments/download/1454/Balluff_112012html5.zip\", host: \"redmine.advantagemedia.com\", referrer: \"http://redmine.advantagemedia.com/issues/4229\"\r\n~~~\r\n\r\nSo that's a good thing, because we're getting really warm by this point.  Basically, the `/opt/nginx/proxy_temp` directory is full of proxy temp files that were still owned by the old nginx user.  Now that the Nginx process was running as user `nobody`, the ownership and permissions were wrong.  So a `chown -R nobody` on that proxy_temp directory and everything was right with the world.", slug: "nginx-unicorn-redmine-and-my-truncated-attachment-downloads", summary: "I'm the honcho in charge of our in-house bug tracker - Redmine.  Redmine is a rather large Ruby on Rails project, thus nobody in house when I started here had any knowledge or interest in maintaining the thing, since Ruby servers have a bad rap for being kind of finicky to set up, at least in relation to PHP.  So it goes.  \r\n\r\nI recently upgraded to the lastest stable release - 2.3.1 - and decided to 86 Passenger as our app server in favor of Unicorn.", previous_id: nil, published: true, pub_date: "2013-05-22 15:34:01"},
  {title: "Setting up JMX on Mule ESB", body: "The goal - trying to setup Datadog monitoring of a community Mule server that we have.  Using configs from the old server weren't working so I had to learn more about Java infrastructure than I intended.  It's simple, but it took me several hours of Googling.  Basically you do this -- [http://java.dzone.com/articles/remote-jmx-monitoring-mule](http://java.dzone.com/articles/remote-jmx-monitoring-mule).\r\n\r\nBut dudeman's code is broken, presumably because dzone autolinks everything in that `xsi:schemaLocation` block.  I changed the host to `127.0.0.1` and the port to `9000` in this example, but you can make that whatever you want if you are monitoring remotely.\r\n\r\nJust in case that link goes away at some point - \r\n\r\n- Create a directory, call it MuleJMXApp\r\n- Drop the following code in, call it `mule-config.xml`\r\n\r\n~~~xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<mule xmlns=\"http://www.mulesoft.org/schema/mule/core\"\r\n    xmlns:management=\"http://www.mulesoft.org/schema/mule/management\"\r\n    xmlns:spring=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans\r\n        http://www.springframework.org/schema/beans/spring-beans-current.xsd\r\n        http://www.mulesoft.org/schema/mule/core\r\n        http://www.mulesoft.org/schema/mule/core/current/mule.xsd\r\n        http://www.mulesoft.org/schema/mule/management\r\n        http://www.mulesoft.org/schema/mule/management/current/mule-management.xsd\">\r\n    <management:jmx-server>\r\n        <management:connector-server\r\n            url=\"service:jmx:rmi:///jndi/rmi://127.0.0.1:9000/jmxrmi\"/>\r\n    </management:jmx-server>\r\n</mule>\r\n~~~\r\n\r\nDeploy this directory to your Mule's apps/ directory just like any other Mule app.", slug: "setting-up-jmx-on-mule-esb", summary: "", previous_id: nil, published: true, pub_date: "2015-03-05 18:10:00"},
  {title: "On contributing to open source projects", body: "Whenever a new developer shows up in some online thread asking for advice on how to learn to code, the replies _always_ include \"find an open source project to help with\".  The 5th birthday of the Macintosh that I bought to learn to code is any day now, and I've just now worked up the chops and the courage to follow that advice.  Here's what I'd say to a younger me.\r\n\r\nWhen people say that, it's usually really intimidating to think about.  What project?  How do I get involved?  What if I suck and get laughed off the internet?  Well..\r\n\r\nPick a big one.  Pick Drupal.  Drupal is a huge, beautiful mess of an open source project and Drupal developers are highly in demand right now.  This means that there is lots to work on, and when you've got something to show you can get paid decently well to do it.  The advice is always to \"scratch your own itch\", and indeed that's what pretty much every developer in open source is doing.  I just had [my first patch](http://drupalcode.org/project/dfp.git/commitdiff/c2b59349fd298019c61bfe4d26490f4f7e7f7a1d?hp=d898075f2fbae27b96cd52255ce2dfdaaad06a00) applied to a project.  It took me about 3 weeks from start to finish, but the majority of that wasn't actually writing code.  It was learning about what the other code did that I was trying to patch so that I could write a feature that actually followed Drupal conventions.  This was a very simple little feature, but what I learned between 3 weeks ago and now ties into a LOT of core Drupal principles that have totally enabled me to write this other module that I need for work and have it work as intended on the **first try**.  \r\n\r\nSo, in summary - help out on an open source project.  It'll make you a better developer faster than anything else.", slug: "contributing-open-source-projects", summary: "Whenever a new developer shows up in some online thread asking for advice on how to learn to code, the replies _always_ include \"find an open source project to help with\".  The 5th birthday of the Macintosh that I bought to learn to code is any day now, and I've just now worked up the chops and the courage to follow that advice.  Here's what I'd say to a younger me.\r\n\r\nWhen people say that, it's usually really intimidating to think about.  What project?  How do I get involved?  What if I suck and get laughed off the internet?  Well..\r\n\r\nPick a big one.  Pick Drupal.", previous_id: nil, published: true, pub_date: "2013-07-24 15:24:16"},
  {title: "A few things a Drupal dev should know about Ruby", body: "Hi there, probably-front-end-dev-who's-met-and-used-Sass-and-likes-what-they-see.  This is for you.\r\n\r\n### RubyGems\r\n\r\nSass is made out of Ruby - it's a very pleasant, general purpose programming language that's pretty easy to learn and like.  Ruby has a package management system whereby libraries of Ruby code are bundled up into what's known as \"Gems\".  Sass is a gem.  When you install it, you get a couple of new executables to play with in the terminal, namely `sass` and `sass-convert`. The latter of these will help get you started with Sass by converting your straight CSS to Sass.  RubyGems inspired PHP's new-but-already-dominant package manager, Composer.\r\n\r\n### RBENV\r\n\r\nIf you are a Mac user, and you are using the version of Ruby that came with your Mac, you are using [a version of Ruby that's actually beyond End Of Life](http://www.ruby-lang.org/en/news/2013/06/30/we-retire-1-8-7/).  If all you're ever interested in is Sass, it'll keep working for a while longer but eventually you'll be left behind.  A relic.  This is the bad news.  The good news is that the Ruby community has been working on this problem for a while.\r\n\r\n**Q - Wait, what?**\r\n\r\n*A - Because Ruby 1.9 came out a while back and has a bunch of cool new stuff in the form of performance enhancements, syntactic polish, and overall love via it's contributors, and because 1.8 is in life's endzone, and because using outdated versions of open source software just isn't your preferred thing, you'll want to use 1.9.  This is how.*\r\n\r\nThe most commonly blogged about solution to this in the Ruby world is [RVM](http://rvm.io/).  We're not going to talk about that.  We're going to talk about a solution called [rbenv](https://github.com/sstephenson/rbenv).  Rbenv is a more recent and lightweight solution to this multiple Ruby versions problem that doesn't require `sudo` to install and update Gems, and allows you to install almost any version of Ruby you desire (of which there are plenty, but that's more than you need to know right now).  \r\n\r\nRbenv works on any *nix based system and installation is [super simple](https://github.com/sstephenson/rbenv#basic-github-checkout)\r\n\r\n`$ git clone https://github.com/sstephenson/rbenv.git ~/.rbenv`\r\n\r\nThis installs rbenv, the version manager.  Add rbenv to your $PATH - \r\n\r\n`$ echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bash_profile` \r\n\r\n`$ echo 'eval \"$(rbenv init -)\"' >> ~/.bash_profile`\r\n\r\n(Zsh users put those two lines in ~/.zshrc).\r\n\r\nYou might as well go all the way and install the Ruby version installer, a separate tool - ruby-build.\r\n\r\n`git clone https://github.com/sstephenson/ruby-build.git \\ ~/.rbenv/plugins/ruby-build`\r\n\r\nAt this point, you'll reload your shell - `exec $SHELL` - and you're ready to rumble.  Ruby 2.0.0 was released earlier this year, so unless you really like [living on the edge](http://drupalcode.org/project/media.git), 1.9.3 is a safe bet.\r\n\r\n`rbenv install 1.9.3-p448` - (the most recent release as of this time, refer to [changelog](https://github.com/sstephenson/ruby-build/blob/master/CHANGELOG.md)).  \r\n\r\nI almost forgot to mention `rbenv rehash` - probably the rbenv command you'll use the most.  \"rehash\" basically tells rbenv to reload itself after you `gem install` any new gem that comes with an executable (like Sass).  If you install a new gem and for some reason your computer acts like it has no idea, it's almost certainly this.\r\n\r\nIncidentally, both of these tools were written by the same guy - [Sam Stephenson](https://github.com/sstephenson).  He works at [37 Signals](https://37signals.com/), the home of [Basecamp](https://basecamp.com/), the original [Ruby on Rails](http://rubyonrails.org/) app, created by a mystical figure known simply by his initials.\r\n\r\n### Matz/DHH\r\n\r\nSuper quick Ruby history lesson...\r\n\r\n----\r\n\r\nRuby recently celebrated it's 20th birthday which, without doing any consultation of Wikipedia, makes it roughly the same age as PHP.  Ruby's creator and spiritual leader is a guy named Yukihiro Matsumoto, or Matz for short.  PHP obviously grabbed it's share of the market more quickly, and Ruby had scarcely gotten off of the island of Japan for about the first half of that until it was catapulted onto the world stage by one man - DHH.\r\n\r\nDHH is a charismatic developer from northern Europe with a fondness for business and hair gel.  DHH cast off his PHP chains when he found Ruby, created an honest to god framework out of it, open sourced it, and then ran with it.  Much of Rails' rise to prominence coincided with the rise of Github and the two together are probably largely responsible for touching off Git's adoption in the greater marketplace.\r\n\r\nRails has impacted the design of almost every single web framework that has come since in any language, either directly borrowing from it's ideas or reacting to it's opinions.  Sass came in it's wake, and here we are.\r\n\r\n### The Well Grounded Rubyist\r\n\r\nIf I can recommend one Ruby book to get, it's [The Well Grounded Rubyist](http://www.manning.com/black2/) by David Black.\r\n\r\nBlack is one of the few western developers who has been doing Ruby since before Rails came along, and is a preeminent authority on the language.  This book was my introduction to Ruby's version of OOP, which is indescribably more elegant, consistent, and to-the-point than PHP's, and reads almost like a great novel in the way that it builds in intensity from beginning to end and rewards repeated readings.  No, I'm not shitting you.", slug: "few-things-drupal-dev-should-know-about-ruby", summary: "Hi there, probably-front-end-dev-who's-met-and-used-Sass-and-likes-what-they-see.  This is for you.\r\n\r\n### RubyGems\r\n\r\nSass is made out of Ruby - it's a very pleasant, general purpose programming language that's pretty easy to learn and like.  Ruby has a package management system whereby libraries of Ruby code are bundled up into what's known as \"Gems\".  Sass is a gem.  When you install it, you get a couple of new executables to play with in the terminal, namely `sass` and `sass-convert`. The latter of these will help get you started with Sass by converting your straight CSS to Sass.", previous_id: nil, published: true, pub_date: "2013-08-10 03:40:24"},
  {title: "Runtime", body: "Basically, just what it sounds like.  The time during which your application, script, program, or whatever is run.", slug: "runtime", summary: "Basically, just what it sounds like.  The time during which your application, script, program, or whatever is run.", previous_id: nil, published: true, pub_date: "2010-01-31 13:01:27"},
  {title: "Finding Your Co-Founders", body: "<p><a href=\"http://feedproxy.google.com/~r/Techcrunch/~3/WOsw5tuHYkw/\">Finding Your Co-Founders</a>: \"The hardest part of starting from scratch is finding the right co-founders. Ideas, comparatively, are easy. You may spend three years finding your co-founders while you’ll come up with a solid idea every 3 months or so. Luckily, once you settle into a great founding team you’ll be able to execute much faster on that killer idea you all come up with – beating those ten other folks who came up with the same idea at the same time.\"</p>\r\n\r\nYes.\r\n\r\n<p>(Via <a href=\"http://www.techcrunch.com\">TechCrunch</a>.)</p>", slug: "finding-your-co-founders", summary: "<p><a href=\"http://feedproxy.google.com/~r/Techcrunch/~3/WOsw5tuHYkw/\">Finding Your Co-Founders</a>: \"The hardest part of starting from scratch is finding the right co-founders. Ideas, comparatively, are easy. You may spend three years finding your co-founders while you’ll come up with a solid idea every 3 months or so. Luckily, once you settle into a great founding team you’ll be able to execute much faster on that killer idea you all come up with – beating those ten other folks who came up with the same idea at the same time.\"</p>", previous_id: nil, published: true, pub_date: "2009-10-12 11:38:08"},
  {title: "Laravel mutator not working", body: "I'm sure this is obvious, but I just spent too long trying to figure this one out.  The mutator function wasn't even being called.  \r\n\r\nMake sure that the field you want to mutate is included in your model's `$fillable` array, else the ORM doesn't care that you want to do things to it.", slug: "laravel-mutator-not-working", summary: "", previous_id: nil, published: true, pub_date: "2015-05-07 19:24:37"},
  {title: "Title", body: "It has been a week.  I've been working lately on a site for a non-prof out in California.  Their mission is the spread of invasive plant species in California.  I built them a system to allow the crowdsourcing of their Spring Nursery Survey, which is where they send folks out to various botanical nurseries around the state and make sure that they aren't selling any plants that they shouldn't be selling.\r\n\r\nIt's not illegal to sell invasive plant species, most of them are quite pretty.  It's only when they jump the garden fence and escape into the wild that they become a problem.  Being invasive means basically that they grow totally out of control, a big problem in a wildfire prone state like CA.\r\n\r\nAnyhoo, what I've done is build them a system that allows them to work a base of volunteers across the state to go out to nurseries and send back information about those nurseries and whether or not they're selling some of this stuff that maybe they shouldn't be.  It's an almost perfect use case for Drupal, so that kept me busy much of last month.\r\n\r\nThis month is two brand new clients from Austin, TX.  One was already built and launched in a big old Wordpress sprint, and the other is my first legit \"enterprise\" client - a large Drupal setup on which I am now the sole developer.\r\n\r\nI'm ready to play some music, but it's kind of a good thing for the bottom line that I can't this month.  The end of this month ushers in festival season for me.  To say I'm excited is nowhere near enough.\r\n\r\nI really need to work up a new design.  Later...", slug: "title", summary: "It has been a week.  I've been working lately on a site for a non-prof out in California.  Their mission is the spread of invasive plant species in California.  I built them a system to allow the crowdsourcing of their Spring Nursery Survey, which is where they send folks out to various botanical nurseries around the state and make sure that they aren't selling any plants that they shouldn't be selling.\r\n\r\nIt's not illegal to sell invasive plant species, most of them are quite pretty.  It's only when they jump the garden fence and escape into the wild that they become a problem.", previous_id: nil, published: true, pub_date: "2011-03-11 05:00:00"},
  {title: "Tracking Pixels 101", body: "So tracking pixels.  They sound awful.  They sort of are, but we all use them.  One just fired off on you a minute ago when you loaded this page.  That's how Google Analytics works its magic.  But how do they work?  [The GA tracking code is Javascript](http://www.ignoredbydinosaurs.com/2014/09/deconstructing-the-google-analytics-tag) and doesn't say anything about an image pixel.\r\n\r\nStep inside...\r\n\r\n---\r\n\r\n### Dat JS\r\n\r\nSo that javascript does a few things, primarily it creates another javascript tag that pulls down the real \"payload\", which is a hackerish term for \"a bigger ball of code\".  I haven't analyzed that code yet, but one of the things that it does is build a profile of your browser that you're on and the page that you're looking at.  Once it does that it pings GA's tracking servers with that profile which counts as a \"pageview\".  That's the `ga('send', 'pageview')` bit.  But how does that work?\r\n\r\nA tracking pixel!\r\n\r\n### Placement in the DOM, you need not...\r\n\r\nSo a pretty interesting thing about tracking pixels, and anything in the browser really is that it doesn't actually need to be put on the page to exist in memory somewhere.  In fact, even if that pixel is only 1x1 in size, it could bump something out of the way enough to trigger a repaint of the webpage, which might alert you to that pixel's existence, which is something that advertisers and their ilk stringently avoid.\r\n\r\nSo basically, that `ga('send', 'pageview')` ends up generating a request to a server somewhere.  That request looks like this \r\n\r\n~~~\r\nhttps://www.google-analytics.com/collect?v=1&_v=j29&a=806595983&t=pageview&_s=1&dl=http%3A%2F%2Fwww.ignoredbydinosaurs.com%2F2014%2F09%2Fdeconstructing-the-google-analytics-tag&ul=en-us&de=UTF-8&dt=Deconstructing%20the%20Google%20Analytics%20tag%20%7C%20Ignored%20by%20Dinosaurs&sd=24-bit&sr=1440x900&vp=1334x479&je=1&fl=15.0%20r0&_u=MACAAAQAI~&jid=&cid=1626931523.1412365384&tid=UA-8646459-1&z=962163205\r\n~~~\r\n\r\nIn the network tab of your devTools in your favorite browser you can break down all those query string params into something a little more interesting.\r\n\r\n~~~\r\nv:1\r\n_v:j29\r\na:806595983\r\nt:pageview\r\n_s:1\r\ndl:http://www.ignoredbydinosaurs.com/2014/09/deconstructing-the-google-analytics-tag\r\nul:en-us\r\nde:UTF-8\r\ndt:Deconstructing the Google Analytics tag | Ignored by Dinosaurs\r\nsd:24-bit\r\nsr:1440x900\r\nvp:1334x479\r\nje:1\r\nfl:15.0 r0\r\n_u:MACAAAQAI~\r\njid:\r\ncid:1626931523.1412365384\r\ntid:UA-8646459-1\r\nz:962163205\r\n~~~\r\n\r\nSome of that stuff is understandable, some of it is not.  But the point is that that request actually trigger a response of a 1x1 pixel.  \r\n\r\n~~~\r\n# Response headers\r\n\r\naccess-control-allow-origin:*\r\nage:66666\r\nalternate-protocol:443:quic,p=0.01\r\ncache-control:private, no-cache, no-cache=Set-Cookie, proxy-revalidate\r\ncontent-length:35\r\ncontent-type:image/gif\r\ndate:Fri, 03 Oct 2014 18:23:52 GMT\r\nexpires:Mon, 07 Aug 1995 23:30:00 GMT\r\nlast-modified:Sun, 17 May 1998 03:00:00 GMT\r\npragma:no-cache\r\nserver:Golfe2\r\nstatus:200 OK\r\nversion:HTTP/1.1\r\nx-content-type-options:nosniff\r\n~~~\r\n\r\nIf this were the first time I'd visited the internet, there would almost certainly be a set-cookie header in there as well, but since they set that cookie on me a LONG time ago, it doesn't get sent.  \r\n\r\nThe kinda creepy thing is that since Google Analytics is on a large number of sites, and their origin servers are on the same domain (cookies), they can follow you around the internet from site to site to site in a way that nobody else can (save perhaps the other giant analytics providers, which probably have nowhere near the reach, unless you count Facebook).\r\n\r\n---\r\n\r\n### Wow, cool.  So what?\r\n\r\nSo that image pixel is not really the point.  It gets returned in that response, but doesn't get put on the page.  It plants a cookie on you, big deal.\r\n\r\nBut what happens at Google is that the request that was made in the first place gets logged.  It gets broken down by its query string params, and that's how they build the tool.  That's how you know what size browser people are on, what part of the world they're from, what they looked at, and what they clicked on (if you're tracking events).\r\n\r\nThe really interesting part to me, and the part I haven't figured out yet, is how they store ALL that data on the backend to build the reports out of.  Think about it -- they're basically logging every request made to every website that is running their code.  That's a really big number, even for Google.  And then they're able to pull your report suite out of all that data, and sort it out by whatever you wanna know.  Seems pretty cool, and also well beyond the capability of normal relational DBs.\r\n\r\nA post in the future, I imagine....", slug: "tracking-pixels-101", summary: "A high level overview of how tracking pixels work, in Google Analytics or about any analytics suite.", previous_id: nil, published: true, pub_date: "2014-10-04 13:11:06"},
  {title: "The phases of iPhone ownership, continued...", body: "<h2>Phase Two - Love</h2>\r\n\r\nThe day that I knew I'd found the one was July 12, 2008.  The 3G and the OS 2.0 software update had come out the day before.  I'd updated as soon as I could, playing my part in the server issues that Apple had that day.  I was fascinated by the prospect of adding apps, though I didn't really know what I would want to add to the thing that wasn't already there.\r\n\r\nHad a nice loooong road trip down I-81 to contemplate such matters.  I spent most of the ride and all of the battery perusing the app store.  By the time I got to wherever we were going, my life was changed forever.  \"My <i>God</i>, this is going to change everything!  RRE needs an app!  Everybody needs an app!, if for no other reason that to format the information that's already on our website for the mobile screen.  Everybody in the future is going to be carrying these things around, so if you're not with it, you're a friggin Dinosaur!  I wonder how you write these things?  It must not be that hard - the experience is so smooth, it must be really easy!  I need to do some research.\"\r\n\r\nSo I'll spare the details of what I found about programming iPhone apps, since that's basically the theme of this entire blog, but let's just say it's a <em>bit</em> more involved than I thought.\r\n\r\nMy involvement with Facebook only really began after the installation of their iPhone app.  Same with Twitter.  Or Wordpress.  Or jogging.  Or blogging.  And on and on.  So in a way, you could say that everything I've gotten interested in, or re-interested in, over the last year and a half - programming, design, marketing, my band - has been because of that little doo-hicky.  Thanks Steve!  On the other hand, the recent dearth of LiveDownloads is also partially attributable to that thing, also, since engineering and production have kinda lost a bit of their luster as a serious career path for me.  Sorry, guys.  Net positive, though, to be sure.\r\n\r\n<h2>Phase Three - Seperation and reunion</h2>\r\n\r\nI lost my original iPhone.  I won't go into where, or when, or how, but it was a major bummer.  I'd already bought a Mac by that point, since iPhone and Mac development doesn't happen on a Windows machine.  Oh well, twist my arm.  Besides, in the year that I'd been an iPhoner, my life had slowly but surely realigned itself around being in touch and on top of things, so even if I hadn't decided on development as a future career path I was certainly not going back to the \"old way\".\r\n\r\nLuckily, at the Rockaway Mall Apple store, they gave me the AT&T subsidy, so that my 3G didn't cost me a million bucks.  Only half a million.  The 3G, of course, has GPS, which I didn't think was really going to be that big a deal.  I was already a good navigator and always had a map in my pocket.  I was wrong.  \r\n\r\nGPS went hand in hand with a cool app that I'd gotten just after that called <a href=\"http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=291890420&mt=8\">iMapMyRun</a>, which tracks your runs, your training progress, and just happens to run on that little doo-hicky that you already had in your hand since you like to listen to tunes while you jog, which, by the way, neither did you jog nor did you listen to tunes a year prior to that.  Goodness.  So you could definitely say that loosing my original phone turned out to be a blessing in disguise.", slug: "phases-iphone-ownership-continued", summary: "<h2>Phase Two - Love</h2>\r\n\r\nThe day that I knew I'd found the one was July 12, 2008.  The 3G and the OS 2.0 software update had come out the day before.  I'd updated as soon as I could, playing my part in the server issues that Apple had that day.  I was fascinated by the prospect of adding apps, though I didn't really know what I would want to add to the thing that wasn't already there.\r\n\r\nHad a nice loooong road trip down I-81 to contemplate such matters.  I spent most of the ride and all of the battery perusing the app store.", previous_id: 75, published: true, pub_date: "2009-07-20 18:02:00"},
  {title: "The best, least understood aspect of Drupal multisite config", body: "We are currently running a Drupal multisite installation on Acquia's enterprise cloud.  We have a bunch of different domains for the various sites, as well as the various environments in which they run.  The development domains look like `pddah.dev.abm`, `pddah.staging.abm` etc, presumably to prevent them from being accessed from the outside world.  \r\n\r\nThis setup requires a rather voluminous sites.php file in the root of the `sites/` directory to map all the potential incoming hostnames to their correct websites. \r\n\r\nA simpler way around this is to make use of how Drupal maps incoming hostnames to the correct `sites/*` folder in the first place.  \r\n\r\n---\r\n\r\nIf there is nothing in the `sites/` folder except for default, then that is what will get loaded no matter what the incoming domain.  This is Drupal's default config, in fact.  If you want to go multisite, you create `sites/*` directories for each of your websites' domains and Drupal will figure it out for you.  But, it's rules for how it routes are a little bit liberal.\r\n\r\nFor example, I'm running `pddnet.com`, but the website actually exists in `www.pddnet.com`.  I only have a `pddnet.com` folder in `sites/` though, so that means that any subdomain of `pddnet.com` will also route to that directory.  If I create a local development domain `local.pddnet.com`, assuming my local network and apache configs are in order, Drupal will load the config out of the `pddnet.com` directory without having to do any more work or add anything to `sites.php`.\r\n\r\nThis means that you can create `dev.pddnet.com`, `staging.pddnet.com`, `whateveryouwant.pddnet.com` and provided the network plumbing is right between here and there, it'll just work.  \r\n\r\nOf course, this also requires you having the same settings file in all of these different environments, which means that either you have to have the same DB settings in every environment, or you need to figure out some other way to load in env specific config into that file.\r\n\r\nAcquia has a methodology that I'm probably under NDA to not divulge here, but it was devised in an era before modern PHP was a thing.  These days we have tools like [phpdotenv](https://github.com/vlucas/phpdotenv), and it's that tool that I'm exploring currently for some work that we're doing here that'll span multiple environments.\r\n\r\nWhen I work out how best to integrate it with Drupal, I'll let you know.  So far so good though.", slug: "the-best-least-understood-aspect-of-drupal-multisite-config", summary: "", previous_id: nil, published: true, pub_date: "2015-05-13 16:34:45"},
  {title: "Some more ruminating about Laravel", body: "### Expository info (skippable)\r\n\r\nSo, for nigh 6-7 years now I've been a Rails enthusiast.  I bought the PragProg AWDWR book when it was covering Rails 2.x and had the beach and hammock on the cover, and then proceeded to take years to figure out everything the book was actually talking about from the bottom of the stack to the top.  I find it very enjoyable to be able to get my ideas out (in code), and Rails is still one of the cushiest frameworks around in terms of ease of use.  It's almost as though it were a central tenet of it's philosophy...\r\n\r\nFor nigh 6 years now, I've been a Drupal professional.  Drupal isn't the sexiest platform on the block, but it's been marketed in an absolutely genious manner and has seen incredible traction in sectors that have jobs-o-plenty -- government, educational institutions, publishing, basically anything that needs a robust CMS.  I do not, however, find it very enjoyable to work with.  The aspects of Drupal that are the most \"Drupalistic\" - the Form API, render arrays, \"configuration as convention\" - just feel so out of sync with how the rest of the development world does things.  However, see the above point about jobs-o-plenty, and there is still plenty of fun code to be written around the edges of a larger and more mature Drupal installation.  \r\n\r\nDrupal 8 is going to come out some day though, and with it will come the invalidation of pretty much everything the wider Drupal community has ever known about writing code for Drupal.  It's going to require those of us who enjoy writing code to basically start from scratch with a new framework, only this framework is GIGANTIC and carries with it plenty of interesting architecture opinions and non-opinions alike from it's 12 year history.  So I suspect I'm not alone in thinking \"if I have to learn an entirely new thing anyway, will learning D8 be the most effective use of my limited time?\"  \r\n\r\n--\r\n\r\nSo, given these factors, I've been watching Laravel for a long time, since V3.  I haven't really started playing with it until this most recent major release - V5.  My initial thoughts were \"oh, this is basically PHP on Rails\" - I mean this as a complement.  But, since I already knew enough about Rails to be effective and have fun, why not spend the time learning Rails better?  So that's what I did before the Drupal community at large took up \"get off the island\" as a mantra.\r\n\r\nFor the last few months though, I've spent a lot of time building small-ish things with Laravel, and have even had the team begin a Lumen-backed project.  I've been going back through the old Laravel podcasts, since I think podcasts are a wonderful way to absorb the philosophy of whichever developer they have on.  (Kudos to you Taylor for consistently being on the podcast about your framework.  That actually says a lot about your dedication to moving this whole thing forward).\r\n\r\nOk, with that long winded exposition out of the way, a few thoughts...\r\n\r\n---\r\n\r\n### The aforementioned ruminations\r\n\r\n\r\n- I like how Laravel is immediately familiar to someone who's worked with Rails down to the API of say, establishing relationships in Eloquent or the `up` and `down` methods on migrations.  Almost any server-side framework that has come since Rails in any language has been either an embrace of or a reaction to its widely marketed \"opinions\".  I was listening to an older Laravel podcast where the topic was some haters in the PHP community (supposedly) accusing Laravel of being \"too Rails-y\" or something.  I consider this a plus to the framework (obviously), and I think designing a framework around the opposite paradigm - trying to not make it too Rails-y - immediately builds walls around our various yards in the pan-linguistic developer community.  If the rules and the terminology are similar, even if it's in a different programming language, we can all get up to speed with the new thing faster and stop wasting our time learning new concepts that are actually the exact same concepts by a new name.\r\n- I like how Laravel takes Rails' opinionated-ness and actually goes a step further.  Rails does not have Auth built into the core.  For some reason Rails has Active Job and Turbolinks and Coffeescript, but not Auth.  I'd challenge anyone out there to find me a public Rails app without Auth.  Building Auth into the framework is an obvious move, and I thank Laravel for doing so.  Same goes for billing, or having a Redis cache driver, or having built in support for queued jobs.  I was listening to a really old Laravel podcast last night, and Taylor basically described exactly the interface that now exists in L5 - a `Billable` trait that only uses Stripe and that's that.  The kind of simplicity that can only come out of being opinionated.  The kind of simplicity that Drupal can never have precisely because of it's lack of opinions in the architecture.\r\n- Though it's got its share of fans, I don't get a sense of religion off of Laravel (yet).  There's a religion around Drupal, and I think religion is mostly a dangerous thing in that it encourages its followers to follow, but not to ask too many questions of its leaders.  The relatively insane pace of development and major version bumps and refactoring of the file structure in these bumps is a double edged sword, but it kinda keeps everyone from getting too set in the \"old ways\" and offers to me a subconscious clue that Laravel is still casting about for the \"righter\" way to do things, that nothing is too sacred yet.  \r\n- With that, I like that Laravel is finally offering a LTS release.  This will allow me to actually sell it to my boss, and feel better about investing time in really learning the thing.  I'm feeling more than a little burned by Angular (talk about learning a mountain of new jargon), but at least the whole Angular 2 flap is a good learning experience for evaluating a new technology.  \"Be skeptical of shiny new things.\"\r\n", slug: "some-more-ruminating-about-laravel", summary: "", previous_id: nil, published: true, pub_date: "2015-05-28 14:23:14"},
  {title: "What is curl_setopt()?", body: "When I first started getting into this, I read a lot on PHP and remember clearly having my eyes go crossed when I came across code like this --\r\n\r\n~~~php\r\n<?php\r\n// Example code: Creating Drupal 7 nodes by POSTing from cURL in PHP:\r\n\r\n$site = \"127.0.0.1/d7\";\r\n$user = \"someusername\";\r\n$pass = \"theusersassword\";\r\n$crl = curl_init();\r\ncurl_setopt($crl, CURLOPT_RETURNTRANSFER, 1);\r\ncurl_setopt($crl, CURLOPT_USERAGENT, 'PHP script');\r\ncurl_setopt($crl, CURLOPT_COOKIEJAR, \"/tmp/cookie.txt\");\r\ncurl_setopt($crl, CURLOPT_COOKIEFILE, '/tmp/cookie.txt');\r\n\r\n/// etc, etc, etc\r\n// taken from http://blog.ampli.fi/creating-drupal-7-nodes-with-php-via-the-restws-api/\r\n~~~\r\n\r\nSo, in a nutshell, Curl is a very popular Linux/Unix command line program for doing things across the internet - downloading things, uploading things, pinging remote servers with requests, etc.  Curl has a wealth of options that you can set with command line flags (`-I` to only get response headers, `-D` to post form data, `-X` to specify a HTTP method, etc).\r\n\r\nPHP has a built in function for working with Curl, thereby making it easy to programmatically make HTTP calls to other servers.  Of course, to really be able to use Curl in a way that's analogous to it's usage on the command line, you need a way to set those flags.  `curl_init()` sets all that up for you, and all you really need to do after that is set whatever flags you need in calls to `curl_setopt()`.\r\n\r\nSee the docs here - [https://php.net/manual/en/function.curl-init.php](https://php.net/manual/en/function.curl-init.php).", slug: "what-is-curl_setopt", summary: "", previous_id: nil, published: true, pub_date: "2015-06-01 17:03:21"},
  {title: "For my friend, who's quitting a band", body: "So yeah.  I mean, obviously I can't read your mind and get to all the *real* reasons that you'd be wanting to move on, so I'll just kinda riff on my experience and hopefully it won't come out too narcissistic.  I don't really have time to write this down in a narrative fashion, so I'm just going to bullet point some of the thoughts I still remember from that period.\r\n\r\n- One of the things that I remember well is the space that was opened up in my mind for not having a clock ticking in the background until I hit the road again.  I'd had that clock in my head for so long that it was strange to not have it there anymore. I imagine that getting out of jail must be really disorienting for the first little while.\r\n- An interesting thing - my wife and I had been married for a couple years and together for several by this time.  We owned a house and had two kids now, but we'd never **really** lived together until I quit that band.  That was a revelation that took some trips to therapy to reveal, because \"things should be great - I'm finally off the road, but things are actually terrible!  WTF?\".\r\n- I was also immediately struck by how I was able to form a bond with my oldest son that I'd never have been able to form if I hadn't quit.  The lack of that ticking clock also meant that he could count on me being there for bedtime and reading stories and all that.  There was no more Dad going out of town for a little while.  This was wonderful.\r\n- Along with this however came unemployment.  I skipped out with an idea and a path to follow but not the means or skills to execute the idea, and my path was very high up on a hill from where I was at the time and required a lot of lost, spiritual bushwhacking to get to.  This meant scrounging hard for freelance web dev work for the first year, and not making ends meet, which was brutal enough but...\r\n- Couple that with what I remember most clearly from that period.  This was 2010, and a *lot* of people were out of work, so there were more than a few stories in the media about this situation.  The more thoughtful of them described the loss of \"identity\" that comes along with the loss of employment.  I can only relate this to my own experience...\r\n    - Being a musician is a very monastic pursuit in that we feel it as a calling from a higher power to follow this path.  \r\n    - It is, at the same time, a very self-centered pursuit in that you're basically going out and strutting like a rooster in front of a hall full of people every night and putting all other obligations on the back burner to do so.  This requires pretty much total, all encompassing dedication on the part of the musician toward this pursuit.  When you take that away (in my humble opinion), you're taking away much more than just a job and a lifestyle.  It requires a shift in personal purpose - a mental, emotional, and spiritual retooling that was the most excruciatingly difficult thing I've ever been through.  Couple this with the job market in 2010 and I definitely looked back and wondered if I'd done the right thing a lot.  (even though I knew I'd done the right thing....)\r\n    - Also, like I said yesterday, the letting go of that dream was really, really hard.  I knew it would be, but the difference between committing to and doing is just as hard as the other major life commitments - marriage, fatherhood.  After my share of those types of commitments, I realize that there is a strangely dissonant mental space between making and following through on these types of commitments.\r\n- The gigging musician gets used to having people tell him how cool he is regardless of actual job perfomance.  Turns out this is the opposite of how the rest of the world works.  Removing this stimulus is actually a good thing, though.  I wrote about this here - [http://therealgrubb.tumblr.com/post/818984925/pruning-the-ego](http://therealgrubb.tumblr.com/post/818984925/pruning-the-ego)\r\n\r\nI did a lot of yoga and had a lot of therapy for the first year because I needed something to hold on to.  Then at this point, Tyler Grant and Billy and Drew basically saved my life by opening up that slot in ENB and then letting me fill it.  My very first trip out with them I (seemingly randomly) landed 2 contracts and went from desititute to fully employed within 4 weeks.\r\n\r\nLike I said in that post yesterday - it's complicated.  I knew at the time that I was making the right decision.  I did not know at that time how long the investment would take to actually come back, though.  This was basically hubris, but I thought I could engineer a lucky career landing since I'd lived an extremely luck-filled life up to that point.\r\n\r\nI've often considered this whole experience to be the actual transition to adulthood for me.  \r\n\r\n---\r\n\r\nSo this is not the cheeriest summary, right?  But this was mostly the wartime account, which you'd expect to be burly.  After that year, things started steadily improving.  \r\n\r\n- I found plenty of work once I actually learned enough about my new trade.  \r\n- We had #3 in 2012, shortly before ENB began to wind back down.  \r\n- I took a full time job, my first ever, in late 2012 because the pressure of working for myself while supporting a family of 5 was just a bit much.  It felt sad at the time, but this job has turned out to largely be the team experience I always longed for in RRE, and I'd consider the past 2 years to be as fruitful a creative period as any I've ever had.  I'm just not on a stage doing it.  Rather, the stage is different and I don't have to pack up every night.\r\n- I'm making grownup money now, which changes your outlook on life in a really crazy way when you don't have to constantly choose between paying the power bill and buying groceries.\r\n- I have a really amazing relationship with my wife now, and I can tell you for a fact that we could not have gotten to this place with my still being in that situation.\r\n- I have 3 of the coolest little boys, and I don't ever have to tell them I won't be home for a little while.  \r\n- I'm happy now.  Even though it was fun, I was not happy then.  \r\n- I always knew that I didn't want to be on the road forever, but exact how to accomplish that didn't reveal itself to me until shortly before I began this blog (6 years ago now).\r\n\r\nIn short, the investment that I viewed it as at the time didn't work out *how* or *when* I wanted it to at the time, but that's the great thing about life.  It has more than worked out - it has come back big time.  These subtleties and complexities are what makes life what it is, yknow?  Perhaps this is why so many people just keep on doing what they always do, whether they're happy with it or not.  It also makes it hard to sum up in a Facebook post.\r\n\r\nI salute you though, and anyone who decides to change something they're not at peace with.  Please reach out if you ever want to.", slug: "for-my-friend-who-s-quitting-a-band", summary: "", previous_id: nil, published: true, pub_date: "2015-06-17 14:01:53"},
  {title: "stanfordiPhoneClass", body: "This was left for us earlier today in the comments:\r\n\r\n<em>You may or may not know this but Apple and Stanford are offering free iPhone development courses online</em>\r\n\r\n<a rel=\"nofollow\" href=\"http://www.engadget.com/2009/04/03/apple-and-stanford-to-offer-free-iphone-development-courses-onli/\">http://www.engadget.com/2009/04/03/apple-and-stanford-to-offer-free-iphone-development-courses-onli/</a>\r\n\r\nAnd it's true.  The whole thing was available in PDF form.  I hadn't even thought about it until just now (thank you Chuck), so I'm gonna go download the course again at\r\n\r\n<a href=\"http://www.mobileorchard.com/take-stanfords-iphone-programming-class-for-free\">http://www.mobileorchard.com/take-stanfords-iphone-programming-class-for-free</a>", slug: "stanford-iphone-class", summary: "This was left for us earlier today in the comments:\r\n\r\n<em>You may or may not know this but Apple and Stanford are offering free iPhone development courses online</em>\r\n\r\n<a rel=\"nofollow\" href=\"http://www.engadget.com/2009/04/03/apple-and-stanford-to-offer-free-iphone-development-courses-onli/\">http://www.engadget.com/2009/04/03/apple-and-stanford-to-offer-free-iphone-development-courses-onli/</a>\r\n\r\nAnd it's true.  The whole thing was available in PDF form.", previous_id: nil, published: true, pub_date: "2009-04-03 21:18:47"},
  {title: "SEO in action", body: "So an interesting thing happened yesterday.  I have this cool plug-in installed on this blog.  It's called StatPress, and it all but lets me look back through your screen at you.  It logs all traffic to this blog, IP addresses, referring links, what OS and browser you're using, and what search term you entered into Google to find my blog.  If this is creepy to you, you should know that every time you're on the internet you are broadcasting this info with every single click of the mouse.  It's not that big of a deal.  I don't know who you are, just what ISP you use and in what general area of the world you live.  I know that there's a 6 to 1 chance that you're reading this on a computer that has Windows XP on it.  I know that you are most likely browsing on Firefox 3, and that if it's not that it's IE7, and if it's not that, then you're probably on an iPhone.  Good thing I installed that mobile plug in...\r\n\r\nThis is all just info that entertains my analytical mind while sitting in a tour bus on the way to DelFest.  Usually when I throw up a new post there's a little blip in traffic unless I post a link on Facebook, in which case there's usually a big blip.  I try to save those for the really good ones.  The ones like \"<a href=\"http://ignoredbydinosaurs.com/blog/?p=157\">Coolest iPhone App Ever</a>\".  The act of titling that post that way was an unwitting example of what the social marketing dorks, I mean cool people, call Search Engine Optimization, or SEO.  It didn't occur to me until a few days later when someone in France googled SimpleMindsXpress, and amazingly my blog post was the first one that popped up.  On the French Google.  The internet is weird.\r\n\r\nSo, briefly, how Google Works...\r\n\r\nGoogle is constantly scanning more or less the entire internet to add pages to it's humongous database of searchable content.  The automated robot that does this scanning is called a \"Spider\".  The Google Spider is my blogs most frequent visitor.  It's already been here 9 times today, and just fetches a blog post at random as far as I can tell.  It scans the content toward the top of the blog post and then moves on.  It adds that content to it's database and then that post is searchable.  Google weights pages that have more links <strong>to</strong> them as being more important than others that show up with the same search terms with fewer links to them.  I once read hyperlinks as being described as the \"currency\" of the internet.  Makes sense if you consider that the more links a particular page has pointed at it, the more wealthy it's likely to be in terms of traffic, especially search traffic.  Why this is important to you and your band is that you better put the pertinent info that you want Google to notice toward the top of the page.  If you don't have the Page Title/Info/Author metadata correctly filled in (ask your web guy, or better yet, <a href=\"http://ignoredbydinosaurs.com/\">ask me</a>), you're making yourself harder to find.\r\n\r\nSo anyway, yesterday some marketing guy in South Carolina went and googled up \"coolest buiness related iPhone apps (sic)\".  Somehow, misspelling business made my blog post show up in the top ten list of results.  I didn't misspell business in my blog post.  I don't know.  But anyway, this guy hops on Twitter and <a href=\"http://twitter.com/wscottbrandon/status/1871251133\">links to my blog post</a>.  I get on StatPress a couple hours later and notice a spike in traffic to that post.  So I dig a little deeper and notice the referring link to this guy's Twitter update, and the beauty and utility of SEO becomes a factor in my life for the first time.  I've only been blogging since February, and I'm writing this most for my own edification and partly for my friends and associates.  After yesterdays incident it occurred to me that I should probably put my email address on here somewhere.  So I did.  And now my brain is humming along about how and why SEO is an important thing to you and me.  Oh, and trying not to put an obnoxious amount of hyperlinks into this post.\r\n\r\nNow how can I get this <a href=\"http://lmgtfy.com/?q=johnny+grubb\">other Johnny Grubb</a> to let me in the top ten.  Is that Carly Simon I hear?", slug: "seo-in-action", summary: "So an interesting thing happened yesterday.  I have this cool plug-in installed on this blog.  It's called StatPress, and it all but lets me look back through your screen at you.  It logs all traffic to this blog, IP addresses, referring links, what OS and browser you're using, and what search term you entered into Google to find my blog.  If this is creepy to you, you should know that every time you're on the internet you are broadcasting this info with every single click of the mouse.  It's not that big of a deal.", previous_id: nil, published: true, pub_date: "2009-05-22 16:47:09"},
  {title: "Apple, iTunes, and Anti-trust", body: "<p>I was just thinking about iTunes this morning as I was downloading the <a href=\"http://www.amazon.com/Lucious-Foot-Chico-Dusty-Explicit/dp/B003TX24OU/ref=sr_1_1?ie=UTF8&s=dmusic&qid=1279501246&sr=8-1\">new Big Boi</a> record.  iTunes is the only option to download music on my iPhone.  I'd rather download music from Amazon mostly because they offer their catalog in mp3 rather than AAC format, because their albums tend to be a dollar cheaper, but mostly I think Apple could use some competition.</p>  \r\n\r\n<p>Amazon has the MOST outstanding iPhone app I've ever seen.  It's not quite as easy as the website for doing heavy research, but only because of the size of the screen.  I actually think the interface is better on the iPhone app.  All the information you need is right there, and it's as intuitively laid out as it could possibly be.  You can track your order, the search is fantastic and all of the product reviews are right there.  Unfortunately, due to the rules in the iPhone SDK and the restrictions that Apple places on iPhone developers, you can't download music from Amazon to your iPhone.  There's nothing preventing this feature from a technical standpoint, though Apple would argue that outside developers might write crappy software that would degrade the performance of blah blah blah.  I don't think Amazon writes crappy software.  The only real reason is to prevent competition.</p>\r\n\r\n<p>iTunes is the \"largest seller of music on the planet\".  I'm not in the mood to do any research on the market share of the iPod and the iPhone in terms of smartphones and mp3 players, but it's obviously substantial.  In terms of mobile delivery of digital music, it's a virtual monopoly.</p>\r\n\r\n<p>If/when the DOJ (or more likely the EU) starts making noise about opening anti-trust charges against Apple to force it open it's platform up a little bit, I'll be cheering them on.</p>", slug: "apple-itunes-and-anti-trust", summary: "<p>I was just thinking about iTunes this morning as I was downloading the <a href=\"http://www.amazon.com/Lucious-Foot-Chico-Dusty-Explicit/dp/B003TX24OU/ref=sr_1_1?ie=UTF8&s=dmusic&qid=1279501246&sr=8-1\">new Big Boi</a> record.  iTunes is the only option to download music on my iPhone.  I'd rather download music from Amazon mostly because they offer their catalog in mp3 rather than AAC format, because their albums tend to be a dollar cheaper, but mostly I think Apple could use some competition.</p>  \r\n\r\n</p>", previous_id: nil, published: true, pub_date: "2010-07-19 02:04:55"},
  {title: "Javascript - named function declaration or assign to a variable?", body: "What's the difference between assigning an anonymous javascript function to a variable or just declaring a named function in the first place?  Turns out \"hoisting\" of the function only works if you declare it as a named function in the first place.  Assigning an anonymous function to a variable doesn't perform the hoist.\r\n\r\n~~~js\r\n<html>\r\n  <body>\r\n    <script>\r\n \r\n      (function() {\r\n        console.log(f()); // 'hello'\r\n        function f(){\r\n          return 'hello';\r\n        };\r\n      })();\r\n \r\n      (function() {\r\n        console.log(f()); // undefined\r\n        var f = function() {\r\n          return 'hello';\r\n        };\r\n      })();\r\n \r\n    </script>\r\n  </body>\r\n</html>\r\n~~~", slug: "javascript-named-function-declaration-or-assign-variable", summary: "What's the difference between assigning an anonymous javascript function to a variable or just declaring a named function in the first place?  Turns out \"hoisting\" of the function only works if you declare it as a named function in the first place.  Assigning an anonymous function to a variable doesn't perform the hoist.\r\n\r\n<script src=\"https://gist.github.com/JGrubb/6043377.js\"></script>", previous_id: nil, published: true, pub_date: "2013-07-20 02:04:35"},
  {title: "Reddit.", body: "I've been killing time the past couple of weeks with <a href=\"http://Digg.com\">Digg</a> and <a href=\"http://reddit.com\">Reddit</a>.  Yes, I just recently discovered them.  The Digg experience is more polished, but Reddit feels a little bit more real.  They're both essentially services where people submit links to interesting articles that are then voted on by the crowd - up or down - and the ones that the crowd finds more interesting naturally float to the top.  Reddit's edge for me though is that users can submit their own essays for display/storage on the site - sorta like the rants and raves section on Craigslist.  The health care debate has been raging (literally) for the the past couple of weeks, and I find the discussion on articles and essays to be as good as the articles themselves.\r\n\r\n<a href=\"http://www.reddit.com/r/reddit.com/comments/9354p/fuck_you_blue_cross_i_give_you_fuckers_over/\">Here's</a> a nice rant on the Blue Cross.  I can certainly identify.\r\n\r\n<!--break-->\r\n\r\nThe beauty of Reddit is that it has a <a href=\"http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=302732279&mt=8\">great iPhone app</a>.  It's functionally just like the normal website, which is to say a little spartan in terms of design.  The fantastico part of the app is it's integration with <a href=\"http://www.instapaper.com/\">InstaPaper</a>.  I discovered all of these services at the same time, since they basically feast off of each other (much like the tech press).  InstaPaper is totally made for somebody like me.  What it does is let you save stuff you want to read on the web, but don't necessarily have the time for right then.  You install a little bookmark in your browser which send the page to InstaPaper's server.  Their server then downloads the page (I think) and pulls it up for you when you go to the site later.\r\n\r\nThis is where it gets really good.  Say you're on the plane getting ready to pull back from the gate, about to lose cell service for however long.  InstaPaper also has a <a href=\"http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=284942713&mt=8\">great iPhone app</a> that will pull the article off the server and cache it on your phone, meaning you don't need access to the web to read the article.  It even formats it for the iPhone by pulling the stuff from between the \"content\" div tags, which is presumably the article that you want to read, and does away with all the bells and whistles and CSS and ads and all that.  The end result isn't perfect, but it'll keep you busy on the plane for a while.\r\n\r\nSo the process for me last week was this : Reddit -> find interesting article -> click Save to InstaPaper.  Before I got on the plane -> open up InstaPaper and download everything I had marked for later.  Kept me busy for most of the flight.  Enjoy, news geeks...\r\n\r\n", slug: "reddit", summary: "I've been killing time the past couple of weeks with <a href=\"http://Digg.com\">Digg</a> and <a href=\"http://reddit.com\">Reddit</a>.  Yes, I just recently discovered them.  The Digg experience is more polished, but Reddit feels a little bit more real.  They're both essentially services where people submit links to interesting articles that are then voted on by the crowd - up or down - and the ones that the crowd finds more interesting naturally float to the top.  Reddit's edge for me though is that users can submit their own essays for display/storage on the site - sorta like the rants and raves section on Craigslist.  The health care debate has been raging (literally) for the the past couple of weeks, and I find the discussion on articles and essays to be as good as the articles themselves.\r\n\r\n<a href=\"http://www.reddit.com/r/reddit.com/comments/9354p/fuck_you_blue_cross_i_give_you_fuckers_over/\">Here's</a> a nice rant on the Blue Cross.  I can certainly identify.\r\n\r\n", previous_id: nil, published: true, pub_date: "2009-07-22 14:57:50"},
  {title: "A URL strategy", body: "I've got this decoupled CMS brewing in my head, and wanted to jot down what I think would be a kind of cool method for generating URLs and URL redirects and making sure everything stays in sync without having to maintain a giant table of redirects (ala Drupal).\r\n\r\nThe basic scheme would look like this -- `site.com/{item_type}/{item_id}/{item_slug}`.  The type parameter could probably be optional, but it's there for now.  An example URL could be `ignoredbydinoaurs.com/posts/123/the-totally-awesome-seo-juice`.  \r\n\r\nOf course, in whatever framework you're working in, those url segments are going to be broken down into tokens passed into whatever controller function is running the query.  So your query would/could look like this in the controller \r\n\r\n~~~rb\r\n\r\ndef show\r\n    @post = Post.find(params[:id])\r\n    if @post.slug != params[:slug]\r\n        redirect_to \"/\#{@post.type}/\#{post.id}/\#{@post.slug}\", :status => :moved_permanently\r\n    end\r\nend\r\n\r\n~~~\r\n\r\nThis has the advantage of never going out of sync with a redirect table, and never opening up the possibility of having an alias and a redirect create a loop.  This happens often in Drupal, so with this scheme, you're only looking up based on an item's ID, which should never change.  If somehow a URL has made it out in the the wild that is not the preferred URL, nothing breaks, it just gracefully performs a redirect to the proper URL.\r\n\r\nThe only significant portion of the URL is the ID, everything else is decoration or SEO juice.\r\n\r\n---\r\n\r\nSomewhat off topic, but if you had a use cases where you were running multiple sites out of this CMS, and you had editors that frequently shared content, or wrote up each other's content for a sister site, then the primary key of of the article can stay consistent across different publications.  \r\n\r\n\"How would different editors utilize each other's content in that case?  Like, how would different pubs have the same article with a different summary on this instance from that instance?\"\r\n\r\nPostgreSQL schemas, that's how.  I'll write that up, probably sometime in 2017.\r\n\r\n---\r\n\r\n**2016, Django update**\r\n\r\nThis wasn't exactly hard to do, but I was surprised to find that nobody really wrote up how to simply issue a redirect like this in a Django view (controller to the rest of the world).  Assuming that `get()` or `get_queryset()` was the answer, but I was wrong.  [This was the help piece of info](https://docs.djangoproject.com/es/1.9/ref/class-based-views/generic-display/#detailview) that I needed.  Did I mention how much I love Django's docs?\r\n\r\nThis is the method that drives this very page.\r\n\r\n~~~python\r\n\r\nclass DetailView(generic.DetailView):\r\n    model = Post\r\n    \r\n    def dispatch(self, request, *args, **kwargs):\r\n        object = get_object_or_404(Post, pk=self.kwargs['pk'])\r\n        if object.slug != self.kwargs['slug']:\r\n            return redirect(object, permanent=True)\r\n        # else, delegate up\r\n        return super(DetailView, self).dispatch(request, *args, **kwargs)\r\n\r\n~~~", slug: "a-url-strategy", summary: "", previous_id: nil, published: true, pub_date: "2015-04-28 20:28:35"},
  {title: "First experiences with Drupal and HHVM", body: "After reading [the news about Fastcgi support landing in HHVM](http://www.hhvm.com/blog/1817/fastercgi-with-hhvm), I had to finally give it a try.  I'll assume that you're at least familiar with HHVM and it's design goals, but if you aren't [the HHVM wiki](https://github.com/facebook/hhvm/wiki) is a good place to start.  In a nutshell, it's a new PHP runtime courtesy of Facebook that, if you can get it working, promises to run circles around any PHP interpreter currently on the market.  \r\n\r\nSo I came into work on Wednesday fired up to give it a try.  I wasn't expecting anything at all, since the sites I work with for my day job are pretty large and have a decent number of contrib modules installed.  In case you're wondering, core Drupal is supposedly 100% on the HHVM now, but contrib is a different story.  \r\n\r\nThe first thing you should know is that it only runs on 64-bit version of Ubuntu, so head over to Digital Ocean and fire one up.  I prefer 12.04, so that's what I conducted this experiment on.  The first link above gives instructions on how to install HHVM via apt, so that's the route I went.  I first tried on the tiny little box that this site runs on, which is a 32-bit version of Ubuntu, and while the apt repo would update itself with the new HHVM repo, it wouldn't install.  So, onto plan B, which involved a 1G box running a 64-bit version.\r\n\r\nThis one installed from the HHVM repo without a hitch -- init script in /etc/init.d/ which pointed to some configs in /etc/hhvm.  A quick perusal of that config script, which looked very much like an Nginx config, looked pretty straightforward.  Installing Nginx and git and everything else I need to stand a site up was routine.  Looking good.  So `sudo service hhvm start`, and we're off to the races.  `top` showed the hhvm process running as `www-data` so I hit the root URL.  `Page not found` was the only feedback I got.  `curl -I` gave me an `x-something-something` header that said HPHP, so I was puzzled.  HipHop was listening on port 80 and was directly catching the web traffic, as opposed to standing behing Nginx and listening on port 9000.\r\n\r\nIt took me about 30 minutes of fiddling around, but the real clue was in the instructions for how to start HHVM on a system that doesn't have a repo installer.  \r\n\r\n~~~\r\ncd /path/to/your/www/root\r\nhhvm --mode server -vServer.Type=fastcgi -vServer.Port=9000\r\n~~~\r\n\r\nSo, I took another look at the `/etc/hhvm/server.hdf` config file that the init script was pointing to and noticed that it was set to listen on port 80, not port 9000, and it was set inside of a `Server {}` block.  That `Server {}` block that looked like the perfect place to put `Type = fastcgi`, so I did, and changed the port to 9000.  The docs indicated that the process needs to be started from the root of your PHP app, but that might only apply to non-fastcgi HHVM.  I started it from there anyway, and I finally had the thing working.\r\n\r\nStandard \"standing an existing Drupal site up on a new box\" fiddling around with connections and file system settings and I actually got the thing to stand up after about 90 minutes of playing with it.\r\n\r\n#### Thoughts\r\n\r\nI'm a pretty good sysadmin for a front end developer, but I'm still just a front end developer.  It was, however, very easy to find my way around the configs and start to get a sense of what HHVM does.  I ended up upsizing the box to a 4G instance for a little bit after it started giving me some memory-related errors that I didn't have the skills to diagnose.  I have no idea if that much RAM is needed, but it cost about <strike>$.20</strike> $.12 to bump it up for a couple hours and find out.\r\n\r\nThe beautiful thing about it was that once I finally figured out how to stand it up correctly, my existing Nginx/FPM config (a derivative of Perusio's) worked out of the box with absolutely no other intervention.  When I got stuck once by a cache clear that I suspect was the real cause of my memory issue, I shut HHMV down, brought FPM up and got unstuck.  After I was stabilized again, I shut FPM back down and brought HHVM back up.  It was seamless.  \r\n\r\nI finally gave up after a little bit because although it was working, the HHVM logs were full of notices, and I repeatedly hit a wall with some function, first in the gd lib and then in apachesolr, that didn't like the input it was being fed.  I had to get back to \"real work\", but I will dive back in very soon and hopefully be able to contribute some feedback.  The maintainers are extremely friendly and active on IRC.\r\n\r\nI'm very, very excited for the future of this project and would highly recommend giving it a try.  I was amazed that I was able to get anything to load on it at all, and am salivating at the thought of actually getting the VM warmed up with a bunch of repeated requests.  When it *is* ready for prime time across a wide variety of PHP apps, it's going to change the way people think about interpreted languages in general, and is going to single handedly contribute to a faster web.  For this, we thank you Facebook.", slug: "first-experiences-drupal-and-hhvm", summary: "After reading [the news about Fastcgi support landing in HHVM](http://www.hhvm.com/blog/1817/fastercgi-with-hhvm), I had to finally give it a try.  I'll assume that you're at least familiar with HHVM and it's design goals, but if you aren't [the HHVM wiki](https://github.com/facebook/hhvm/wiki) is a good place to start.  In a nutshell, it's a new PHP runtime courtesy of Facebook that, if you can get it working, promises to run circles around any PHP interpreter currently on the market.  \r\n\r\nSo I came into work on Wednesday fired up to give it a try.", previous_id: nil, published: true, pub_date: "2013-12-20 18:59:07"},
  {title: "Change is gonna come.", body: "So, I've been dealing with these dudes, <a href=\"http://scratchmedia.co.uk/\">ScratchMedia</a>.  They doing some design work on the <a href=\"http://ignoredbydinosaurs.com/forum/\">new RRE forum</a>.  I like them and the design a lot.  It'll go live sometime in the next couple of days here.\r\n\r\nStay tuned.", slug: "change-gonna-come", summary: "So, I've been dealing with these dudes, <a href=\"http://scratchmedia.co.uk/\">ScratchMedia</a>.  They doing some design work on the <a href=\"http://ignoredbydinosaurs.com/forum/\">new RRE forum</a>.  I like them and the design a lot.  It'll go live sometime in the next couple of days here.\r\n\r\nStay tuned.", previous_id: nil, published: true, pub_date: "2009-05-21 13:32:28"},
  {title: "recordingTechnology.", body: "Now, this part won't be any news to anyone, but will mainly serve to help organize the thoughts in my brain.  First, the old way:\r\n\r\n---\r\n\r\nThe old way involved the \"record industry\".  The record industry used to exist because recording was very expensive.  It was expensive to record a song, it was expensive to reproduce the recording of the song, and it was really expensive to warehouse, distribute, and sell the recording of that song.  Thus a whole industry cropped up to take advantage of the fact that the barrier to entry for your average recording artist, say Ma Carter out of the hills around Bristol VA, was so astronomically high that nobody really thought about releasing their own music.  Show up, play my tunes, get paid for them?  Okay!  This worked great for long enough for the basic oligarchic framework of the major label system to rise to power.\r\n\r\nA moment now to reflect.  It's extremely popular to bash record labels, and with good reason.  Let us now take a moment, however, to reflect on the cultural purpose that they've served...\r\n\r\nI take it for granted that America is, on balance, the coolest nation on the face of the earth, in the history of humanity.  Citizens from other countries would doubtless dispute this claim, but I would submit to you that even those societies that profess to hate everything America stands for only  hate so strongly because they don't enjoy the liberties and luxuries that Americans have long grown accustomed to.  Now, imagine if the record business never existed, that there was no such thing as an LP or a CD, and the only way to enjoy music was to go listen to it live.  There were no Beatles, except for those of you lucky enough to be in the Cavern Club, no Elvis, unless you went down to the BBQ shack to see him in Memphis, no Chuck Berry, no Led Zeppelin, no Pink Floyd, no Eagles, no Neil Young, no Bob Dylan, no Coldplay, no U2.  I know, a lot of these bands are from the UK, but I consider the give and take of the UK and the USA to be part of the competitive exchange that has pushed the limits of musical creativity for the better.  And we can safely lump all these bands into the category of Western Music.  Now, imagine if Western Music never existed.  How would we export our culture abroad?  At gunpoint, probably.  How would generations of kids be incited to stand up and make change happen?  At gunpoint, probably.  My point is that exactly at the moment in human events that the USA and the UK became 2 of the dominant political powers in the world (1946 or so), rock and roll made an appearance.  It moved legions of Japanese kids just like it did American kids.  The cultural service that the major label system provided these kids and us to come later is therefore immeasurable.  And the world danced together...\r\n\r\nNow, back to the point, to be covered in another blog, because really long blogs are fucking boring...", slug: "recording-technology", summary: "Now, this part won't be any news to anyone, but will mainly serve to help organize the thoughts in my brain.  First, the old way:<div><br /></div>\r\n\r\n", previous_id: nil, published: true, pub_date: "2009-03-05 01:13:00"},
  {title: "Language.", body: "<div><br /></div><div><br /></div><a href=\"http://radar.oreilly.com/assets_c/2009/02/TM_qtr_py_Prog_Lang.html\">This</a> is a table I found that shows relative current interest in different computer programming languages.  This was put together by measuring the book sales of books covering a specific language as compared to their sales from the year before.  The size of the box tells their relative market share, and the color their relative market traction.  You'll notice the really bright green one at the top, up 965%, is for Objective-C.  Mac OS X applications, and iPhone applications are written in this language.  I have personally contributed at least 2 purchases to that square over the last year...", slug: "language", summary: "<div><br /></div><div>", previous_id: nil, published: true, pub_date: "2009-02-27 18:11:44"},
  {title: "Coolest iPhone App Ever.", body: "So, as I mentioned in <a href=\"http://ignoredbydinosaurs.com/blog/?p=33\">some other post</a>, after about my first hour or so playing with the iPhone, it came to me that this was a device that could help you get things done.  No more going to the computer, turning on the computer, waiting for it to boot up, etc., just to check my email?  A calendar that I always have in my pocket?  These were revelations to my unorganized old-self.  After the 2.0 update and the ability to add functionality to an already cool device was released, that's when the real fun began.  I was on the bus yesterday and Stacy was reading the NY Times across from me, and there was that ad that Apple is running aimed toward small business owners.  One of the free apps that they displayed was called <a href=\"http://www.simpleapps.eu/simplemind/\">SimpleMindsXpress</a>, so I checked it out.  I cannot recommend an app more highly than this one.  Let me elaborate...\r\n\r\nAs you darn well know if you read this blog, I've recently undertaken the self-assigned role of Web Czar of my band.  Whilst pondering over all of the various aspects of what a band like mine needs to be on top of in terms of their web presence, I've often wished I were better about writing stuff down - organizational website overviews, flowcharts of how a shopping cart experience should be, etc.  I'm just not a pencil and paper guy.  Luckily, someone out there figured out a way to make it much more exciting to my brain!  And it was free!  So, here's how I picture RRE's overall web presence:\r\n\r\n![Railroad Earth's web setup](/uploads/image/image/56/IMG_0925.JPG)\r\n\r\nSo, great!  Now I can kind of get my head around it a little better.  I've broken it into 2 main categories (for my purposes.  Media/PR is going to be handled by the proper authorities), our official presence and the one that is probably going to be even more important overall, the Community.  They both involve using the various social networks, and in the free version you can't link a child category to 2 parent categories, so I just created Social Networks for both.  Now, zooming in a little closer, you can start to organize which social networks on which you want to keep track of your presence:\r\n\r\n![RRE Social Networks, etc](/uploads/image/image/52/IMG_0918.JPG)\r\n\r\nand if you have a campaign specific to one of them, you can zoom in further.  BTW, the auto-spell checker on the iPhone automatically changes Twitter to Twitted (decidedly inconvenient these days), and there appears to be a bug in this app that won't let you dismiss the \"correct\" word.  Annoying, but I guess nothing is perfect.  Now I'm going to turn my attention to the forthcoming fan site, which we will park at Railroadearth.net when all is said and done:\r\n\r\n![RRE fan site](/uploads/image/image/53/IMG_0921.JPG)\r\n\r\nAnd the next Railroadearth.com:\r\n\r\n![RRE website](/uploads/image/image/54/IMG_0923.JPG)\r\n\r\nOr the RRE iPhone app:\r\n\r\n![RRE iPhone app](/uploads/image/image/55/IMG_0924.JPG)\r\n\r\nHoly crap!!!\r\n\r\nSo, in closing, in two hours on the bus yesterday I was pretty much able to sketch out just about every component of our entire online infrastructure, which as much or as little abstraction as I needed.  God bless America!\r\n\r\nEdit: So last night's deep thought was that I completely forgot to even mention how it works.  They call these diagrams \"Mind Maps\", and when you create a new one, you start off with that central blue bubble.  If you want to add a category under that you just click the button.  A different colored bubble shows up that you then name with the category.  You can move them around and add new ones and cut old ones out.  For instance, here's the revised overall scheme, to which I added the iPhone app and just tightened everything up:\r\n", slug: "coolest-iphone-app-ever", summary: "So, as I mentioned in <a href=\"http://ignoredbydinosaurs.com/blog/?p=33\">some other post</a>, after about my first hour or so playing with the iPhone, it came to me that this was a device that could help you get things done.  No more going to the computer, turning on the computer, waiting for it to boot up, etc., just to check my email?  A calendar that I always have in my pocket?  These were revelations to my unorganized old-self.  After the 2.0 update and the ability to add functionality to an already cool device was released, that's when the real fun began.", previous_id: nil, published: true, pub_date: "2009-04-27 18:45:06"},
  {title: "Throttling window.onscroll", body: "Simple trick for making sure that anything that you want to listen to `window.onscroll` doesn't eat up too many cycles while it's doing its thing.  It's called \"throtting\".\r\n\r\n---\r\n\r\nThrottling basically means, if you're receiving a steady stream of input from something, you don't really want to be firing stuff off based on that steady stream.  This is a performance suck.  Let's say you have this ---\r\n\r\n~~~js\r\nwindow.addEventListener('scroll', function() {\r\n  // Stuff that's actually kinda CPU intensive like\r\n  // taking measurements, waiting for some element\r\n  // to show up on the screen, for example. \r\n  console.log('hi!');\r\n});\r\n~~~\r\n\r\nThis function is going to be firing as many times a second as your computer can handle.  If you're on a beefy laptop in Chrome, this will probably not be noticeable, but make no mistake -- none of your users are on as good a laptop as you are.  You will definitely drop frames and your perceived performance will suck wind.\r\n\r\nWhat's the answer?  Throttle that code.  Like this.\r\n\r\n~~~js\r\n// timeNow is the current time in milliseconds, created by\r\n// casting new Date() to a number with +\r\nvar timeNow = +new Date();\r\nwindow.addEventListener('scroll', function() {\r\n  // if the current time in milliseconds - timeNow is\r\n  // less than 250, abort.\r\n  if((+new Date() - timeNow) < 250) return;\r\n  // Else, reset timeNow to now.\r\n  timeNow = +new Date();\r\n  console.log('hi!');\r\n});\r\n~~~\r\n\r\nThis is hack-y looking because it's kind of a hack.  [Underscore](http://underscorejs.org/#throttle) and [Lodash](https://lodash.com/docs#throttle) have this built in, but it might be a little heavier than what you need.  If you find yourself using this more than once in a file, please either bring in Lodash, or rip off their implementation into your project.", slug: "throttling-window-onscroll", summary: "", previous_id: nil, published: true, pub_date: "2014-10-20 16:38:13"},
  {title: "Platform.sh from scratch, part 0 - explaining Platform as simply as possible.", body: "Hello, and welcome to \"Platform.sh from Scratch\".  In this prologue to the series, I'll go over some of the very highest level concepts of Platform.sh so that you'll have a clearer understanding of what this product is and why it came to be.\r\n\r\nPlatform.sh is a \"Platform as a Service\", commonly referred to in this age of acronyms as a \"PaaS\".  The platform that we provide is essentially a suite of development and hosting tools to make developing software applications a smoother end-to-end process.  In order to understand what this means though, I'm going to have to go into some detail in this first sidebar.  Skip this if you're comfortable with this post so far.\r\n\r\n---\r\n\r\n**Sidebar - PaaS**\r\n\r\nEveryone has heard of Salesforce.  Salesforce has come to be the poster child for what is now referred to as \"SaaS\" - Software as a service.  Prior to the SaaS era if you wanted a piece of software, be it a video game or Quickbooks or anything else, you had to drive to a store and buy a box with some disks in it.  Once the internet reached a level of market penetration into people's homes though, those stores went out of business.  This is an obvious evolution in hindsight.  SaaS is a high level thing - it's a runnable piece of software that you'll access over the internet via a URL.  You might be able to modify/config it a little bit, but will never be your entire business.  It's not *your* product.  It's someone else's and will likely play some fractional part in your overall business plan.\r\n\r\n*Almost* everyone by this point has heard of Amazon Web Services - AWS.  AWS is basically what people are talking about when they say \"The Cloud\".  AWS is a suite of products that emerged from Amazon when they figured out that they needed a huge amount of datacenter capacity to be able to withstand massive retail events like \"Black Friday\" and \"Cyber Monday\", and that for most of the rest of the year they had tons of excess capacity sitting around draining money from their wallet.  What to do with all that excess capacity?  Sell it to someone else.  \r\n\r\nThis relatively simple premise has evolved over the last 10-12 years into numerous products from S3 (basically a giant, limitless hard drive in the sky) to EC2 (basically a giant, limitless hosting server in the sky) to Redshift (basically a giant, limitless database that can be used for data warehousing) to SES (a simple service that sends emails) to an ever growing host of other services that always seems to come out just before your start-up figures out that it needs them.\r\n\r\nAWS and \"the cloud\" in general is often given the acronym \"IaaS\" - infrastructure as a service.  They're selling you the low level hardware abstractions that you can assemble into an infrastructure on which to run *your* software and by extension *your* company.  It requires a decent bit of specialized knowledge for how to use the individual pieces as well as how to plumb them together, but for all intents is infinitely flexible.  It's this level that has had most of my interest for the past few years.\r\n\r\nIn the middle of these two is what's called \"platform as a service\" - PaaS.  This is what Platform.sh is - a suite of software and hosting services that lets you efficiently build and develop *your* software application, and then *deploy* your software application to a hosting environment that doesn't require as much specialized knowledge on how to plumb all the pieces together.  Nor does the hosting environment require you - and this is a most important detail - to set up monitoring and alerting for if something goes wrong in the public environment.  \r\n\r\nThe PaaS takes elements of both IaaS and SaaS to allow you to build your software product but not have to hire an extra person just to know the low level server business.\r\n\r\n---\r\n\r\nSo, back to the program.  The development tool set of Platform.sh is entirely based around Git.  Just in case the reader is not already familiar with Git, I should explain this a little bit.\r\n\r\n---\r\n\r\n**Sidebar - Git**\r\n\r\nSoftware projects are typically composed of **lots** of files.  If you want to add a new feature, you might be required to make changes in more than one of those files.  Of course, before you get started you'll want to make some kind of backup just in case.  If it turns out that the change was buggy or unneeded and you want to revert back to a previous state, you'd just restore those few files back to their previous versions.  \r\n\r\nWhat if, however, you're working with a bunch of different people and more than one person is working on that change (an utterly common scenario)?  How do you manage those backups between all those people?  Saving copies of files is basically impossible to manage after a very short while, so out of this need SCM (source code management) was born.  It's been through several different iterations by this point, and at this point in time the version of SCM that is leading the market is called [Git](https://git-scm.com/).\r\n\r\nGit is pretty cool.  It basically takes snapshots of your entire project whenever you tell it to.  It then keeps track of all those snapshots and lets you share those snapshots among a team of developers.  Any snapshot can be reverted, and you can see the full history of every change to the codebase so you can keep track of \"what happened when\".  But wait!  There's more!\r\n\r\nThis is not an exclusive feature of Git, but it has a feature called \"branching\".  Branching is intuitively named, and is basically the concept of taking a specific snapshot and making changes based off of that one snapshot while other work continues on down the main code line.  This is the recommended way to work if you're going to make any kind of significant change to the software, and this method of working allows you to keep the main code line (almost always referred to as the \"master branch\") in 100% working order.  It can be thought of as having a furniture workshop away from your house where you can work and keep the house clean for company to come over at any moment, as opposed to working in the house and risking having a wreck to present should company decide to drop by.\r\n\r\nIn essence branching is making a complete copy of your project at a point in time that you can hack on all you like without disturbing anyone else.  If and when the change is ready, you \"merge\" the code back in to the master branch, test it out to make sure everything is still groovy and then you can release the feature or bug fix to the public.\r\n\r\n```\r\n--main--branch--always--in--a--working--state\r\n    \\                               /\r\n      -hacking--over--here--freely-\r\n```\r\n\r\nYou can read more about the super basics [here](https://git-scm.com/book/en/v2/Getting-Started-Git-Basics) if you wish.  For now, all you really need to know is that Git\r\n\r\n- Makes it easier to develop software as a team\r\n- Makes it very cheap and easy to try out new features without breaking anything\r\n- Makes it easier to manage changes to your software and to revert back to a known non-broken state\r\n\r\nupdate: Hey look, [a really great post explaining all this](https://blog.codeminer42.com/git-workflow-basics-d405746f6205#.h6wii2hh1) better than I did.\r\n\r\n---\r\n\r\n*Platform.sh has taken this branching and merging workflow and extended it out into the entire hardware stack.*  When you're building a software project of any size, there are considerations beyond just the code your team is writing.\r\n\r\nMost applications of any size [connect to some kind of database in the background](https://www.ignoredbydinosaurs.com/posts/166-chapter2-databases/), this is where they save \"data stuff\".  User uploaded images are a very common thing in the web app world, so if those images aren't there the app will look busted.  \r\n\r\nYou can branch your code all you like, but you need these other supporting resources to really do your job.  Platform.sh makes branches not just of your code, but the entire infrastructure that your project runs on.  This allows you to use the common branching/merging workflow with the complete support of everything else that your application depends on.\r\n\r\nThis may seem like an obvious feature, since how can you develop a new feature without being able to run it (?), but no other service that I know of actually does this.  A branch in Git triggers (for all intents) a complete copy of your production site without requiring you to set up any new servers, copy databases over, copy images and everything else, etc, etc, etc.  It's a significant hassle to do all this stuff, trust me, and it slows the team down every time you have to do it.  Removing this need removes a major friction point in the workflow for building new features on your software product.\r\n\r\n### But wait!  There's more!!!\r\n\r\nThis is where it starts getting really, really good.  In case you're not aware, there's a website called GitHub.  It's where a *whole* lot of folks have decided to host their \"git repos\" - repo being short for \"repository\", which is basically that series of snapshots of the state of your project/codebase back to the beginning of time.  This is the repo for this blog - https://github.com/JGrubb/django-blog, and here's some of the code that just ran to generate this page you're reading - https://github.com/JGrubb/django-blog/blob/master/blog/views.py#L26-L33.  Pretty cool, right?  And if I were working on a project with a buddy, we could both use this same repo and work on the same project, whether I'm in Germany or New Jersey or wherever.  I can pull his changes over and he can pull mine and this is basically how open source software gets written these days.\r\n\r\nThe same workflow applies though - if you want to make a new feature or even if you just want to fix a bug, you'd make a new branch and do your work and then \"submit a merge request\".  This basically pings the person who runs the project and says \"hey, I would like to suggest making this change.  Here's the code I'm changing, maybe you could look it over and if you agree with this change you can merge it in\".  By way of an example, [here's a list of \"pull (aka merge) requests\"](https://github.com/platformsh/platformsh-docs/pulls) for the codebase that comprises [the documentation for Platform](https://docs.platform.sh/user_guide/).  \r\n\r\nAgain, this is how software gets written and it's pretty mind blowing if you think about it.  We software developers are so used to it our minds cease to be amazed, but not because it's not amazing.  I mean, currently participating in that list of PRs are folks from France, Chicago, Hong Kong, the UK, and so on.  Amazing.  It is also, however, a pain in the ass.  \r\n\r\nIt's a pain in the ass because it's typically impossible to tell if something works or not just by looking at the code, so you have to pull their changes over to your computer and test them out somehow.  I bet you can see where this is going!  Platform has a GitHub integration (BitBucket too) that will automatically build a working version of any merge request that someone opens against your project.  That let's you go visit a working copy of the project and test it out without having to do a thing.  Now, I don't care how long you've been doing this, **that** is mind blowing.  For example, here's Ori's (currently work in progress) PR for adding the Ruby runtime documentation - https://github.com/platformsh/platformsh-docs/pull/339.  If you click the \"show all checks\" link down toward the bottom, it expands with a little link \"details\".  That link takes you to a complete copy of the documentation with Ori's change added to it, so you can read it like you normally would, rather than [reviewing a \"diff\"](https://github.com/platformsh/platformsh-docs/pull/339/commits/9cc4f9590f3c368441526b8776aef315a468a2df).  It's the future now!\r\n\r\nWhat this means in the wider scope is that your time to set up new things to test out new ideas, only to have to tear it down once the tests pass is time that you don't have to waste anymore.  You can test changes out and keep right on moving.\r\n\r\nThis GitHub integration is only one of the really cool and unique features that Platform provides, but this post has gotten absurdly long already.  Fortunately, this is intended to be the prologue to this series, so I'll touch on as many of those features as I can as the series progresses.", slug: "platform-scratch-part-0", summary: "", previous_id: nil, published: true, pub_date: "2016-08-17 09:03:19"},
  {title: "Seth's Blog: When the writer becomes the publisher", body: "So help me if Seth Godin doesn't write at least 1 post out of 10 that makes me jump up and shout.\r\n\r\n<a href=\"http://sethgodin.typepad.com/seths_blog/2009/05/when-the-writer-becomes-the-publisher.html\">Seth's Blog: When the writer becomes the publisher</a>.\r\n\r\nApply this one to the music biz.  I guess if you read this blog, you get my drift.", slug: "seths-blog-when-writer-becomes-publisher", summary: "So help me if Seth Godin doesn't write at least 1 post out of 10 that makes me jump up and shout.\r\n\r\n<a href=\"http://sethgodin.typepad.com/seths_blog/2009/05/when-the-writer-becomes-the-publisher.html\">Seth's Blog: When the writer becomes the publisher</a>.\r\n\r\nApply this one to the music biz.  I guess if you read this blog, you get my drift.", previous_id: nil, published: true, pub_date: "2009-05-26 16:10:52"},
  {title: "Media Temple", body: "The new host.  Hopefully you didn't swing by herein the last three hours whilst I've been wrestling with moving from GoDaddy over here.  If anyone discovers anything funky, would you please let me know?  The comments are down there &gt;&gt;&gt;", slug: "media-temple", summary: "The new host.  Hopefully you didn't swing by herein the last three hours whilst I've been wrestling with moving from GoDaddy over here.  If anyone discovers anything funky, would you please let me know?  The comments are down there &gt;&gt;&gt;", previous_id: nil, published: true, pub_date: "2009-06-09 18:06:17"},
  {title: "The newby web programmer.  Episode 2.", body: "<p>So, you've gone and installed MAMP and WordPress on your computer, or if you wanna sound really hip you call it your \"local machine\".  You've gone and started building out a wordpress site for your school because your current website is an outdated embarrassment.  Wordpress is kind of the no brainer choice, or so your buddy told you, because it's super easy for anyone to use who's familiar with a word processor.  You'd like to attempt to keep the content on your site fresh, so it sounds good to you.  Then you have a meeting with your principle and your so-called webmaster to talk about getting some of the things you've done put up and made available to the world.  Then they drop a little piece of info on you.</p>\r\n\r\n<p>Your school's webhost doesn't do PHP, and they don't know if the district will let you move to another host.  Let me tell you what this seemingly innocuous piece of information means.</p>\r\n\r\n<p>It's means you're screwed.</p>\r\n\r\n<p>PHP is a programming language.  It's what's formally known as a scripted language.  <a href=\"http://ignoredbydinosaurs.com/2009/03/chapter1b/\">I have a post here</a> that explains what that means.  Wordpress is written in PHP.  The advantages of a scripted language are what lead them to be used to write the majority of cool, interactive websites in the world.  If you wanna sound hip you call them \"web apps\", since that's what they are.  Site kind of implies a place, a static location that will be there when you come back and won't have changed much.  An application is something you interact with.  It does things for you, like letting you write news for the frontpage of your school's website that it will then display to the world without your having to go in and code HTML.  Applications run on computers, or servers if they are web applications.</p>\r\n\r\n<p>Compiled applications (the other kind besides scripted) have already been digested into machine code, which is to say 1s and 0s, prior to being run.  This means that they are essentially frozen and you can't alter anything about the source code without going through a rigamarole.  Scripted languages, in contrast, can be altered on the fly to add new features or fix bugs without having to be recompiled into machine code.  This makes scripted languages perfect for constantly evolving web apps.  The source code is right there on your webserver, and you can go and make changes to it.  The downside is that you have to have some special programmatic gear installed on your server.</p>\r\n\r\n<p>Scripted languages have to have their respective libraries of code installed in order to for them to be \"interpreted\" at \"runtime\".  This whole long explanation is to tell you that since your webhost doesn't appear to have the appropriate libraries installed, your WordPress application is going to look like a bunch of gibberish to your webserver.  You can upload it, but as soon as you point a browser at the index.php file, the server is going to throw a \"what the fuck is this?\", also called an error.  That's why you had to install MAMP on your computer in the first place, remember?  And unfortunately, installing PHP isn't an easy process, especially for someone who almost certainly doesn't have the proper \"permissions\" allotted to them in the operating system of the webserver.</p>\r\n\r\n<p>I realize there's a bunch of gobbledeegook in here.  I'll try to un-muddy the waters a bit in subsequent posts.  Specific questions are most welcome.  I should clarify that any webhosting company in the world is going to have PHP, and most likely a raft of other languages installed so that they can accommodate all types of clients and their disparately coded applications.  That your school's webhost doesn't have PHP - the most widely used web programming language in the world for the last decade or so running - tells me that your district has their own hilariously outdated webservers set up in the furnace room of some office somewhere.  We may be dead in the water, Jimmy...</p>", slug: "the-newby-web-programmer-episode-2", summary: "<p>So, you've gone and installed MAMP and WordPress on your computer, or if you wanna sound really hip you call it your \"local machine\".  You've gone and started building out a wordpress site for your school because your current website is an outdated embarrassment.", previous_id: 107, published: true, pub_date: "2010-01-30 14:29:27"},
  {title: "The newby web programmer.  Episode 1.", body: "This post is for my buddy Jimmy.  He's a teacher in CT and has set up a Wordpress.com site for his classroom.  Of course the parents love it, and he's the young techno-hip teacher in the school so his principal has allowed him to go and set up a new site for his school, whose hideous and outdated site was left for dead by the side of the road several years ago, apparently.  He just sent me an email asking about downloading Wordpress.  I responded by asking why because downloading and using Wordpress isn't the piece of cake that you might think it is if you've never dealt with web servers and databases before.  So I decided to make this public so that he and I and we may refer to it from now on.  Besides, this hasn't been blogged about nearly enough...\r\n\r\nWhen I first downloaded Ruby on Rails I was a bit perplexed.  It came with a README that gave these installation instructions that made no sense to me at all.  I didn't know anything about webservers at the time, or for a few months afterward, so here's what I learned.  This applies to Wordpress as well.\r\n\r\nWordpress and Ruby on Rails are both (more or less) database-backed content management systems.  (If you know anything about Rails, you go right ahead and light my comments section up.)  Drupal is, too.  This means that the post that you're reading right now isn't stored as a word document or a text file on a file system as you know it on your computer.  It's stored as plain text in a database.  Search the term here for a brief newby explanation from my ongoing programmer journal/book.  What this means is that you have to hook wordpress up to a database server to have your content served.  You also need to hook it up to a webserver to have your content served to and from a browser.  This sounds complicated because it kind of is until you do it once or twice.\r\n\r\nIf you are a Mac user go Google MAMP, and download it.  the AMP part of MAMP stand for Apache -the webserver, MySQL - the database, and PHP - the coding language that Wordpress is written in.  Pardon my grammar.  Install it.  Now you have a webserver and a database server on your computer, so you can play with Wordpress now.  In the MAMP directory somewhere is a folder called htDocs, which is the root of your webserver.  \r\n\r\nIf you make a subdirectory under htdocs called Wordpress, unzip and copy all the files from a Wordpress download, and start MAMP, you can then point your browser to http://localhost:8888/Wordpress and install wordpress in a way that you can then use.  You also need to create a database.  Use the PHPMyAdmin feature of MAMP for this.  Just figure it out.  You won't break anything.  Create a database and give WordPress the name of that database.  you're good to go with Wordpress on your \"local machine\".\r\n\r\nComments/Questions are down there.\r\n\r\nMore to come.", slug: "newby-web-programmer-episode-1", summary: "This post is for my buddy Jimmy.  He's a teacher in CT and has set up a Wordpress.com site for his classroom.  Of course the parents love it, and he's the young techno-hip teacher in the school so his principal has allowed him to go and set up a new site for his school, whose hideous and outdated site was left for dead by the side of the road several years ago, apparently.  He just sent me an email asking about downloading Wordpress.  I responded by asking why because downloading and using Wordpress isn't the piece of cake that you might think it is if you've never dealt with web servers and databases before.  So I decided to make this public so that he and I and we may refer to it from now on.  Besides, this hasn't been blogged about nearly enough...\r\n\r\n", previous_id: nil, published: true, pub_date: "2010-01-23 20:53:07"},
  {title: "For my friend", body: "I started this blog almost 6 years ago.  Looking back it was basically chronicling the beginning of the darkest years of my life.  It was also, however, chronicling the beginning of the most creative years that I've ever had.   Lot of shit went down for me 5 years ago, and being a nice round-number-type anniversary I've been going back over these old posts a lot lately, especially the ones where I really took a lot of time to lay it out exactly right.  [The creative fire](http://www.ignoredbydinosaurs.com/2009/11/creative-fire) is one that I wrote almost exactly 5 years ago, and it startles me now how much I knew intrinsically about the journey that lay ahead of me.  It took me a couple hours and several cups of coffee in a Boulder coffee shop to transcribe that passage, by the way, prior to one of my last CO shows.  You were there, IIRC. \r\n\r\nI truly thank God for that blog post I read, wherever it was, that said something to the effect of \"start a blog\".  \r\n\r\nSo, my man - start a blog.  I firmly believe everyone should do it.  Whether it's a thing you keep doing or not, it doesn't matter.  You are going through a rough period right now.  I had no idea how close the two of you were, and my heart hurts for you reading what you wrote on *someone else's blog*.  You are of of my most intelligent musician friends (a big part of the reason I like you so much, even though we rarely get together), and I had no idea you were so articulate in print.  Not that I'm surprised...\r\n\r\nArticulate your grief more, friend.  Write it down.  It's not only therapeutic to analyze how you're feeling and why, you will be profoundly glad when this period is behind you and you can look back and truly remember exactly how you felt now.  Because you wrote it down.\r\n\r\nI love you, brother. \r\nJG", slug: "for-my-friend", summary: "", previous_id: nil, published: true, pub_date: "2014-11-22 13:16:06"},
  {title: "theFollowingDisclaimer.", body: "So where was I?  Oh yeah:\r\n\r\nI am not an expert.  I will spout endlessly as though I am, and often I will be right in my own mind, but often I will also be full of crap.  Never has this made me more uncomfortable than now, since I just followed a link trail over to the website of a UK music website called the Guardian. I'm quoted over there, courtesy of a new buddy named Tim who is apparently in a kindred band to my own.  So I felt excited and frightened as one must feel the first time that he realizes people are reading (and propagating) his drivel.\r\n\r\nI am a musician.  I have had a full and remarkably balanced set of life experiences so far, but everything that I write on this blog is an opinion, unless otherwise stated.  Quote me at our mutual peril.  If I write about perceived stupidity in the music business, odds are good that I can back it up.  If I write about software, I don't have much of an idea what I'm actually talking about.  That's the point of this blog for me - the exploration of new methods and ideas.  So carry on...", slug: "the-following-disclaimer", summary: "So where was I?  Oh yeah:<div><br /></div><div>I am not an expert.  I will spout endlessly as though I am, and often I will be right in my own mind, but often I will also be full of crap.  Never has this made me more uncomfortable than now, since I just followed a link trail over to the website of a UK music website called the Guardian. I'm quoted over there, courtesy of a new buddy named Tim who is apparently in a kindred band to my own.  So I felt excited and frightened as one must feel the first time that he realizes people are reading (and propagating) his drivel. </div><div>", previous_id: nil, published: true, pub_date: "2009-03-09 17:59:21"},
  {title: "Random idea", body: "<p>My vet just recently joined the 21st century and moved all of their records from big, brown paper files to a computer system.  Her husband is an IT guy so he did the research and picked out all the computers, networked them together and set up this software system for the office.  It looked like a pretty big job to migrate all of their client records to a computer system, but hey, the avoided it long enough, right?</p>\r\n\r\n<p>I don't know why I just thought of this, but about a web app that manages all of that stuff?  Clients, their pets, their pets' histories, etc.  Then I thought, well, that's kinda ballsy for a vet's office to let a web service store data like that, and what if you want to move, etc.  Well, okay, how about some kind of export API etc.  Then I thought, well what about hosting the database at the client end...</p>\r\n\r\n<p>Would this be a case for something like CouchDB or MongoDB?  A local datastore, and I would provide the processing and the upkeep?  I dunno.  I'm gonna sleep on it.  Sounds like a fun little project in any case...</p>", slug: "random-idea", summary: "<p>My vet just recently joined the 21st century and moved all of their records from big, brown paper files to a computer system.  Her husband is an IT guy so he did the research and picked out all the computers, networked them together and set up this software system for the office.  It looked like a pretty big job to migrate all of their client records to a computer system, but hey, the avoided it long enough, right?</p>", previous_id: nil, published: true, pub_date: "2010-10-07 04:31:40"},
  {title: "This blog", body: "It's kinda difficult.  I feel bad for not really having much to say, but I've been pondering (probably excessively) over what direction it should really take.\r\n\r\nMy good buddy Anders, of Greensky fame and fortune, let me know that he checks it out from time to time.  \"Some of it's really technical\", he says.  Stacy says the same thing. \"but then occasionally you'll write something\" pertinent.  So, I've been pondering how to take it and relate it maybe to something else that makes the dryness of database theory a bit more palatable.\r\n\r\nFor instance, my post a while back about \"Development Platforms\".  That was a bunch of tripe that would only make sense if you were already a propellerhead.  What I should've said was something like this:\r\n\r\nA development platform, and choosing one to develop on, is sort of like deciding what style of music you want to play.  If you really like the blues, you don't have to invent the blues.  Someone already did that and all you need to do is write some lyrics for your song, because the same 12 bar form has been there for decades now.  That could be iPhone development.  You want to build cool websites?  The AABA form has been used to great effect to write countless jazz tunes since the 20s.  All you need to do is pick a key and make up a progression.  May I suggest rhythm changes?  Ruby on Rails, well that'd probably be the blues since there's the least amount of configuring to do before you get to the creative part.\r\n\r\nMake more sense?  My other buddy Jay (of Donna the Buffalo fame and fortune)  has a great analogy for database theory that I'll get to when I have a chance.  I have way more free time on the road than at home these days.  See y'all later...", slug: "this-blog", summary: "It's kinda difficult.  I feel bad for not really having much to say, but I've been pondering (probably excessively) over what direction it should really take.\r\n\r\nMy good buddy Anders, of Greensky fame and fortune, let me know that he checks it out from time to time.  \"Some of it's really technical\", he says.  Stacy says the same thing. \"but then occasionally you'll write something\" pertinent.", previous_id: nil, published: true, pub_date: "2009-05-14 16:32:47"},
  {title: "preface", body: "It occurred to me last night during the show (where I do all of my best thinking) that of all of the thousands of websites that I've pored over in this quest, of all the books that I've perused, of all the tutorials that I've read and followed through, the one thing that was missing was the square one explanation of what the hell we're doing here in the first place.  Everything I've read so far assumes some sort of foreknowledge or education to prepare oneself for the task of learning software development.  I have no such education.  A few very basic concepts have to be put into place before one can train oneself to think like a computer (or more likely, to train your computer to think like you).\r\n\r\nAs I've said before, software dev is a new thing for me, so if anyone has any corrections or additions to anything I write, <b>please</b> send them to me.  I am now attempting to write the complete and utter morons guide to learning software development.  I want to be factually correct, of course.  And without further adieu..", slug: "preface", summary: "It occurred to me last night during the show (where I do all of my best thinking) that of all of the thousands of websites that I've pored over in this quest, of all the books that I've perused, of all the tutorials that I've read and followed through, the one thing that was missing was the square one explanation of what the hell we're doing here in the first place.  Everything I've read so far assumes some sort of foreknowledge or education to prepare oneself for the task of learning software development.  I have no such education.", previous_id: nil, published: true, pub_date: "2009-03-30 16:59:33"},
  {title: "Migrating the blog from Drupal to Jekyll", body: "### Reasons for leaving Drupal, a preamble\r\n\r\nI'd had this website on Drupal since some time in July.  If you look through the [archives](http://ignoredbydinosaurs.com/archive/), you'll notice a relative dearth of posts from this time period.  Drupal just has a way of sucking all the fun out of blogging.  It's very, very slow for one thing.  I had a lot of trouble integrating the site with the Disqus comment system that handled all of my Wordpress comments before I made the move so I was forced to use Drupal's comment system.  I'd written a couple of posts in the \"didn't find much in Google about it, so I decided to become the authoritative voice on it\" vein, and had a ton of comments on one of them.  Those comments appear to be gone now, even though I devoted an entire day to exporting them out of Drupal into Disqus with a [solution that someone came up with](http://drupal.org/node/269010 \"Migrate from Drupal comment.module to Disqus comments - drupal.org\").\r\n\r\nBasically, Drupal is a beast.  If you have a project that you are trying to build that involves users with accounts, and different levels of access to the content based on those roles, go with Drupal.  For anything else, anything simpler, stay away.  Drupal gives the impression of being somehow more user friendly since you can configure these massively complex sites without actually coding much of anything, but is that really a good thing??  Drupal's inherent dependence on [stashing so much configuration in the database](http://developmentseed.org/blog/2009/jul/09/development-staging-production-workflow-problem-drupal \"The Development -&gt; Staging -&gt; Production Workflow Problem in Drupal - Development Seed\") will be the death of the project if it's not figured out, and I personally don't think anything short of a MAJOR rewrite is going to sort it out.  The major Drupal rewrite that's about to drop on the world some time has taken 2 years to get even close to the door, and a rewrite that would effectively fix this particular issue would also effectively rewrite the entire philosophy of being able to build a site in the browser, arguably the whole reason for Drupal existence in the first place.\r\n\r\nI haven't even gotten to the part about moving Drupal to Git.  Why not put the whole thing up in GitHub?  Have you heard of Rails?  It's doing pretty well, and I'd wager that a large part of the reason for that is how easy it is to dive in and contribute to open source on GitHub.  I've never once seen it even mentioned to move Drupal to GitHub.\r\n\r\nanyway...\r\n\r\n### Reasons for migrating to Jekyll, regular ramble\r\n\r\nFirst off, it really wasn't that hard, so skip ahead if you wish.  I spent a good several hours on Github researching other sites that people had going on the platform out there.  I've been studying a whole lot of Ruby lately, so it was down to Jekyll or a few other simple solutions.  I started building a solution out of Sinatra, but decided that deployment was probably going to be more of a headache than I felt like dealing with.\r\n\r\nI loved the idea of a static HTML site since one of my main gripes about Drupal was how many times I could count the little page load indicator going around on Chrome.  This site is blazing fast now, so yay for that.\r\n\r\nI love the idea that there are no security updates, no databases to backup, no crufty markup that comes from where exactly?  Basically, there's very little tradeoff.  It's mostly win.  So, on to the show.\r\n\r\n##Migrating from Drupal to Jekyll, the meat\r\n\r\nOne of the things that I didn't understand about Jekyll was that it doesn't really generate a site template for you (you get used to that when dealing with Ruby).  You have to build that part or Jekyll won't do anything at all.  It's easy enough to get started though, just Google or [borrow from other GitHubbers](https://github.com/mojombo/jekyll/wiki/Sites).  The tricky part was liberating my posts from Drupal, which was made vastly easier by [this fellow having written a Drupal migrator](https://github.com/mattdipasquale/jekyll/blob/master/lib/jekyll/migrators/drupal.rb) only a few weeks ago.\r\n\r\nI followed all of the instructions on [this page](https://github.com/mojombo/jekyll/wiki/Blog-Migrations) for getting the migrators to work, but kept getting an error message that ruby couldn't find the specified file or something like that.  So an hour or two of fiddling around with the migrator file in my Jekyll directory and finally changing the command to something like this -\r\n\r\n`ruby -r '~/PLAY/jekyll/_import/drupal' -e 'Jekyll::Drupal.process( \"\#{ENV[\"DB\"]}\", \"\#{ENV[\"USER\"]}\", \"\#{ENV[\"PASS\"]}\")'`\r\n\r\n\r\nwhere `~/PLAY/jekyll` is the root of my jekyll install in order to get ruby to read the migrator file that was there instead of trying to find one that wasn't.  I'm sure the instructions will work fine for someone who knows more than me, but hey it worked.\r\n\r\n_edit: it now occurs to me that if I wanted this to really work the correct way, I should've forked Matt Dipasquale's version of Jekyll and built my site that way, but I'm not sure how that plays with the RubyGem system and in any event I made it work.  YMMV._\r\n\r\n### to give back unto the community...\r\n\r\nTODO - add a bit into the Drupal migrator that also liberates the URL aliases from the DB, as the author of the current migrator apparently used the stock Drupal URL scheme (node/\\*).  Jekyll has an easy facility for setting the permalinks for your posts, but going through every post to make sure they were right was needlessly tedious in hindsight.", slug: "migrating-blog-drupal-jekyll", summary: "##Reasons for leaving Drupal, a preamble\r\n\r\nI'd had this website on Drupal since some time in July.  If you look through the [archives](http://ignoredbydinosaurs.com/archive/), you'll notice a relative dearth of posts from this time period.  Drupal just has a way of sucking all the fun out of blogging.  It's very, very slow for one thing.  I had a lot of trouble integrating the site with the Disqus comment system that handled all of my Wordpress comments before I made the move so I was forced to use Drupal's comment system.  I'd written a couple of posts in the \"didn't find much in Google about it, so I decided to become the authoritative voice on it\" vein, and had a ton of comments on one of them.  Those comments appear to be gone now, even though I devoted an entire day to exporting them out of Drupal into Disqus with a [solution that someone came up with](http://drupal.org/node/269010 \"Migrate from Drupal comment.module to Disqus comments | drupal.org\").\r\n\r\nBasically, Drupal is a beast.  If you have a project that you are trying to build that involves users with accounts, and different levels of access to the content based on those roles, go with Drupal.  For anything else, anything simpler, stay away.  Drupal gives the impression of being somehow more user friendly since you can configure these massively complex sites without actually coding much of anything, but is that really a good thing??  Drupal's inherent dependence on [stashing so much configuration in the database](http://developmentseed.org/blog/2009/jul/09/development-staging-production-workflow-problem-drupal \"The Development -&gt; Staging -&gt; Production Workflow Problem in Drupal | Development Seed\") will be the death of the project if it's not figured out, and I personally don't think anything short of a MAJOR rewrite is going to sort it out.", previous_id: nil, published: true, pub_date: "2010-12-15 05:00:00"},
  {title: "Fake Steve Jobs on the new Chrome OS", body: "\"Our guys on the Safari team even had special toilet paper made up with a Chrome logo on every sheet.\"\r\n\r\n<a href=\"http://fakesteve.blogspot.com/2009/07/lets-all-take-deep-breath-and-get-some.html\">The Secret Diary of Steve Jobs: Let's all take a deep breath and get some perspective</a>.", slug: "fake-steve-jobs-new-chrome-os", summary: "\"Our guys on the Safari team even had special toilet paper made up with a Chrome logo on every sheet.\"\r\n\r\n<a href=\"http://fakesteve.blogspot.com/2009/07/lets-all-take-deep-breath-and-get-some.html\">The Secret Diary of Steve Jobs: Let's all take a deep breath and get some perspective</a>.", previous_id: nil, published: true, pub_date: "2009-07-09 12:07:45"},
  {title: "On quitting a band.", body: "I thought I'd take this quiet opportunity to try and recall some of the thoughts that have been bouncing around my head the last few weeks.  I was thinking about all the various manners in which many of the bands that I've known have experienced or dealt with personnel changes.  I believe there to be a spectrum, and my departure from RRE seems to fall somewhere in the middle.  \r\n\r\nOn the one side you have the \"okay, bye\" method, most notably employed by my friend <a href=\"http://www.hotbutteredrum.net/index.php?option=com_content&task=view&id=2572&Itemid=174\">Zac Matthews</a>, formerly of Hot Buttered Rum.  (Funny, his was a November announcement as well.  What is it about impending winter that runs roughshod over summertime festival bands?  Rhetorical question.)  Obviously this approach has it's pros and cons.  The most obvious con is the sense of a lack of closure that the public can feel when one day everything is cool and the next their favorite band is no longer what it was.  I know I felt something of a shock when <a href=\"http://www.tealeafgreen.com/phpBB2/viewtopic.php?t=15721\">Ben quit Tea Leaf</a> or when John-O split SCI.  You want to know \"why?\"  Usually you are disappointed.  The pro (singular) of doing it like this would presumably be that relations within the band have deteriorated to such a degree by this point that dragging it out over a farewell tour would not be a good thing at all for anyone.  I'm glad that's not the case here.\r\n\r\nThen there's the other end of the spectrum, most notably employed by <a href=\"http://www.jambase.com/Articles/9417/BILL-NERSHI-LEAVING-SCI\">Bill Nershi</a> of String Cheese Incident.  I'm not going to rehash the reasons for his splitting, mostly because I'm afraid he might be reading this.  Instead, I'm going to guess at them.  Bill was the frontman of a huge operation.  They weren't just a band at the point when he had to call it, and hadn't been for many years.  As much as I look up to their operation, and the operation of Phish or even Umphrey's McGee as a band whose business model seems sound from my perspective, I can understand the pressure of finding yourself in that position of success.  Let's face it, most musicians don't become musicians because they like running companies, yet the more successful your band becomes the more of your time the business syphons off.  The less time you have to make music.  The less time you have to contemplate taking a break since the rest of the operation doesn't go on holiday just because you do.  I think this played a big part in Phish's hiatus, aside from the much publicized substance issues.  The business of being in a band can be a major grind.  I digress...\r\n\r\nThis approach also has it's pros and it's cons.  The most notable pro is that you can actually set it up in a very lucrative business-like manner for your last tour to be a \"farewell\" one.  I'm not sure how much $ SCI made on that summer 07 tour, but they didn't play another gig until summer 09, so it must've been okay.  The fans of the band get to relish a last hoorah, and the band members themselves get to say goodbye to a lifestyle as well as some of the locales that have become home out there, if only for a little while.  The cons of this approach are relatively minor, mostly having to do with people continually asking \"so what are you gonna be doing next?\"  It's a natural question, but you might not always have an answer ready.\r\n\r\nWhere I fall is somewhere in between.  I wouldn't quit this band if I were less than ready.  As I may have said to some of you, this decision took me years to come to, but on the other hand I've known for years that it was coming.  Sometimes when I walk into a room full of hobos I get this feeling like everyone is looking at me, like I'm a dead man walking.  And to be perfectly honest, I haven't had a ready made answer for what kind of music my band plays for the last seven years, so obviously I don't have a ready made answer to \"what are you doing next?\"  Well, I'm gonna be programming.  You see this website?  I'm gonna make a living off of it one day.  \r\n\r\nThe pros - I get to say goodbye.  \r\n\r\nThe cons - sometimes I'm tired of saying goodbye.", slug: "quitting-band", summary: "Some personal and some purely speculative content ->\r\n", previous_id: nil, published: true, pub_date: "2009-12-11 20:55:47"},
  {title: "Apparent risk and actual risk", body: "<p><a href=\"http://feedproxy.google.com/~r/typepad/sethsmainblog/~3/wc4LJQkWDWA/apparent-risk-and-actual-risk.html\">Apparent risk and actual risk</a>: \"There are people who I will never encounter in a restaurant.\r\n\r\nThat's because when these people go out for dinner, they go to chain restaurants. These are the tourists in New York who seek out the familiar Olive Garden instead of walking down the street to Pure.\r\n\r\nThat's fine. It's a personal choice.\r\n\r\nBut it got me thinking about the difference between apparent and actual risk, and how that choice affects just about everything we do.\r\n\r\nThe concierge at a fancy hotel spends her time helping tourists and business travelers avoid apparent risk. She'll book the boring, defensible, consistent tour, not the crazy guy who's actually a trained architect and a dissident. She'll recommend the restaurant from Zagats, not from Chowhound.\r\n\r\nApparent risk is what keeps someone working at a big company, even if it's doing layoffs. It feels safer to stay there than to do the (apparently) insanely risky thing and start a new venture.\r\n\r\nApparent risk is what gets someone who is afraid of plane crashes to drive, even though driving is more dangerous.\r\n\r\nApparent risk is avoiding the chance that people will laugh at you and instead backing yourself into the very real possibility that you're going to become obsolete or irrelevant.\r\n\r\nWhen things get interesting is when the apparently risky is demonstrably safer than the actually risky. That's when we sometimes become uncomfortable enough with our reliance on the apparent to focus on the actual. Think about that the next time they make you take off your shoes at the airport.\"</p>\r\n\r\n<p>(Via <a href=\"http://sethgodin.typepad.com/seths_blog/\">Seth's Blog</a>.)</p>", slug: "apparent-risk-and-actual-risk", summary: "<p><a href=\"http://feedproxy.google.com/~r/typepad/sethsmainblog/~3/wc4LJQkWDWA/apparent-risk-and-actual-risk.html\">Apparent risk and actual risk</a>: \"There are people who I will never encounter in a restaurant.\r\n\r\nThat's because when these people go out for dinner, they go to chain restaurants. These are the tourists in New York who seek out the familiar Olive Garden instead of walking down the street to Pure.\r\n\r\nThat's fine.", previous_id: nil, published: true, pub_date: "2009-10-12 16:24:54"},
  {title: "This is truly fascinating...", body: "A glimpse into design and corporate culture, and where the two often clash.  \r\n\r\n\r\n<p><a href=\"http://dustincurtis.com/dear_american_airlines.html\">Dear American Airlines | Dustin Curtis</a>", slug: "truly-fascinating", summary: "A glimpse into design and corporate culture, and where the two often clash.  \r\n\r\n\r\n<p><a href=\"http://dustincurtis.com/dear_american_airlines.html\">Dear American Airlines | Dustin Curtis</a>", previous_id: nil, published: true, pub_date: "2009-11-07 21:57:29"},
  {title: "Counterpoint, anyone?  Yes, you...", body: "From TechCrunch...\r\n\r\n<p><a href=\"http://feedproxy.google.com/~r/Techcrunch/~3/pFQD-ynPhR0/\">The Case Against Apple Is Just As Much A Case For Apple</a>", slug: "counterpoint-anyone-yes-you", summary: "From TechCrunch...\r\n\r\n<p><a href=\"http://feedproxy.google.com/~r/Techcrunch/~3/pFQD-ynPhR0/\">The Case Against Apple Is Just As Much A Case For Apple</a>", previous_id: nil, published: true, pub_date: "2009-08-09 21:33:09"},
  {title: "Album of the Week", body: "Ahmad Jamal - The Awakening\r\n\r\nThe only version of Oliver Nelson's \"Stolen Moments\" that might actually be better than the original.  Several other outstanding renditions of great standards on there as well.  A. Jobim's \"Wave\" and H. Hancock's \"Dolphin Dance\" are two of them.  This is one of the first jazz albums I picked up in college, before I started playing jazz.  When I took the jazz history class at ASU, I wrote a paper about it.  I couldn't figure out why none of these tunes follow the AABA form.  My ears later got good enough to realize that they did, but that Jamal was throwing in these huge jammy vamps in between the sections.  Great jazz album...", slug: "album-week", summary: "Ahmad Jamal - The Awakening\r\n\r\nThe only version of Oliver Nelson's \"Stolen Moments\" that might actually be better than the original.  Several other outstanding renditions of great standards on there as well.  A. Jobim's \"Wave\" and H. Hancock's \"Dolphin Dance\" are two of them.  This is one of the first jazz albums I picked up in college, before I started playing jazz.  When I took the jazz history class at ASU, I wrote a paper about it.  I couldn't figure out why none of these tunes follow the AABA form.", previous_id: nil, published: true, pub_date: "2009-04-17 16:56:08"},
  {title: "Plans, plans, plans.", body: "I think I'd better start writing them down.  My list of things that I want to accomplish on the <a href=\"http://railroadearth.com/\">RRE</a> website is only getting longer as I tick off more of the major infrastructure aspects of the site.  Luckily the foundation of the site seems to be stable enough and the initial reaction was pleased if not excited.  I think everyone is willing to cut some slack, which is good.  So.  The list...\r\n\r\n<b>Media page</b> - needs attention.  The media player is slack, the photos are non-existant and the entire look just needs some style.  CSS will take care of some of it, but making something more of the audio player is going to be necessary.  I've been poking and prodding at the <a href=\"http://www.tumblr.com/docs/api\">Tumblr API</a> to see if I can get it to provide the simple functionality while taking the burden of hosting and updating the actual audio off of our host.  Their API is pretty cool, too.  If I can just figure out how to write a function that will hit the <a href=\"http://railroadearth.tumblr.com/\">RRE Tumblr page</a> and just pull off the audio for <a href=\"http://railroadearth.com/media/\">this page</a> and the photos for <a href=\"http://railroadearth.com/band/\">that page</a>, and then parse the XML results so that I don't ever have to do a thing except upload stuff to Tumblr and have that update the RRE site automatically, well that'd be cool as shit.\r\n\r\n<b>Tour page</b> - Needs CSS to be more legible, less cluttered.  This whole thing was built with tables, which still obey CSS, right?  Complete noob, here...\r\n\r\n<b>The artwork</b> - Yes, the artwork.  I'm gonna try my all to make this happen myself, since the only way I learn these coding things is to make myself figure them out.  The pressure is gentle for the time being, but I have a feeling if any more than a couple of weeks go by without some art getting up there I'm gonna hear all about it.  Luckily I have ideas and help.\r\n\r\n<b>Band bios</b> - The pages exist.  Actually, if you really wanna know what's going on in my head as it happens you might wanna check out the <a href=\"http://railroadearth.com/sitemap.xml\">Sitemap</a>.  This is sort of like a map for Google and other search engines to follow so they can have a rough clue about what is on your site and how much of it there is without crawling every single page every single visit.  It also is a good thing to do for SEO.  \r\n\r\nBy the way, search engine traffic has increased <em>10 fold</em> in the last week.\r\n\r\n\r\n\r\n ", slug: "plans-plans-plans", summary: "I think I'd better start writing them down.  My list of things that I want to accomplish on the <a href=\"http://railroadearth.com/\">RRE</a> website is only getting longer as I tick off more of the major infrastructure aspects of the site.  Luckily the foundation of the site seems to be stable enough and the initial reaction was pleased if not excited.  I think everyone is willing to cut some slack, which is good.  So.  The list...\r\n\r\n<b>Media page</b> - needs attention.  The media player is slack, the photos are non-existant and the entire look just needs some style.", previous_id: nil, published: true, pub_date: "2009-08-25 04:19:06"},
  {title: "Allan's guide to running a Facebook Campaign", body: "Well, friends, I asked for it.  Yesterday I put up a post about Facebook's new SMS fan feature.  This lets RRE fans (or whomever) text \"fan RailroadEarth\" to FBOOK and they're automatically added to our fan roster on Facebook.  This sounds like an extremely convenient way to sign up new fans at a show or whenever the feeling hits them, yet there are a few hurtles from an effective marketing perspective that I wanted some feedback on.  For instance, the best way to get the word out would probably be to make an announcement from the stage during the show, but RRE isn't going to be doing that.  Whatever the vibe is that we're trying to project from stage, it ain't the one where we stop in the middle of a set and put in a plug for our <a href=\"http://www.facebook.com/railroadearth\">Facebook page</a>.\r\n\r\nOther alternatives are placing info at the merch booth, the ubiquitous (and potentially ineffective) email blast, but obviously a coordinated effort on all fronts would be the most effective means of getting those numbers up.  A coordinated effort is what Allan came up with.  I'd love to hog this as proprietary information given to us, and only us, by a seasoned marketing vet for the purpose of blowing Railroad Earth up just a little bit more.  However, that would be against the <a href=\"http://ignoredbydinosaurs.com/about-ibd/\">stated mission of ignoredByDinosaurs</a>.  What I present here is either something that he'd been working on for months and waiting for the right opportunity to fire off or a 30 minute rough draft of a brainstorm.  You never know with that guy.  Either way, he's an impassioned student of the biz and this is good stuff.  If you promote bands you should read this.\r\n\r\nThe funny part is, I was just kidding when I asked him to make me a diagram. \r\n\r\n", slug: "allans-guide-running-facebook-campaign", summary: "Well, friends, I asked for it.  Yesterday I put up a post about Facebook's new SMS fan feature.  This lets RRE fans (or whomever) text \"fan RailroadEarth\" to FBOOK and they're automatically added to our fan roster on Facebook.  This sounds like an extremely convenient way to sign up new fans at a show or whenever the feeling hits them, yet there are a few hurtles from an effective marketing perspective that I wanted some feedback on.  For instance, the best way to get the word out would probably be to make an announcement from the stage during the show, but RRE isn't going to be doing that.  Whatever the vibe is that we're trying to project from stage, it ain't the one where we stop in the middle of a set and put in a plug for our <a href=\"http://www.facebook.com/railroadearth\">Facebook page</a>.\r\n\r\n", previous_id: nil, published: true, pub_date: "2009-07-22 20:12:42"},
  {title: "Akamai plist error in console - you downloaded an Adobe product, didn't you?", body: "<p>Inaugurating a new \"Geek\" category for this post with the hope that I can prune back most of the current categories into Geek and Non-Geek.  Anyway =></p>\r\n\r\n<p>You're probably on a Macintosh and noticed it hanging momentarily every ten seconds or so.  You probably recently downloaded Photoshop or Dreamweaver or some other Adobe product that made you download and install the Akamai download manager before it would let you download and install the Adobe product you wanted in the first place.  Being conscientious about organization and maintenance of the files in your computer you probably deleted the Akamai download manager after you used it.  You went on your merry way and are probably enjoying your Adobe product.  At some point you realized this really annoying hang that your computer has been doing.  You went to the Console app and saw a list of error messages a mile long about a call to some plist feature that OS X couldn't find.  You have glimpsed the trail of your enemy.  A brief Google search turned up a few dated clues.  You've found yourself here.  Welcome.  Let's kill that fucker, shall we?</p>\r\n\r\n<p>Here's the error -</p>\r\n\r\n~~~shell\r\n3/19/10 12:10:10 PM\tcom.apple.launchd.peruser.501[398] (com.akamai.client.plist[606]) Bug: launchd_core_logic.c:4103 (23932):13 <br />\r\n3/19/10 12:10:10 PM\tcom.apple.launchd.peruser.501[398] (com.akamai.client.plist[606]) posix_spawn(\"/Applications/Akamai/loader.pl\", ...): No such file or directory<br />\r\n3/19/10 12:10:10 PM\tcom.apple.launchd.peruser.501[398] (com.akamai.client.plist[606]) Exited with exit code: 1<br />\r\n3/19/10 12:10:10 PM\tcom.apple.launchd.peruser.501[398] (com.akamai.client.plist) Throttling respawn: Will start in 10 seconds\r\n~~~\r\n\r\n<p>Well, thanks a lot.  You check out your Library folders and can't find a plist item for Akamai.  You can't find anything for <code>com.apple.launchd</code>.  Spotlight doesn't find anything for Akamai.  Spotlight doesn't find anything for <code>com.apple.launched.peruser</code>.  The trail is going cold.  This is why you hate \"download managers\".  Aren't you capable of managing your own downloads?  </p>\r\n\r\n<p>Well, the sad news is that since you're a conscientious, but perhaps not completely and utterly thorough computer user, you didn't dive deep into the README that was provided in the Akamai folder.  There was actually some useful info buried in there.  Here's the fix.</p>\r\n\r\n<p>First, you have to go back to Adobe and pick out any trial product to use (again).  This will cause the Akamai thing to be reinstalled on your system, which is all you're after.  It'll download that goofy Akamai thing again to a disk image which you then install.  It will then start downloading the Adobe whatever.  You can stop the download at that point.  Now open up the Terminal and paste this command -</p>\r\n\r\n<code>/Applications/Akamai/admintool uninstall -force</code>\r\n\r\n<p>This is the only proper way to uninstall that stupid thing that you didn't want on your computer in the first place and for which they don't even provide an uninstaller, just a little hint in a README buried in the Akamai folder.  Restart your computer and hope it forgets all about it.  Carry on...</p>\r\n\r\n<p>Props to the <a href=\"http://discussions.apple.com/thread.jspa?messageID=11243793#11243793\">Apple Forum</a> for providing the answer.</p>", slug: "akamai-plist-error-in-console-you-downloaded-an-adobe-product-didnt-you", summary: "<p>Inaugurating a new \"Geek\" category for this post with the hope that I can prune back most of the current categories into Geek and Non-Geek.  Anyway =></p>", previous_id: nil, published: true, pub_date: "2010-03-19 16:32:06"},
  {title: "IE6", body: "Here's a link to a techCrunch article that links to yet another cute little video that someone put up on YouTube.  The gist is that designers and programmers hate the stupid quirks and security holes that are present in IE6 and have mounted a vigorous campaign to get corporate IT departments to finally get on with the upgrade.\r\n\r\nBut, I actually work a bit in corporate IT, at a call center full of computers running IE6.  They're running that way by necessity, because many of the computers in that place are so old that they won't run an OS newer than Windows 2000.  How about that techCrunch?  There's a mixture of all kinds of computers in that place and some actually do run XP, but they're all on IE6.  IT departments don't want to have to service two different sets of software across their company, and I don't blame them - resources are always tight and are absolutely the reason that IT depts don't upgrade.  I know IE8 is free, but what about the 40 computers that we can't afford to replace right now that aren't capable of running it?  That and the cold, hard fact that upgrading systems across an entire company brings with it the spectre of having to teach people how to use the new way - repeatedly - and having to listen to everyone from the agents on the floor to the boss at the top complain that \"there was nothing wrong with IE6, why did we have to upgrade?\"  To make some f-ing web designers happy?\r\n\r\n<p><a href=\"http://www.techcrunch.com/2009/07/23/woah-people-really-dont-like-ie6/#comments\">Woah, People Really Don’t Like IE6</a>\r\n\r\nedit : I love web design.  We all do.  I'm envious of knowledgeable web designers.  We all are.  It is beyond argument that the world would be better off if IE6 were banished forever from all computers.  In addition to being a security risk for everyone (not just IE6 users), countless hours of otherwise productive programming and design are wasted trying to support it's dumb ass.  It is, however, a larger and more complex issue than you may realize.", slug: "ie6", summary: "Here's a link to a techCrunch article that links to yet another cute little video that someone put up on YouTube.  The gist is that designers and programmers hate the stupid quirks and security holes that are present in IE6 and have mounted a vigorous campaign to get corporate IT departments to finally get on with the upgrade.\r\n\r\nBut, I actually work a bit in corporate IT, at a call center full of computers running IE6.  They're running that way by necessity, because many of the computers in that place are so old that they won't run an OS newer than Windows 2000.  How about that techCrunch?", previous_id: nil, published: true, pub_date: "2009-07-23 12:05:37"},
  {title: "Twitter 101", body: "This is very smart.\r\n\r\n<a href=\"http://business.twitter.com/twitter101/\">Twitter 101 for Business — A Special Guide</a>.", slug: "twitter-101", summary: "This is very smart.\r\n\r\n<a href=\"http://business.twitter.com/twitter101/\">Twitter 101 for Business — A Special Guide</a>.", previous_id: nil, published: true, pub_date: "2009-07-24 17:47:08"},
  {title: "Carbon emissions reduction, Vice President Biden-style", body: "<p><a href=\"http://blogs.law.harvard.edu/philg/2009/07/26/carbon-emissions-reduction-vice-president-biden-style/#comments\">Carbon emissions reduction, Vice President Biden-style</a>\r\n\r\n<p>(Via <a href=\"http://blogs.law.harvard.edu/philg\">Philip Greenspun's Weblog</a>.)</p>", slug: "carbon-emissions-reduction-vice-president-biden-style", summary: "<p><a href=\"http://blogs.law.harvard.edu/philg/2009/07/26/carbon-emissions-reduction-vice-president-biden-style/#comments\">Carbon emissions reduction, Vice President Biden-style</a>\r\n\r\n<p>(Via <a href=\"http://blogs.law.harvard.edu/philg\">Philip Greenspun's Weblog</a>.)</p>", previous_id: nil, published: true, pub_date: "2009-07-27 11:45:03"},
  {title: "New Years haiku", body: "<center>it was a done deal<br>\r\ncome to find out it wasn't<br>\r\ni am the jackass", slug: "new-years-haiku", summary: "<center>it was a done deal<br>\r\ncome to find out it wasn't<br>\r\ni am the jackass", previous_id: nil, published: true, pub_date: "2009-07-31 15:36:59"},
  {title: "Palin's Resignation: The Edited Version", body: "From Vanity Fair.  It starts off funny and gets pretty brutal by about page 3 or so.\r\n\r\n<p><a href=\"http://www.vanityfair.com/politics/features/2009/07/palin-speech-edit-200907\">Palin's Resignation: The Edited Version | vanityfair.com</a>", slug: "palins-resignation-edited-version", summary: "From Vanity Fair.  It starts off funny and gets pretty brutal by about page 3 or so.\r\n\r\n<p><a href=\"http://www.vanityfair.com/politics/features/2009/07/palin-speech-edit-200907\">Palin's Resignation: The Edited Version | vanityfair.com</a>", previous_id: nil, published: true, pub_date: "2009-08-02 00:46:28"},
  {title: "On record labels.", body: "<!--break-->\r\nI was just thinking this morning about what a hilarious and glaring anachronism the term \"record label\" actually is.  The \"record\" as a popular medium for musical commerce was essentially replaced by the CD when I was about 5 years old.  There haven't been \"labels\" on popularly consumed music nor have they been sold in \"record\" form in approximately 25 years.  Yet mavins of popular culture wonder \"what will become of the record label system?\"  When will they finally embrace the digital model (or <em>a</em> digital model)?  Will they just continue to sue copyright infringers until it's no longer profitable to do so?  How long has it honestly been since record labels even bothered with the pretense of being purveyors of culture, anyway?\r\n\r\nA buddy of mine forwarded me a link to a <a href=\"http://www.hypebot.com/hypebot/2009/12/music-as-commerce-understanding-a-mindset.html\">nicely written piece</a> on the stages of music business decline that we've all witnessed over the last ten years.  Recommended reading.\r\n\r\nSo, let's remove the rose colored glasses that I had on for the trip down memory lane that was <a href=\"http://ignoredbydinosaurs.com/2009/03/recordingtechnology\">my post on the valuable service that record labels once provided to American culture</a>.  Let's talk about the flipside of the equation.  It's been a long time coming, and is something I've been meaning to get to sooner.  There are many reasons I'm leaving RRE at this time.  The fact that of the impending record contract which would obligate me for the next several years is only part of the story from my end.  One of the other parts is that I'd feel kind of like a D-bag for signing a record label contract on the one hand while doing everything in my power to kick the legs out from under the entire faltering system on the other.  Make no mistake about it - I think that the record label system and most of the folks who have made a living in the record business for the last 50 years deserve everything that they are reaping right now.  They used to provide a service over which they had a monopoly - the recording and distribution of recorded works.  There was no practical way around the fact of recording and distribution for an artist in the age when physical media were the only media.\r\n\r\nThis monopoly was supported on all sides by a conglomeration of other media companies - print publications, radio stations, television studios - whose sole purpose was to make and promote product that made money for all.  The cultural side effects were a bonus as far as shareholders was concerned (if they were concerned at all).  However, all of these media outlets now find themselves in the exact same position of irrelevance.  The tremendous and spectacular downfall of the recording industry was only a prelude to what's to come for all the rest of these companies - witness the Boston Globe, or NBC, or any of the awful top 40 Clear Channel radio stations out there whose ad revenues are dwindling in the face of the coming storm.  Don't even get me started on TicketBastard and their \"convenience\" charge.  Go ahead and merge with LiveNation, you're only hastening and enlarging your own downfall.  It will come.\r\n\r\nFor the last ten years there's been no practical justification for that model to remain in existence save for the folks in charge are familiar with it, that's how it's always been, and that's how it is.  They will all be dead soon enough, though.  Our musical and cultural heritage will not, however.  So it is up to us to figure out the path toward self-sufficiency in the cultural arts.  Here's my high-falutin' theory ->\r\n\r\nIf what burned the old way to the ground was 1s and 0s, then what shall rise from the ashes and light the way forward for us all shall also be 1s and 0s.  This obviously means the internet.   Where other efforts to cram the old model into the new era have failed, ours shall succeed.  Where the old models existed for the enrichment of a very few in the business, the new model shall succeed in creating a sustainable livelihood for those of us who create art, who create cultural value, and who share our artistic wealth in the interest of enriching the lives of others as well as ourselves.  \r\n\r\nRecord labels and middlemen of all stripes be warned.  <em>I'm coming for you</em>.", slug: "record-labels", summary: "Can we get real for just a second?  I want to talk about the mess that is the record label system, and how I'm going to help clean it up.\r\n", previous_id: nil, published: true, pub_date: "2009-12-13 20:55:19"},
  {title: "Fake Steve on the iTablet", body: "\"I'm off to get a liver and might even die but oh wait, I'm back now and guess what, I saw God and here's the tablet computer that he wants you to use\"\r\n\r\nThis guy is too much.  Seriously.  Read this...\r\n\r\n\r\n<p><a href=\"http://feedproxy.google.com/~r/TheSecretDiaryOfSteveJobs/~3/1URP2VRV_Yo/itablet-my-heros-journey.html\">iTablet: My hero's journey</a>", slug: "fake-steve-itablet", summary: "\"I'm off to get a liver and might even die but oh wait, I'm back now and guess what, I saw God and here's the tablet computer that he wants you to use\"\r\n\r\nThis guy is too much.  Seriously.  Read this...\r\n\r\n\r\n<p><a href=\"http://feedproxy.google.com/~r/TheSecretDiaryOfSteveJobs/~3/1URP2VRV_Yo/itablet-my-heros-journey.html\">iTablet: My hero's journey</a>", previous_id: nil, published: true, pub_date: "2009-08-03 16:06:11"},
  {title: "Now what?? //part 2", body: "The ongoing sorrow in my life is this ->\r\n\r\n<h3>You can build an awesome website, and then where are you?</h3>\r\n\r\n<p>The answer is that you're ahead of at least some of the craptastic pack.  The rest of the answer is that you've just taken a major step into proving that you take yourself seriously on the internet.  You have opened Pandora's box, my friend, and if you think you can shut it, the world will know just what a punk you are.  After all, the days when your website was the totality of your internet presence have faded into our collective long-term memories by this point.  I'm not gonna say \"social networking is just as, if not more important\" because that would be insulting your intelligence.  Besides, you already know how much more time you spend on Facebook than the best band website out there.</p>\r\n\r\n<h3>So now I have to babysit this thing, too?</h3>\r\n\r\n<p>And this is where the drudgery begins, my friends.  Take it from someone who valiantly attempted to up the ante on RRE's web presence -> <em>the internet is a big place</em>.  There are plenty of musicians out there that are intensely adept at using one or more facets of their web presence to the fullest effect, but it takes practice.  If you're on Twitter, would you do me a favor and follow the <a href=\"http://twitter.com/stringdusters\">@stringdusters</a>?  I'm not sure who does the posting for them, but I think it's the one Anders calls \"Panda\".  He gets it.  And he gets it more every day.  It's been something to behold over the past few months, and it makes me envious somewhere in my heart that I'm not as good a Twitterer as they.  But I also know that someone with a hammer that bangs Twitter nails probably isn't as sharp or as diligent about banging the Facebook nails, or the Tumblr nails, or hell, what's going on on their website?  </p>\r\n\r\n<p>Are you with me so far?</p>\r\n", slug: "now-what-part-2", summary: "The ongoing sorrow in my life is this ->\r\n\r\n<h3>You can build an awesome website, and then where are you?</h3>\r\n\r\n<p>The answer is that you're ahead of at least some of the craptastic pack.  The rest of the answer is that you've just taken a major step into proving that you take yourself seriously on the internet.  You have opened Pandora's box, my friend, and if you think you can shut it, the world will know just what a punk you are.  After all, the days when your website was the totality of your internet presence have faded into our collective long-term memories by this point.", previous_id: nil, published: true, pub_date: "2009-11-18 20:18:58"},
  {title: "Holy Crap!", body: "It's been an inordinately long break, friends, and for that I apologize.  I've been engaged on a weeks-long bender of brain expanding self-education on many fronts, plotting medium and long term career paths, taking stock of the current situation and options.  For fans of the band I'm in, have no fear, I have no options at this point.  The dearth of verbiage here goes hand in hand with the intense push to expand the possibilities there.", slug: "holy-crap", summary: "It's been an inordinately long break, friends, and for that I apologize.  I've been engaged on a weeks-long bender of brain expanding self-education on many fronts, plotting medium and long term career paths, taking stock of the current situation and options.  For fans of the band I'm in, have no fear, I have no options at this point.  The dearth of verbiage here goes hand in hand with the intense push to expand the possibilities there.", previous_id: nil, published: true, pub_date: "2009-10-04 16:14:28"},
  {title: "The phases of iPhone ownership, the hazards of love.", body: "note: Parts <a href=\"http://ignoredByDinosaurs.com/2009/07/the-phases-of-iphone-ownership-the-beginning/\">one</a> and <a href=\"http://ignoredByDinosaurs.com/2009/07/the-phases-of-iphone-ownership-continued/\">two</a>.\r\n\r\n<h2>Phase Four - Complacence</h2>\r\n\r\nIt happens to the best of us.  We sometimes take our loved ones for granted.  We don't remember the thrill of exploring the new relationship, and start to get annoyed when we're forcibly reminded that those days are over.  We see others walking around arm in arm with their new love and you think to ourselves \"enjoy it while it lasts\" or \"I bet you just play games on that thing, don't you, chump?\"  Soon, it seems like everyone has an iPhone.  The 12 year old brothers across the aisle from you on the plane - why the hell do they need an iPhone?  Your entire crew gets them and you just <em>know</em> they're gonna be borrowing your charger.  Yes, I've got my charger with me.  Jesus...\r\n\r\nYou've since moved away from actually programming the thing, since object oriented programming is one giant blob of convoluted shit for a 30 year old bass player with a kid to try and pick up in his spare time.  Besides, web development really seems like more bang for the buck.  Might not pay as well, but this whole iPhone gold rush is pretty much over anyway.  You read all the tech blogs by this point - you've turned your manager onto NetNewsWire before abandoning it yourself to try Google Reader but <a href=\"http://al3x.net/2009/07/18/fever-and-the-future-of-feed-readers.html\">you'll ditch that soon, too</a> - so you know how annoying it would be to try and get your app through <a href=\"http://www.marco.org/143265621\">the Apple process</a> were you even capable of coding such a thing.  You don't even check out the App Store that much anymore, since there's nothing but a bunch of stupid <em>games</em> over there anyway.\r\n\r\n<h2>Phase Five - Resentment</h2>\r\n\r\nThis began in earnest for me about three weeks ago.  In fairness, it's not completely the fault of the iPhone.  A good bit of the aggravation is due to AT&T's service.  It's just not that good.  It was really good (or so I thought) when I first got the thing, but I swear since however many millions of people have bought iPhones the network has gotten noticeably slower and spottier.  There was a voicemail outage this past weekend that affected nearly everyone on the network whether they knew it or not.  I was in St Cloud MN last night with \"full bars\" and 3G service, but couldn't get a page to load all night.\r\n\r\nThis is pretty inexcusable to me.  AT&T's one and only job - for which they are well paid - is to deliver the services that they promise.  At Rothbury and Wakarusa the service was unusable and the 10,000 or so iPhoners that were at Rothbury (not an exaggeration, they were the only phone I saw all weekend, at least half the phones there it seemed) were reduced to communicating via text.  Whaa, whaa you might say, and ordinarily I might agree with you, but you know what Verizon did at both of those festivals?  They brought in a mobile antenna to provide service to the festival site for their customers.  Does AT&T even have such a truck?  Could they be bothered to bring it to the festival site in the middle of nowhere where 10,000 of their customers were going to be savaging their shitty network all weekend?  Apparently, no, on both counts.  Inexcusable.  (The upside is that someone had the good sense to put together a <a href=\"http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=320578228&mt=8\">Rothbury App</a> which worked great for me all weekend.  The schedule was imbedded so I wasn't reliant on the no-cell coverage and I always knew what band I was watching at the time.  Very cool.)\r\n\r\nThe other thing that I've noticed in the last weeks is that the new OS 3.0 is a good bit slower than the previous version.  Boot up time and app launch time, both slower.  This is ostensibly because there are new features loaded into the new OS, but many of those features aren't even available to 3G and OG iPhoners.  So all we get is copy and paste and a dog of a phone.  I'll be getting the new one, whatever version it is whenever I get it, but in the meantime I'm left avariciously playing with Stacy's new 3GS.\r\n\r\n<h2>In closing</h2>\r\n\r\nThe iPhone is awesome, but if you don't have one - wait.  It will most likely be coming to Verizon sometime in the next year.  I will be jumping ship when it does.  My advice for the meantime - get an iPod touch and stick with your cell phone that works.  There will be a new phase for me after the resolution of this current dark period while AT&T gets their act together (I hope), or it goes over to Verizon, but in the meantime it's #attfail for me.", slug: "phases-iphone-ownership-hazards-love", summary: "note: Parts <a href=\"http://ignoredByDinosaurs.com/2009/07/the-phases-of-iphone-ownership-the-beginning/\">one</a> and <a href=\"http://ignoredByDinosaurs.com/2009/07/the-phases-of-iphone-ownership-continued/\">two</a>.\r\n\r\n<h2>Phase Four - Complacence</h2>", previous_id: 48, published: true, pub_date: "2009-07-23 17:05:26"},
  {title: "MS's long slow decline", body: "\"Microsoft’s core problem is that they have lost the hearts of computer enthusiasts.\"\r\n\r\n- the Daring Fireball in a piece called <a href=\"http://daringfireball.net/2009/07/microsofts_long_slow_decline\">Microsoft's long, slow decline</a>.  He sums up my feelings almost perfectly.  I apologize ahead of time for being a snobby Mac asshole, but feel my decades of loyalty to MS-DOS and Windows justify and inform my opinions sufficiently. \r\n\r\nedit: <a href=\"http://news.ycombinator.com/item?id=733390\"> a discussion thread going on YCombinator</a>", slug: "ms-long-slow-decline", summary: "\"Microsoft’s core problem is that they have lost the hearts of computer enthusiasts.\"\r\n\r\n- the Daring Fireball in a piece called <a href=\"http://daringfireball.net/2009/07/microsofts_long_slow_decline\">Microsoft's long, slow decline</a>.  He sums up my feelings almost perfectly.  I apologize ahead of time for being a snobby Mac asshole, but feel my decades of loyalty to MS-DOS and Windows justify and inform my opinions sufficiently. \r\n\r\nedit: <a href=\"http://news.ycombinator.com/item?id=733390\"> a discussion thread going on YCombinator</a>", previous_id: nil, published: true, pub_date: "2009-07-31 18:52:37"},
  {title: "A Site About Something / Richard Geller", body: "<span class=\"drop_cap\">O</span>kay, I'm not a fan of Flash.  I'm not sure why except that I think it's kinda like the B3 organ for me.  It's great when someone uses it tastefully, but I've heard so many bands/albums misusing the B3 that it's kinda ruined for me.\r\n\r\nThis guy's got the right idea, however.  If my whole aesthetic weren't about clean and direct these days, I'd want to do something like this.\r\n\r\n<a href=\"http://www.asiteaboutsomething.com/\">A Site About Something / Richard Geller</a>.", slug: "site-about-something-richard-geller", summary: "<span class=\"drop_cap\">O</span>kay, I'm not a fan of Flash.  I'm not sure why except that I think it's kinda like the B3 organ for me.  It's great when someone uses it tastefully, but I've heard so many bands/albums misusing the B3 that it's kinda ruined for me.\r\n\r\nThis guy's got the right idea, however.  If my whole aesthetic weren't about clean and direct these days, I'd want to do something like this.\r\n\r\n<a href=\"http://www.asiteaboutsomething.com/\">A Site About Something / Richard Geller</a>.", previous_id: nil, published: true, pub_date: "2009-05-28 22:40:34"},
  {title: "Do you have a computer?  Do you care about any of the files...", body: "<p><a href=\"http://www.marco.org/157203227\">Do you have a computer?\r\n\r\nDo you care about any of the files...</a>\r\n\r\nGood advice, worth repeating.  I'm not even a \"professional\" and I get asked quite often what to do when someone's hard drive takes a dump.", slug: "do-you-have-computer-do-you-care-about-any-files", summary: "<p><a href=\"http://www.marco.org/157203227\">Do you have a computer?\r\n\r\nDo you care about any of the files...</a>\r\n\r\nGood advice, worth repeating.  I'm not even a \"professional\" and I get asked quite often what to do when someone's hard drive takes a dump.", previous_id: nil, published: true, pub_date: "2009-08-06 15:00:41"},
  {title: "Giddy-up", body: "I'm relocating some stuff this week.  I've just bought a year of hosting with Media Temple, which seems to be where all the cool kids are parking their websites, and trying concurrently to transfer all manner of domains and live websites to said host.  This should be a lot of fun.  I'll probably hose a lot of stuff this week, this website, the new forum, who knows what else.  By the way, if you're thinking about registering a domain name, don't go Google Apps to do it.  They are a partner with GoDaddy, so just skip the middleman and go straight to GoDaddy.  I've had many issues with having the domain and the hosting plan under two different accounts at GoDaddy/Google.  Live and learn...\r\n\r\nAt the end of this tunnel, however, I'll have several new notches in my belt and will be ready to confidently take on your website.\r\n\r\nYou have a website, right?", slug: "giddy-up", summary: "I'm relocating some stuff this week.  I've just bought a year of hosting with Media Temple, which seems to be where all the cool kids are parking their websites, and trying concurrently to transfer all manner of domains and live websites to said host.  This should be a lot of fun.  I'll probably hose a lot of stuff this week, this website, the new forum, who knows what else.  By the way, if you're thinking about registering a domain name, don't go Google Apps to do it.  They are a partner with GoDaddy, so just skip the middleman and go straight to GoDaddy.", previous_id: nil, published: true, pub_date: "2009-06-09 10:32:19"},
  {title: "Template for Writing a Music Business Plan", body: "Found the link to this on the Music Think Tank.  Haven't had time to pore over it yet, but it's almost certainly worth linking to.\r\n\r\n<a href=\"http://eleetmusic.com/?p=1223\">Template for Writing a Music Business Plan</a>", slug: "template-writing-music-business-plan", summary: "Found the link to this on the Music Think Tank.  Haven't had time to pore over it yet, but it's almost certainly worth linking to.\r\n\r\n<a href=\"http://eleetmusic.com/?p=1223\">Template for Writing a Music Business Plan</a>", previous_id: nil, published: true, pub_date: "2009-08-03 16:23:01"},
  {title: "On Drupal.", body: "So far it's been a little boring.  I've added a few modules, mostly to achieve some comment functionality that Wordpress comes with almost out of the box, and somehow I find my database up to 90+ tables.  And the comments don't even really work that well.\r\n\r\nSo, in researching how to move from Drupal to Wordpress (since I've of course been doing mountains of Wordpress hacking for the last weeks since moving to Drupal), I've discovered that it's basically not easily doable, due to the above mentioned database bloat and variety of setups.  Thus...\r\n\r\nVersion 4.0 shall be a Rails app.  I've said this before, but I'm going to have to manually import all of my old posts and comments shit like that in via SQL most likely.  To the layman this means a lot of interesting and educational work.  I'll bet I can copy what I need for a functional blog in <10 tables.  Probably more like <6.\r\n\r\nYou'll know.  thanks for stopping by.  I'll have something more interesting to write about soon.  ", slug: "drupal", summary: "So far it's been a little boring.  I've added a few modules, mostly to achieve some comment functionality that Wordpress comes with almost out of the box, and somehow I find my database up to 90+ tables.  And the comments don't even really work that well.\r\n\r\nSo, in researching how to move from Drupal to Wordpress (since I've of course been doing mountains of Wordpress hacking for the last weeks since moving to Drupal), I've discovered that it's basically not easily doable, due to the above mentioned database bloat and variety of setups.  Thus...\r\n\r\nVersion 4.0 shall be a Rails app.  I've said this before, but I'm going to have to manually import all of my old posts and comments shit like that in via SQL most likely.  To the layman this means a lot of interesting and educational work.  I'll bet I can copy what I need for a functional blog in <10 tables.  Probably more like <6.\r\n\r\nYou'll know.  thanks for stopping by.  I'll have something more interesting to write about soon.  ", previous_id: nil, published: true, pub_date: "2010-01-17 20:53:28"},
  {title: "Launch fast and iterate.", body: "<p>Well, this blog has hit version 3.0, with today's torturous migration from WordPress to Drupal.  Why put myself through such an ordeal?  Because if I'm going to paint my masterpiece, I'm going to have to start butchering some canvasses, and Drupal seems to beg for me to hack away at it.  That and there is a world of flexibility in this platform that doesn't really exist in WP.  </p>\r\n\r\n<p>It'll be a process of getting up to speed and making this look and feel and act as nicely as the old iBD, but once I get going, expect some actual development here.</p>\r\n\r\n<p>Thanks, friends.  Oh, and in case you were wondering what happening to all of RRE's web properties today, I don't know anything about it...</p>", slug: "launch-fast-and-iterate", summary: "<p>Well, this blog has hit version 3.0, with today's torturous migration from WordPress to Drupal.  Why put myself through such an ordeal?  Because if I'm going to paint my masterpiece, I'm going to have to start butchering some canvasses, and Drupal seems to beg for me to hack away at it.  That and there is a world of flexibility in this platform that doesn't really exist in WP.  </p>\r\n\r\n<p>It'll be a process of getting up to speed and making this look and feel and act as nicely as the old iBD, but once I get going, expect some actual development here.</p>\r\n\r\n<p>Thanks, friends.  Oh, and in case you were wondering what happening to all of RRE's web properties today, I don't know anything about it...</p>", previous_id: nil, published: true, pub_date: "2009-12-07 20:56:10"},
  {title: "At 31, on being a professional musician", body: "<span class=\"drop_cap\">W</span>e played in Toronto last night.  It was our first Canadian gig and it went well.  The club wasn't much to speak of, but that's to be expected from our first time in a new market.  The promoter was pleased with the turnout, though earlier in the day there was a bit of handwringing over the lack of presold tickets.  According to him people don't want to pay the TicketMaster surcharge, which adds up to well over half the base ticket price.  This is from the mouth of the Live Nation promoter - \"people don't want to pay the ridiculous TicketMaster surcharge\".  I thought that dovetailed nicely with <a href=\"http://ignoredByDinosaurs.com/2009/08/the-concert-biz/\">yesterday's post</a>.\r\n\r\nAnyway, I should do more writing on music, I think.  That's obviously where I have a great deal more experience and relative expertise than software but it's just so old hat for me.  I've turned to the software business as a mental escape from sitting in the van/bus and thinking about the music business.  I'm tired of the music business.  I've learned pretty much everything I care to know about the music business.  So why keep doing it?\r\n\r\nI was in a pretty lame mood yesterday.  Toronto is very cool - at least the hood we were in - but I get burnt out on the traveling and the being gone from Michelle and Noah approximately two hours after I walk out the door.  We've been in a tour bus for the last year, and the memory of being in the van is still fresh in my mind.  The opening act last night was grilling me after the show about what it's like to ride in a bus.  \"It's fine, don't get me wrong, but you can get real tired of traveling around no matter what the vehicle.\"  I'll elaborate on professional bus travel in another post.\r\n\r\nWe played a great show last night, though.\r\n\r\nAfter the show I remember thinking (because I wrote it down) \"as tired as I am of traveling, that's as good as we're playing\".  Meaning - all the glamour, the novelty, and the fun of traveling America has completely and utterly worn off by this point.  The only thing that keeps me going is the music, and the music has been better than ever lately.  Two nights ago at Niagara Falls I played better than I ever have before, without effort, and this has been happening a lot lately.  I've been more often reaching a deeply meditative state while we play, I call it the Coltrane Zone.  The music flows without thought to get in the way, and it's the most spiritual feeling I know.  That's why I keep doing this.  \r\n", slug: "at-31-being-professional-musician", summary: "<span class=\"drop_cap\">W</span>e played in Toronto last night.  It was our first Canadian gig and it went well.  The club wasn't much to speak of, but that's to be expected from our first time in a new market.  The promoter was pleased with the turnout, though earlier in the day there was a bit of handwringing over the lack of presold tickets.  According to him people don't want to pay the TicketMaster surcharge, which adds up to well over half the base ticket price.  This is from the mouth of the Live Nation promoter - \"people don't want to pay the ridiculous TicketMaster surcharge\".", previous_id: nil, published: true, pub_date: "2009-08-08 21:31:31"},
  {title: "Could I ask a favor?", body: "I'm testing out this new comment notification system that will supposedly email me when people leave comments, with the aim of making this website (that's getting a tiny bit of action now) a little more conversationally interesting.  Would you mind leaving a comment down there?  And if there's already one there, would you engage that person in some banter?  Supposedly they'll get email, too, unless they untick the \"notify me\" box.\r\n\r\nI appreciate it.  By the way, I don't think it's working and I've been debugging it all day.  But maybe it just needs a new post to work.  I dunno.  Drupal's tricky.\r\n\r\nEdit: It's working now.  Thanks.", slug: "could-i-ask-favor", summary: "I'm testing out this new comment notification system that will supposedly email me when people leave comments, with the aim of making this website (that's getting a tiny bit of action now) a little more conversationally interesting.  Would you mind leaving a comment down there?  And if there's already one there, would you engage that person in some banter?  Supposedly they'll get email, too, unless they untick the \"notify me\" box.\r\n\r\nI appreciate it.  By the way, I don't think it's working and I've been debugging it all day.  But maybe it just needs a new post to work.  I dunno.  Drupal's tricky.\r\n\r\nEdit: It's working now.  Thanks.", previous_id: nil, published: true, pub_date: "2009-12-17 20:54:51"},
  {title: "Psychology, finance, war, cards...", body: "\"This line-of-credit, the stop-gap measure that was supposed to solve the problem that hadn’t really existed in the first place had done nothing but worsen it. When we started the week, we had no liquidity issues. But because people had said that we did have problems with our capital, it became true, even though it wasn’t true when people started saying it. . . . So we were forced to find capital to offset the losses we’d sustained because somebody decided we didn’t have capital when we really did. So when we finally got more capital to replace the capital we’d lost, people took that as a bad sign and pointed to the fact that we’d had no capital and had to get a loan to cover it, even when we did have the capital they said we didn’t have. \"\r\n\r\n<br>- From a <a href=\"http://www.newyorker.com/reporting/2009/07/27/090727fa_fact_gladwell?currentPage=all\">New Yorker article by Malcolm Gladwell</a> on the psychology of overconfidence, in this case how the rumor of illiquidity took down Bear Stearns in the matter of a week.  Gladwell goes on to make parallels between the hammering of the finance industry and the disastrous British landing at Gallipoli in WWI, where the Brits thought they had it so in the bag that they landed with half the force that they needed to do the job. \r\n\r\n", slug: "psychology-finance-war-cards", summary: "\"This line-of-credit, the stop-gap measure that was supposed to solve the problem that hadn’t really existed in the first place had done nothing but worsen it. When we started the week, we had no liquidity issues. But because people had said that we did have problems with our capital, it became true, even though it wasn’t true when people started saying it. . . . So we were forced to find capital to offset the losses we’d sustained because somebody decided we didn’t have capital when we really did.", previous_id: nil, published: true, pub_date: "2009-07-31 15:08:08"},
  {title: "The golden age of the software business.", body: "<blockquote>And speaking of widgets, reports out today claim that Verizon is about to open its \"Widget Bazaar\" wider to developers in a bid to create an \"app store\" similar to the iPhone's.  Like the iPhone store, there will be an approval process, and developers will be able to charge for their applications, with the revenue split likely being 70% to the developer and 30% to Verizon.</blockquote>\r\n\r\n\r\n-> From a <a href=\"http://feedproxy.google.com/~r/typepad/alleyinsider/silicon_alley_insider/~3/n2q4d4vQkns/fios-20-verizon-embraces-the-internet-to-push-its-tv-service-2009-8\">BusinessInsider article</a> explaining some of the features that Verizon is rolling out on their FiOS broadband service.  I hope that Verizon doesn't take too much more from Apple's playbook than the 30% cut and the seed of the idea on this, because a properly nurtured software market is, in my humble opinion, the future of rock and roll.\r\n\r\nDespite the much advertised success, Apple actually hasn't gotten the AppStore quite right.  See <a href=\"http://www.polarbearfarm.com/blog/?p=124\">here</a>, <a href=\"http://rc3.org/2009/08/01/apple-vs-my-preconceived-notions/\">here</a> and <a href=\"http://dashes.com/anil/2009/07/apple-secrecy-does-not-scale.html\">here</a> for some very well reasoned complaints and observations from developers on how the process could be much more successful.  \r\n\r\n\r\nChief among these complaints are the fact that the flipside of what makes Apple's products so successful (the closed and tight-lipped Apple ecosystem) is that they have tried to exert an amount of control over the AppStore that simply isn't feasible.  The very idea of trying to \"control\" the open 3rd party market is an exercise in futility - Prometheus can't un-steal the fire.  Make no mistake, Steve Jobs would never have allowed 3rd party developers to start developing applications for his device had people not already been <a href=\"http://www.tuaw.com/2007/08/08/iphone-hacking-101-jailbreaking/\">jailbreaking</a> these phones by the hundreds of thousands.  He's not the kind of guy who likes others cramping his style and having a market of people openly hacking the OS on their iPhone definitely qualifies as cramping his style.  He succeeded in stemming the tide and turning it to Apple's advantage for a time, but the dike has been leaky the whole time.  Remember the <a href=\"http://blogs.oreilly.com/iphone/2008/07/ing-nda.html\">NDA</a>?  That's the ham-handed non-disclosure agreement that Apple had in place on all their developers after the official release of the iPhone SDK (software developers kit) which expressly forbid anyone from even talking about iPhone development.  How are people supposed to make the most of your platform when you won't even allow a message forum for your developers to talk to each other and for newbies to learn?  They did away with that provision several months ago, but their treatment of the developer community hasn't improved much since.  The great irony in all of this is that the AppStore is absolutely jam-packed with total shit at the same time that well known and respected developers are having their hard work rejected for highly dubious reasons.\r\n\r\nWhen the day comes that someone gets the ecosystem right - meaning the proper combination of user, manufacturer, and developer base - the beginning of the golden age of software will truly have begun.  Since a little over a year ago I've imagined where we are now in the evolution of the software biz as being sort of like the dawn of radio, in the vacuum tube/fireside chat era.  The invention of the transistor (and the portable radio soon after) ushered in the golden age of the music business, the <a href=\"http://en.wikipedia.org/wiki/Tom_Dowd\">Tom Dowd</a>/<a href=\"http://en.wikipedia.org/wiki/Ahmet_Ertegun\">Ahmet Ertegun</a> days, when starting a band to make a living and maybe even get rich must've seemed like a reasonable proposition for a person with a modest amount of musical talent.  For a person or a band with a lot of talent and business acumen to support it it must've been like the wild west.  That's the sense I get from the software sector right now.  That's why I'm here.\r\n\r\nThe record business vein is pretty well played out by many measures, but that's the nature of evolution.  I think this little announcement by Verizon is actually big news...\r\n\r\n\r\n\r\n\r\n<p><a href=\"http://feedproxy.google.com/~r/typepad/alleyinsider/silicon_alley_insider/~3/n2q4d4vQkns/fios-20-verizon-embraces-the-internet-to-push-its-tv-service-2009-8\">Verizon's FiOS Stays Ahead Of Cable With More Internet Features</a>", slug: "golden-age-software-business", summary: "<blockquote>And speaking of widgets, reports out today claim that Verizon is about to open its \"Widget Bazaar\" wider to developers in a bid to create an \"app store\" similar to the iPhone's.  Like the iPhone store, there will be an approval process, and developers will be able to charge for their applications, with the revenue split likely being 70% to the developer and 30% to Verizon.</blockquote>\r\n\r\n\r\n-> From a <a href=\"http://feedproxy.google.com/~r/typepad/alleyinsider/silicon_alley_insider/~3/n2q4d4vQkns/fios-20-verizon-embraces-the-internet-to-push-its-tv-service-2009-8\">BusinessInsider article</a> explaining some of the features that Verizon is rolling out on their FiOS broadband service.  I hope that Verizon doesn't take too much more from Apple's playbook than the 30% cut and the seed of the idea on this, because a properly nurtured software market is, in my humble opinion, the future of rock and roll.\r\n\r\n", previous_id: nil, published: true, pub_date: "2009-08-05 14:29:01"},
  {title: "ibd update", body: "<p>Hello, faithful.  Or curious.  Or google searchers.  As usual I've got too many ideas and too much work and not enough time or attention span.</p>\r\n\r\n<p>The iBD project <a href=\"http://github.com/JGrubb/ignored-by-dinosaurs\">lives here</a>, or rather is in gestation here.  It's probably going to be a few weeks at the least until i can actually put some time into it.  As I see it, there's a goodish amount of work to be done.  Gee, I wonder if that's why nobody has really tried this before?  Anyway, in the meantime I have some actual work that I need to get off of my plate and into my portfolio.  Being a relative Drupal newby presents many thrilling challenges.</p>\r\n\r\n<p>The good news is that one of my current client projects involve calendaring, a big portion of the to-do list for this project.  Drupal already has most of this ground covered for us, but implementation is going to be key.  Adding an actual calendar does up the complexity, both for us as the builders and installers and for the end-client, the bands.</p>\r\n\r\n<p>eCommerce is the big deal here, I think.  For too long it's been in the hands of someone else for most bands.  That's got to change.  If anyone knows more than I do about Amazon S3, please chime in.  I think DIY content distribution is going to be the paradigm of the near-future, and it's not that difficult for developers to do.  The challenge is to create a system that not to difficult for bands to do.  As always.  A system that monitors digital content downloads on the site and automatically throttles up cloud distribution as needed?</p>\r\n\r\n<p>Anyway, just a quick \"hi\", and to let you know that I'm around if you need me.</p>", slug: "ibd-update", summary: "<p>Hello, faithful.  Or curious.  Or google searchers.  As usual I've got too many ideas and too much work and not enough time or attention span.</p>\r\n\r\n<p>The iBD project <a href=\"http://github.com/JGrubb/ignored-by-dinosaurs\">lives here</a>, or rather is in gestation here.  It's probably going to be a few weeks at the least until i can actually put some time into it.  As I see it, there's a goodish amount of work to be done.  Gee, I wonder if that's why nobody has really tried this before?  Anyway, in the meantime I have some actual work that I need to get off of my plate and into my portfolio.  Being a relative Drupal newby presents many thrilling challenges.</p>", previous_id: nil, published: true, pub_date: "2010-06-28 16:35:38"},
  {title: "Permissions abuse ~or~ the Facebook shell game.", body: "Spotify.\r\n\r\nMy favorite thing on the internet ever so far.\r\n\r\nShare music with my Facebook friends.  Great idea.  Find all kinds of new music without having to commit to buying it.  Great idea.  Subscription feature that lets me take it on a plane trip.  Great idea.  \r\n\r\n<hr />\r\n\r\nToday I have to reconnect to Facebook for some reason.  I look at the ridiculous list of permissions that Spotify wants me to grant them.  Access to my data when I'm not online.  Permission to post on my behalf.  To name my third son Spotify.  I wouldn't have thought twice about dismissing and going about my day, but for two things.  \r\n\r\n1. <strong>Connecting to Facebook is apparently the only realistic way to find your friends in the world with whom you might want to share music</strong>.\r\n\r\n2. The words of my friend Teddy, who works at Facebook.  When I first signed up with Spotify i was reluctant to connect it to Facebook for the mental discomfort it caused me to grant any application the rights for which it was asking.  To paraphrase,\r\n\r\n<blockquote>\"You gotta realize, though.  If they go and take a bunch of your data and post a bunch of stuff on your wall that you don't want there, it makes them look bad and Facebook look bad too.\"</blockquote>\r\n\r\nHow true.\r\n\r\n<hr />\r\n\r\nLuckily I wasn't indulging my Katy Perry sweet tooth this morning when I get a message from an acquaintance on Facebook that Spotify is indeed posting every single song that I listen to on my behalf.  Exact same permissions that were granted two months ago, but now being used in the exact way that I didn't want.\r\n\r\nIt took me about 5 minutes of incredulous tweeting to figure out that I could go 3 levels down into the settings on Facebook and remove this particular permission from the Spotify app.  I decided while I was at it to remove every other permission for the Spotify app as well delete about 30 apps that I had idea were even there.  One bad apple.\r\n\r\n<h2>The question I have</h2>\r\n\r\n<strong>How can this sort of app behavior be opt-out?</strong>\r\n\r\nObviously Facebook and app developers in general would plead to the FCC before congress that any of this behavior is opt-in in the first place, that Spotify asked me up front for these permissions and I said \"yes\".  This is technically true, but total bullshit.\r\n\r\nWhen an app asks for permission to do this and this and that on your behalf, why isn't there a simple little checklist of those things that you do and don't want it to do up front, instead of buried 3 levels deep in settings that are continually being moved around Facebook?\r\n\r\nCue the title of this post.", slug: "permissions-abuse-or-facebook-shell-game", summary: "Spotify.\r\n\r\nMy favorite thing on the internet ever so far.\r\n\r\nShare music with my Facebook friends.  Great idea.  Find all kinds of new music without having to commit to buying it.  Great idea.  Subscription feature that lets me take it on a plane trip.  Great idea.  \r\n\r\n<hr />\r\n\r", previous_id: nil, published: true, pub_date: "2011-09-23 17:59:33"},
  {title: "Now what?? //part 3", body: "Shouldn't it be a little more like this ->\r\n\r\n<blockquote><p>You're a new user to the iBD CMS.  The initial login screen is simple, clean.  It has 3 fields that you need to fill in to register - Your name, your password, and your band's name.  You press the <strong>submit</strong> button and that's it.  Your new website is active.  The second screen you come to asks for your Facebook login information.  You enter it, and since your an admin of your bands Facebook page, you just directly imported all the data that is present on your Facebook page - that's a bio, your tour dates, band members, any contact info, links to videos and photos, pretty much everything a website needs is automatically populated with the press of a button.</p>\r\n  \r\n<p>That's cool!  But wait, this bio is a little outdated. It still has the story about carving a path deep and wide.  Let's change this a little bit.  And once we're done, we press <strong>save</strong> and it's automatically sent to Facebook, since your  admin account is already linked.</p></blockquote>\r\n\r\n<p>Are you starting to get the picture?</p>", slug: "now-what-part-3", summary: "Shouldn't it be a little more like this ->\r\n\r\n<blockquote><p>You're a new user to the iBD CMS.  The initial login screen is simple, clean.  It has 3 fields that you need to fill in to register - Your name, your password, and your band's name.  You press the <strong>submit</strong> button and that's it.  Your new website is active.  The second screen you come to asks for your Facebook login information.", previous_id: nil, published: true, pub_date: "2009-11-18 22:13:46"},
  {title: "the concert biz.", body: "I read a piece the other day that really irritated the holy crap out of me.  An acquaintance had posted a link to <a href=\"http://lefsetz.com/wordpress/index.php/archives/2009/08/02/the-concert-business/\">this article</a> proclaiming the \"implosion of the concert business\".  The examples he cites - Aerosmith, the Rolling Stones, Madonna, Bruce Springsteen, U2 - are all apparently seeing a downturn in their ticket sales for their most recent runs.  This is not surprising to me and I assumed that it wouldn't be surprising to anyone, but according to Mr. Lefsetz it's a cause of concern for many a concert promoting Dinosaur.  \r\n\r\nThis is the section that really kills me :\r\n\r\n<blockquote>Maybe no one cares to the equivalent of a multiplatinum level anymore.  Maybe the live business has to give that paradigm up.  At least for a decade, until new acts are grown.\r\n\r\nWe want music that resonates.  And we want music.  Lady GaGa is outfits.  Katy Perry is so second rate she’s third rate.  The future looks more like the Kings Of Leon.  A band that’s been around for years that finally breaks through.  And doesn’t break the bank when it sets ticket prices.</blockquote>\r\n\r\nNow, ignoring the casual inattention to building proper sentences, he does make a salient point.  If'n there is a decline in the overall concert business, it's obviously a parallel to the decline in the record business.  I do believe that P2P sharing played a part in killing the record business of yore, but no more than the CD-R, no more than the laptop computer, and certainly not as much as the overall disposable quality of pop music over the last 15 years.  People don't want to see those acts live.  And the Kings of Leon?  They're the future?  So, the future looks exactly like the past - young, pretty kids that sound and act like the Rolling Stones that have a sugar-coated and easily swallowed press story.  Kill yourself.\r\n\r\nThe reason that this depresses me is that the entire music business still views itself through the same lens that it has for the last 20 years - huge amounts of money to be made from relatively little effort, and if it doesn't pay off there are a hundred other candidates waiting to get in line for their shot.  Not a single thought is paid to building a business (act) in the time tested manner that every other business has to go through in order to turn a long-term profit.  The Police didn't do much on their first two albums, but 2 years after that they were the biggest act in the world.  Luckily their label didn't dump them, or who would headline Bonnaroo 25 years on?\r\n\r\n\r\nJust a side question - Who's gonna play the Super Bowl Half Time show in 10 years?  Death Cab for Cutie?\r\n\r\n\r\n\r\n\r\n<a href=\"http://lefsetz.com/wordpress/index.php/archives/2009/08/02/the-concert-business/\">The link</a>", slug: "the-concert-biz", summary: "I read a piece the other day that really irritated the holy crap out of me.  An acquaintance had posted a link to <a href=\"http://lefsetz.com/wordpress/index.php/archives/2009/08/02/the-concert-business/\">this article</a> proclaiming the \"implosion of the concert business\".  The examples he cites - Aerosmith, the Rolling Stones, Madonna, Bruce Springsteen, U2 - are all apparently seeing a downturn in their ticket sales for their most recent runs.  This is not surprising to me and I assumed that it wouldn't be surprising to anyone, but according to Mr. Lefsetz it's a cause of concern for many a concert promoting Dinosaur.  \r\n\r\nThis is the section that really kills me :\r\n\r\n<blockquote>Maybe no one cares to the equivalent of a multiplatinum level anymore.  Maybe the live business has to give that paradigm up.  At least for a decade, until new acts are grown.\r\n\r\n", previous_id: nil, published: true, pub_date: "2009-08-06 18:36:31"},
  {title: " A tale of two doc sections", body: "<p>I don't know about you, but the difference between <a href=\"http://civicrm.org/\">an exciting open source project</a> and a <a href=\"http://www.sugarcrm.com/crm/\">less than exciting open source project</a> boils down for me when I get to the first page of their documentation.</p>\n\n<p>Note on the <a href=\"http://en.flossmanuals.net/CiviCRM/\">CiviCRM</a> site they have a link that says \"Make a PDF\".  Notice how on the <a href=\"http://developers.sugarcrm.com/docs/OS/5.5/-docs-Developer_Guides-Sugar_Developer_Guide_5.5-toc.html\">SugarCRM</a> site they have a mile long table of contents that helps you none whatsoever.  Note how much background information there is once you get into the Civi documentation about what CRM actually is, and how it might help your organization.  Notice how much of the beginning of the Sugar docs is devoted to installing the thing, which is helpful but come on.  There's an automated installer file.  It's pretty simple for a developer.</p>\n\n<p>I can't help but think of projects like Sugar as somehow \"faker\" than projects like Civi just because the very essence of open source is to encourage audience participation, not to make it easier for a consultant market to emerge because I can't wade through your shitty documentation.</p>\n\n<p>Getting off the soapbox now.</p>", slug: "a-tale-of-two-doc-sections", summary: "<p>I don't know about you, but the difference between <a href=\"http://civicrm.org/\">an exciting open source project</a> and a <a href=\"http://www.sugarcrm.com/crm/\">less than exciting open source project</a> boils down for me when I get to the first page of their documentation.</p>", previous_id: nil, published: true, pub_date: "2010-05-20 01:04:55"},
  {title: "Homebrew Postgres install issues, Mac OS X server", body: "<blockquote>\r\n<pre>\r\nThe program \"postgres\" was found by \"/usr/local/Cellar/postgresql/9.2.4/bin/initdb\"\r\nbut was not the same version as initdb.\r\n</pre>\r\n</blockquote>\r\n\r\nI've been battling this for the last couple of hours, trying to figure out why I can't make Postgres run as easily on my desktop as I did on my laptop.  Homebrew took care of it all, just leaving me with the agony of taking off the MySQL training wheels to figure out this new and scary Postgres admin syntax.\r\n\r\nSo I uninstalled the Homebrew version and went to the EnterpriseDB site and downloaded the official installer for Mac.  This didn't yield any results either, and seemed to want you to use the GUI tools to administer it anyway.  <code>which psql</code> kept giving me `/usr/bin/psql`, which should've been more of a clue, but I'm not that quick.  <code>psql --version</code> kept giving me `9.0.2`, which also should've been more of a clue, but I just figured I must've installed Postgres a long time ago and gave up and forgot about it.\r\n\r\nThen I remembered.  Mac OSX server comes with Postgres.  That's why it's reporting `/usr/bin` for all it's paths instead of `/usr/local/bin` (the homebrew default), or `/Library/Postgres`, the official installer default.\r\n\r\nThere was also an unkillable set of `_postgres` processes in `ps` that I couldn't figure out how to kill.  So, the flamethrower method is to delete everything in /usr/bin that relates to PG - psql, postgres_real, anything you can find.  **Don't forget /usr/bin/initdb** because that's what was throwing the above error.  Then you can get on with the homebrew installer.", slug: "homebrew-postgres-install-issues-mac-os-x-server", summary: "<blockquote>\r\n<pre>\r\nThe program \"postgres\" was found by \"/usr/local/Cellar/postgresql/9.2.4/bin/initdb\"\r\nbut was not the same version as initdb.\r\n</pre>\r\n</blockquote>\r\n\r\nI've been battling this for the last couple of hours, trying to figure out why I can't make Postgres run as easily on my desktop as I did on my laptop.", previous_id: nil, published: true, pub_date: "2013-05-29 21:51:37"},
  {title: "Net Neutrality and the Golden Goose", body: "> Just a week before the FCC holds a vote on whether to apply fairness rules to some of the nation’s internet service providers, two companies that sell their services to the country’s largest cellular companies showed off a different vision of the future: one where you’ll have to pay extra to watch YouTube or use Facebook.\r\n\r\n~From a [Wired article](http://www.wired.com/epicenter/2010/12/carriers-net-neutrality-tiers/ \"Mobile Carriers Dream of Charging per Page &#124; Epicenter&nbsp;&#124; Wired.com\") earlier this week.  **READ IT**\r\n\r\n## Now here's why this matters...\r\n\r\nIt's not about Facebook or YouTube.  Those seem on the surface like silly trifles and why shouldn't we have to pay more for silly trifles, right?  Because those silly, time-sucking trifles represent present-day American innovation.  Our physical manufacturing sector has been almost completely moved offshore.  This was done over a period of a couple of decades between Reagan and Bush II and was done for the sole reason of increasing corporate profits.  If it's cheaper to manufacture stuff somewhere they don't have a minimum wage, and the prices here stay the same, the company makes more money for it's shareholders.  This seems like a good thing, unless you're looking further than one fiscal quarter ahead.\r\n\r\nNow we have a situation where large Telecommunications companies have found a giant, largely unregulated loophole in the fastest growing sector of their business.  They'd like for their share of the wireless spectrum to _remain_ largely unregulated so that they can carve it up how they want and charge for it what they want.  Seems fair, right?  But remember this is _our fucking AIR_ they're charging us to access.  They rightly realize that they majority of future internet use is going to take place over the airwaves, so best to get that sucker divvied up now and get the \"best practices\" in place for making as much money as they possibly can going forward.  (Makes me think of [this article](http://www.theonion.com/articles/american-people-hire-highpowered-lobbyist-to-push,18204/ \"American People Hire High-Powered Lobbyist To Push Interests In Congress - The Onion - America's Finest News Source\") from the Onion.)\r\n\r\nBest practices would include making damn sure they charge more money for popular web services once their customers come to depend on them.  I depend on Facebook to keep me in touch with most of the people I know on this planet.  It's surpassed \"social network\" status and become a utility.\r\n\r\nThis utility and others like it have become the center of American innovation, and the brightest hope for the future American economy.  Perhaps we won't be able to manufacture our way out of a recession, but maybe we can innovate ourselves out.\r\n\r\n------\r\n\r\n> But Chile is trying a radical new experiment. ... It is importing entrepreneurs from all over the world, by offering them $40,000 to bootstrap in Chile. They get a visa; free office space; assistance with networking, mentoring, fundraising, and connecting to potential customers and partners. All the entrepreneurs have to do, in return, is commit to working hard and live in one of the most beautiful places on this planet.\r\n\r\n~From a [Techcrunch article](http://techcrunch.com/2010/12/18/chile%E2%80%99s-grand-innovation-experiment/ \"Chile’s Grand Innovation Experiment\") a few days ago.\r\n\r\n## Here's why you should be worried about Net Neutrality.\r\n\r\nIf you think for a second that America's place in this world as the center of creative innovation and hard working people making something from nothing is granted by the grace of God, _you might be right_.  But Verizon and the FCC may just make it impossible for even the will of God to overcome the long-term economic effects of giving these TelCom idiots what they want.  What they want is to milk as much money out of you and I as they possibly can, and they plan to do this by charging more for \"better, faster\" access to large internet companies that can supposedly afford it (while totally ignorant to the fact that the oldest and largest of any of these companies is barely 10 years old).\r\n\r\nWhere does this lead?\r\n\r\n1.  If the biggest internet companies pay more for their content to be delivered faster, then smaller companies and startups will have to use the \"plain old\" internet, which is what the entire internet is today.  \r\n\r\n2.  If big TelCom gets a pass to charge for faster access over a premium network, they most certainly won't have any incentive whatsoever to improve the \"plain old\" network.  \r\n\r\n3.  If countries like Chile are not just begging but _paying_ smart entrepreneurial types to move to their country and start businesses, they most certainly will.\r\n\r\n4.  Oh yeah, vastly higher bills for all of us.\r\n\r\nErgo, if technological innovation and brainpower have been this country's advantage over the rest of the world and you deliberately cripple technological innovation in the name of a few years of higher corporate profits, you can rest assured that the brainpower will flee this country to some place where it's more highly valued.\r\n\r\n------\r\n\r\nI'll leave you with a [few words from Steve Wozniak](http://www.theatlantic.com/technology/archive/2010/12/steve-wozniak-to-the-fcc-keep-the-internet-free/68294/ \"Steve Wozniak to the FCC: Keep the Internet Free - Steve Wozniak - Technology - The Atlantic\"), co-founder of Apple.\r\n\r\n> I was brought up being told that one of the main purposes of our government is to help people who need help. When I was very young, this made me prouder than anything else of my government. [...] We have very few government agencies that the populace views as looking out for them, the people. The FCC is one of these agencies that is still wearing a white hat. Not only is current action on Net Neutrality one of the most important times ever for the FCC, **it's probably the most momentous and watched action of any government agency in memorable times in terms of setting our perception of whether the government represents the wealthy powers or the average citizen, of whether the government is good or is bad.** This decision is important far beyond the domain of the FCC itself.", slug: "net-neutrality-and-golden-goose", summary: "> Just a week before the FCC holds a vote on whether to apply fairness rules to some of the nation’s internet service providers, two companies that sell their services to the country’s largest cellular companies showed off a different vision of the future: one where you’ll have to pay extra to watch YouTube or use Facebook.\r\n\r\n~From a [Wired article](http://www.wired.com/epicenter/2010/12/carriers-net-neutrality-tiers/ \"Mobile Carriers Dream of Charging per Page &#124; Epicenter&nbsp;&#124; Wired.com\") earlier this week.  **READ IT**\r\n\r\n## Now here's why this matters...\r\n\r\nIt's not about Facebook or YouTube.  Those seem on the surface like silly trifles and why shouldn't we have to pay more for silly trifles, right?  Because those silly, time-sucking trifles represent present-day American innovation.  Our physical manufacturing sector has been almost completely moved offshore.  This was done over a period of a couple of decades between Reagan and Bush II and was done for the sole reason of increasing corporate profits.  If it's cheaper to manufacture stuff somewhere they don't have a minimum wage, and the prices here stay the same, the company makes more money for it's shareholders.  This seems like a good thing, unless you're looking further than one fiscal quarter ahead.\r\n\r\nNow we have a situation where large Telecommunications companies have found a giant, largely unregulated loophole in the fastest growing sector of their business.  They'd like for their share of the wireless spectrum to _remain_ largely unregulated so that they can carve it up how they want and charge for it what they want.  Seems fair, right?  But remember this is _our fucking AIR_ they're charging us to access.  They rightly realize that they majority of future internet use is going to take place over the airwaves, so best to get that sucker divvied up now and get the \"best practices\" in place for making as much money as they possibly can going forward.", previous_id: nil, published: true, pub_date: "2010-12-22 05:00:00"},
  {title: "On Life After Earth", body: "I suppose there's a few ways a post with this title could go.  I'm flying back from my first run with the new band, and there were a few themes bouncing around the last couple weeks.  This band is a lot lower overhead.  There's no bus call.  There's no soundguy (although I personally hope that's remedied this year).  Load in and setup take about 15 minutes.  Billy and Drew managed to work out lift passes for us to all get out on the mountain 3 times in the last two weeks.  I grew up skiing a lot in the Rockies with my folks, but had basically taken a 13 year hiatus.  The last time I'd been on a mountain was about 5 years ago on the Honkytonk/Railroad tour in 2006, so I had forgotten how much I love skiing until about 100 yards into our first run at Jackson Hole (an amazing mountain).\r\n\r\nI miss my family quite a lot.  We'd all gotten used to my being home and a cell phone is a poor substitute for a hug.  I can already see where that's going to be a problem again, but I'm hoping that this gig remains a nice, steady, part-time thing because I really like the music.  The guys are very nice guys and I'm meeting all manner of the CO scene.  I'm already collecting some funny stories about the things you'd expect there'd be funny stories about and yes, the RRE thing bestows a lot of street cred out there.\r\n\r\nIt feels so good to have a bass in my hands.  I'm really thankful.", slug: "life-after-earth", summary: "I suppose there's a few ways a post with this title could go.  I'm flying back from my first run with the new band, and there were a few themes bouncing around the last couple weeks.  This band is a lot lower overhead.  There's no bus call.  There's no soundguy (although I personally hope that's remedied this year).  Load in and setup take about 15 minutes.  Billy and Drew managed to work out lift passes for us to all get out on the mountain 3 times in the last two weeks.  I grew up skiing a lot in the Rockies with my folks, but had basically taken a 13 year hiatus.  The last time I'd been on a mountain was about 5 years ago on the Honkytonk/Railroad tour in 2006, so I had forgotten how much I love skiing until about 100 yards into our first run at Jackson Hole (an amazing mountain).\r\n\r\nI miss my family quite a lot.  We'd all gotten used to my being home and a cell phone is a poor substitute for a hug.  I can already see where that's going to be a problem again, but I'm hoping that this gig remains a nice, steady, part-time thing because I really like the music.  The guys are very nice guys and I'm meeting all manner of the CO scene.  I'm already collecting some funny stories about the things you'd expect there'd be funny stories about and yes, the RRE thing bestows a lot of street cred out there.\r\n\r\nIt feels so good to have a bass in my hands.  I'm really thankful.", previous_id: nil, published: true, pub_date: "2011-02-12 05:00:00"},
  {title: "Markdown in Rails 3 with RedCarpet", body: "**updated Jan 2014 for Rails 4, see bottom**\r\n\r\n---\r\n\r\n<p>I just got this blog up and running yesterday, a marathon of pain but ultimately successful.  So today I wanted to add some Markdown action so I didn&#39;t have to drop into TextMate to add <code>&lt;p&gt;</code> tags to everything all the time.</p>\r\n\r\n<p>RedCarpet seemed to be the gem that was recommended, but it&#39;s recently seen a complete API overhaul that has rendered useless the vast majority of the de facto documentation out there.  So, viewers of the <a href=\"http://railscasts.com/episodes/272-markdown-with-redcarpet\">Markdown Railscast</a>, this one&#39;s for you.</p>\r\n\r\n<p>It only involves a few changes, so if you&#39;re here it&#39;s likely that you know how to install it and you&#39;re here because of that &quot;no &#39;new&#39; method&quot; error.  Instead of </p>\r\n\r\n`<%= Redcarpet.new(@post.body).to_html %>`\r\n\r\n<p>as mentioned in the Railscast, you&#39;ll need to do a little more setting up.  This is how I did it.</p>\r\n\r\n~~~ruby\r\n# app/helpers/application_helper.rb\r\n\r\ndef dat_markdown(text)\r\n  markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML,\r\n      :autolink => true, :space_after_headers => true, :no_intra_emphasis => true)\r\n  markdown.render(text).html_safe\r\nend\r\n~~~\r\n\r\n<p>The first parameter is which renderer you want to use (either HTML or XHTML, for what?), and everything after that is your options glob which you can <a href=\"https://github.com/tanoku/redcarpet\">get from here</a>.  For readability you could also do -</p>\r\n\r\n~~~ruby\r\n# app/helpers/application_helper.rb\r\n\r\ndef dat_markdown(text)\r\n  options = {\r\n    :autolink => true,\r\n    :space_after_headers => true,\r\n    :no_intra_emphasis => true\r\n  }\r\n  markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML, options)\r\n  markdown.render(text).html_safe\r\nend\r\n~~~\r\n\r\n<p>After that all you have to do is </p>\r\n\r\n`<%= dat_markdown(@post.body) %>`\r\n\r\n<p>and you&#39;re on your merry way.  Enjoy.</p>\r\n\r\n#### January 2014 update\r\n\r\nRails 4 - check out [Kramdown](https://github.com/gettalong/kramdown).  This is how easy it is now.\r\n\r\n~~~ruby\r\n# application_helper.rb\r\n\r\n  def markdown_filter(text)\r\n    Kramdown::Document.new(text).to_html.html_safe\r\n  end\r\n~~~\r\n\r\nand `<%= markdown_filter @post.body %>`\r\n\r\nSuper bonus for the demographic reading this - syntax highlighting is included for free.  See above.  [Docs for the options hash are here.](http://kramdown.gettalong.org/options.html)", slug: "markdown-rails-3-redcarpet", summary: "Redcarpet Markdown in Rails 3, updated January 2014 with a suggestion for Rails 4 users (hint: Kramdown).", previous_id: nil, published: true, pub_date: "2012-06-02 05:00:00"},
  {title: "How to embed a flash file in a webpage.", body: "<p>This is actually two different commands.  One is for Mozilla browsers and the other is for everyone else.  I forget why, something about the object property not being recognized by Mozilla.  Maybe it's the other way around.  If you're curious, it's out there.</p>\r\n\r\n<p>You'll want to adjust the FILENAME and the width and height properties in two places - inside the object and inside the embed.  Enjoy.</p>\r\n\r\n~~~html\r\n<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" \r\n  codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,29,0\" width=\"1000\" \r\n\t height=\"298\"> \r\n\t <param name=\"movie\" value=\"FILENAME.swf\"> \r\n\t <param name=\"quality\" value=\"high\"> \r\n\t <embed src=\"FILENAME.swf\" quality=\"high\" \r\n  pluginspage=\"http://www.macromedia.com/go/getflashplayer\" type=\"application/x-shockwave-flash\" width=\"1000\" \r\n\t height=\"298\"></embed> \r\n</object>\r\n~~~", slug: "how-to-embed-a-flash-file-in-a-webpage", summary: "<p>This is actually two different commands.  One is for Mozilla browsers and the other is for everyone else.  I forget why, something about the object property not being recognized by Mozilla.  Maybe it's the other way around.  If you're curious, it's out there.</p>", previous_id: nil, published: true, pub_date: "2010-03-22 15:17:08"},
  {title: "Attention -  potential future bloggers of the world", body: "<p>It appears that the creative fire feels like being spent on writing again, finally.  So if may I impart a bit of what I've learned in the last few months...</p>\r\n\r\n<p>Before you set up that Blogspot account, I just want to call your attention to a few of the other offerings out there.  Blogger/Blogspot is an extremely simple way to get going, but there are even simpler ways to get going, if that's what you're going for.  There are also offerings out there that will allow you a much greater amount of flexibility in what you do with your new blog, should you want to go bigger.  And now...</p>\r\n\r\n<p>My new favorite social website is <a href=\"http://www.tumblr.com/\">Tumblr</a>, hands down.  Right there on the front page of the site, in 40 pt font is the slogan \"the easiest way to blog\".  I'd have to agree.  You don't have to give them anything about your identity if you don't want, and you can create your own subdomain, just like Blogger.  What Tumblr has over Blogger is a much more refined design.  There are a bunch of templates to choose from, just like Blogger, but I find them to be a little more easy on the eyes, and thus easier to read and navigate - all important to the blogging experience, wouldn't you say?  If all you want to do is start letting some of your thoughts out of your head in blog form, give it a whirl.  Oh yeah, you can point <a href=\"http://johnnygrubb.com/\">your own domain</a> at Tumblr instead of using whatever.tumblr.com as your URL.</p>\r\n\r\n<p>If you need to build something a little more extensive, say a website for your classroom's parents to keep up with their kids and their activities, I'd highly recommend <a href=\"http://wordpress.com/\">Wordpress.com</a>.  They too have a number of different design templates to choose from (though not as many as Tumblr), so setting up a blog that feels like you isn't too much of a challenge.  The great thing about Wordpress, the framework on which this website also runs, is that you can build outward.  Say you want to have a contact page, and a calendar of events on another page, etc, you can do that pretty easily (and quickly) with Wordpress.  Hopefully my buddy Jimmy doesn't mind my linking to <a href=\"http://mrsapia108.wordpress.com/\">his classroom website</a> as a fantastic example of what a smart person can do with WordPress in a short amount of time.</p>\r\n\r\n<p>You really should have a blog by this point.  Make it recipes or pictures or whatever, but it's free and it's fun.  Just do it...</p>\r\n\r\n", slug: "attention-potential-future-bloggers-world", summary: "<p>It appears that the creative fire feels like being spent on writing again, finally.  So if may I impart a bit of what I've learned in the last few months...</p>\r\n\r\n<p>Before you set up that Blogspot account, I just want to call your attention to a few of the other offerings out there.  Blogger/Blogspot is an extremely simple way to get going, but there are even simpler ways to get going, if that's what you're going for.  There are also offerings out there that will allow you a much greater amount of flexibility in what you do with your new blog, should you want to go bigger.  And now...</p>", previous_id: nil, published: true, pub_date: "2009-10-15 17:15:11"},
  {title: "Race to Running Software", body: "<blockquote>Get something real up and running quickly.  Running software is the best way to build momentum, rally your team, and flush out ideas that don't work. It should be your number one priority from day one.\n\nIt's ok to do less, skip details, and take shortcuts in your process if it'll lead to running software faster. Once you're there, you'll be rewarded with a significantly more accurate perspective on how to proceed. Stories, wireframes, even html mockups, are just approximations. Running software is real.\n\nWith real, running software everyone gets closer to true understanding and agreement. You avoid heated arguments over sketches and paragraphs that wind up turning out not to matter anyway. You realize that parts you thought were trivial are actually quite crucial.\n\nReal things lead to real reactions. And that's how you get to the truth.\n</blockquote>\n\nfrom \"<a href=\"http://gettingreal.37signals.com/ch06_Race_to_Running_Software.php\">Getting Real</a>\"<br />\n-via <a href=\"http://www.37signals.com/\">37 Signals</a>\n<br />\n\n<p>And on that note, this blog is going away soon.  I'm going to be needing this space for something else.</p>", slug: "race-to-running-software", summary: "<blockquote>Get something real up and running quickly.  Running software is the best way to build momentum, rally your team, and flush out ideas that don't work. It should be your number one priority from day one.\n\nIt's ok to do less, skip details, and take shortcuts in your process if it'll lead to running software faster.", previous_id: nil, published: true, pub_date: "2010-02-09 20:07:37"},
  {title: "A quick trip to the panic room", body: "I use Git.  I'm relatively new to the party and it's all I've ever used.  I tried to get SVN working for me back when I was first gettings started and it felt like hand-wiring a tube amplifier - slow, tedious, and you don't know if it's going to work until you're totally done.  I've more recently taken on a client who uses a nifty issue tracker called Jira, but they have their source checked in to SVN.  I thought I was going to to have to get familiar with it until I rediscovered a tool that comes with Git called git-svn.   It works pretty transparently after learning a couple of new commands.\r\n\r\nThis morning however, I tried something new and was greeted with this (after 5 hours of work).\r\n\r\n<pre>\r\nsrc/sites/all/modules/eloqua\r\n580e5a6480dfae9ee8aa39e2ff14e4b3604d8827 \r\ndoesn't exist in the repository at /usr/local/git/libexec/git-core/git-svn line 4771\r\nFailed to read object 580e5a6480dfae9ee8aa39e2ff14e4b3604d8827 \r\nat /usr/local/git/libexec/git-core/git-svn line 573\r\n</pre>\r\n\r\nThis is a Drupal site that I'm working on.  To make a long story short, I decided to pull a new module over via Git from drupal.org instead of using Drush like I always do.  I figured I might want to chip in on some of the development of this module while I'm already here.  Everything went fine, I added the .git folder within the module to .gitignore and went on my way.  After finishing up enough of the work to send it over to staging and attempting a <code>git svn dcommit</code> I get the horrifying error above.\r\n\r\nI found <a href=\"http://de-co-de.blogspot.com/2009/02/git-svn-and-submodules.html\">this post</a> that got me started down the right track.  I used a different approach, though.  I used the technique of rewriting the history with the info <a href=\"http://help.github.com/remove-sensitive-data/\">found here</a>.  I'm pretty familiar with removing accidentally committed DB passwords, and wasn't familiar with the technique that he had commented out in that post.  Worked like a charm, and am now back on track.\r\n\r\nTo sum up, you delete the offending directory and then run something to the effect of \r\n\r\n<code>\r\ngit filter-branch --index-filter \\\r\n 'git rm --cached --ignore-unmatch path/to/the/formerly/misbehaving/module'\r\n</code>\r\n\r\nfrom the base path of the git repo.  By the way, that backslash doesn't do anything but allow you to wrap a command to two lines.  You can leave it out if you want and just type all that as one long line.\r\n\r\nThe culprit of all this is that git-svn specifically chokes on git repos below the main one, as is the case if you <code>git clone</code> a module straight off of d.o.  So, sorry kids, you'll have to contribute that code in some other way.  ", slug: "quick-trip-panic-room", summary: "I use Git.  I'm relatively new to the party and it's all I've ever used.  I tried to get SVN working for me back when I was first gettings started and it felt like hand-wiring a tube amplifier - slow, tedious, and you don't know if it's going to work until you're totally done.  I've more recently taken on a client who uses a nifty issue tracker called Jira, but they have their source checked in to SVN.  I thought I was going to to have to get familiar with it until I rediscovered a tool that comes with Git called git-svn.", previous_id: nil, published: true, pub_date: "2011-06-13 17:50:16"},
  {title: "Here they are =>", body: "<p>I knew they were out there somewhere.  Their twist is that they're writing all the tools themselves.  They don't have all their cards down on the table, but it seems like they're ultimately after some kind of easy hosted thing.</p>\r\n\r\n<a href=\"http://cashmusic.org/\">http://cashmusic.org/</a>\r\n\r\n<p>I still think that Drupal is a better way to go.  In fact, I think any open source movement that can piggyback on the conventions and success of another is already that much further up the ladder.  These guys appear to have a track record, though.  Who knows.  Maybe some of their tools can be adapted.</p>", slug: "here-they-are", summary: "<p>I knew they were out there somewhere.  Their twist is that they're writing all the tools themselves.  They don't have all their cards down on the table, but it seems like they're ultimately after some kind of easy hosted thing.</p>\r\n\r\n<a href=\"http://cashmusic.org/\">http://cashmusic.org/</a>\r\n\r\n<p>I still think that Drupal is a better way to go.  In fact, I think any open source movement that can piggyback on the conventions and success of another is already that much further up the ladder.  These guys appear to have a track record, though.  Who knows.  Maybe some of their tools can be adapted.</p>", previous_id: nil, published: true, pub_date: "2010-07-15 15:17:05"},
  {title: "Thursday morning coffee with the n00b developer - domains and hosting", body: "<p>Welcome back to another installment of the newby web developer series.  This morning's entry comes once again from our buddy Jimmy, who the two of you reading might know as the highly technically inclined CT robo-teacher.  He'll probably be reforming the state of education in your state soon.  </p>\r\n\r\n<blockquote>What's up fool.\r\n\r\nMy friend wants me to build him a simple site using wordpress. He already owns the domain name.\r\n\r\nMy question is, once I build the site using MAMP, and get everything upload to our host, how does the domain name get transferred? Is that something we have to handle or the host handles.\r\n\r\nThanks,\r\nJimmy</blockquote>\r\n\r\n<p>Calling me a fool is his way of showing affection.  So, the answer is that \"it depends\".  If your buddy went the \"get your domain free with a year's webhosting\" route that many larger webhosts encourage you to do, then you don't have to do anything.  If your buddy bought the domain on the open market through a registrar such as GoDaddy, you have to dive into the scary, subterranean world of DNS.</p>\r\n\r\n<p>DNS stands for Domain Name System.  A perhaps less-than-100%-accurate description --</p>\r\n\r\n<p>When you buy a domain name, it's sort of like buying a spot in the world's internet phone book.  That is to say that the address <a href=\"http://johnnygrubb.com/\">http://johnnygrubb.com</a> is actually an \"abstraction\" of the information that a computer needs to complete your browser's request to get my webpage to come up.  What my computer needs to know is the IP address of the server where http://johnnygrubb.com lives.  The Domain Name System does that for you.</p>  \r\n\r\n<p>If you need to look up the phone number of Newtown Chinese Restaurant in Newton, you go to the phone book, look for Newtown Chinese Restaurant and move your eye to the right to get the phone number.  If you want to go to any website, you enter the address in your browser, which takes the request and hits the nearest DNS server to find the actual IP address of the webhost so the requested page can be grabbed.  It's the job of the owner of the domain name to make sure that the \"phone number\" or IP address is correct.</p>\r\n\r\n<p>If you've bought your domain name as part of a package, then you don't need to do anything.  The webhost actually owns the domain name and is letting you use it.  This has pros and cons obviously, the pros being that they handle all of this DNS stuff for you.</p>  \r\n\r\n<p id=\"explanation\">If you've bought the domain name separately, you need to give that name a \"phone number\" so that DNS knows who to call when you request a page from that site.  That's done by getting deep into your Domain Control Panel (or something like depending on the registrar) and and finding the \"Nameserver\" controls.  This is where you give your domain name an address.  It's usually in an english readable form, for instance, one of the nameservers for my hosting account is <code>ns1.mediatemple.com</code>.  That means that when a request is made for a page on this site, DNS says \"don't look at me, go talk to Media Temple's nameservers.  They know where to find that page.\"  Once the request gets to Media Temple, their nameservers say \"the page you seek is at 64.207.129.18\", which is the IP address of the actual server on which this site is plopped.</p>\r\n\r\n<p>So, to extend the analogy a little further, a DNS lookup is actually more like that movie where the kids are trying to find the super-cool party, only to get to the party they have to drive all over town from one destination to the next before they are finally given the actual address.  For real fun, type this is your Terminal --</p>\r\n\r\n<code>traceroute http://ignoredbydinosaurs.com</code>\r\n\r\n<p>This command will show you all of the different \"nodes\" out there on the web that your request hits before it actually arrives at it's destination, my webhost.</p>\r\n\r\n<p>So, the tl;dr is that if he bought the domain name through a webhost as part of a hosting package, you don't need to do anything.  If he bought the domain name on it's own, you need to go to the Domain Control Panel or the Domain Manager or whatever it's called where it was registered.  In there somewhere is a setting for the nameservers.  On the webhost's end, you'll find what their nameservers are (usually something like ns1.awesomewebhost.com and ns2.awesomewebhost.com) and put that information into the proper fields on the registrar end.  There's always at least 2 nameservers at every host because like all servers, they can go down and if they both go down your site will be unavailable.  It happens.</p>\r\n\r\n<p>Changing nameserver information is like firing an MX missile.  There is no \"undo\".  There is no recalling the missile.  Once you push the button to change the nameservers, that change of address starts filtering out to the rest of the world's DNS servers so that the request can be sent to the proper IP address.  This filtering-out process can take anywhere from a few hours to a few days, depending.  Once it's done, the whole world will be pointed to the party on your server.</p>", slug: "thursday-morning-coffee-n00b-developer-domains-and-hosting", summary: "<p>Welcome back to another installment of the newby web developer series.  This morning's entry comes once again from our buddy Jimmy, who the two of you reading might know as the highly technically inclined CT robo-teacher.  He'll probably be reforming the state of education in your state soon.  </p>", previous_id: nil, published: true, pub_date: "2010-10-21 13:41:59"},
  {title: "Health.", body: "I started running about this time last year.  I hadn't exercised regularly since college, where they gave you gym access along with your tuition.  I spent the rest of my 20s gaining about 2 or 3 pounds a year, and not really doing much in the way of taking care of myself.  It had occurred to me that the only exercise I was really ever going to be able to afford was running, but I <i>hate</i> running.  I kept up this hope that some day I was going to be able to at least join a YMCA with a pool or something, as that was much more my speed.\r\n\r\nI had a big winter last year, with the birth of my baby boy right in the middle of it.  I had the same realization that I had had in college 11 years earlier - that one simple little thing that I could that would make me feel better was to start getting some regular exercise again.  So I dug my running shoes out of the closet, as I had tried this before, and got started.  The first mile isn't as hard as the second mile.  And it must've taken me six months of plugging away at just running those two miles without stopping, but once I got over the hump, I really got over the hump.\r\n\r\nMy short run around where I live is right at 4 miles long, and I try to do that every other day when the weather allows.  I start getting really antsy if I go more than a week.  Without a shadow of a doubt, I'm in the best shape I've ever been in.  I lost the pounds and then some, and haven't really relapsed at all as far as bad eating habits.  My wife Michelle is a veg, so it's easy when I'm home, but I've managed to keep at it on the road with greater and greater success.  I got up yesterday at 7:30 and went for about 3.5 with my buddy Matt, and then did another 3 or so here in Charleston.  As you can tell, this is about nothing in particular, but if you hate running as bad as I did, there's a very good chance that you could love it as much as I do now...", slug: "health", summary: "I started running about this time last year.  I hadn't exercised regularly since college, where they gave you gym access along with your tuition.  I spent the rest of my 20s gaining about 2 or 3 pounds a year, and not really doing much in the way of taking care of myself.  It had occurred to me that the only exercise I was really ever going to be able to afford was running, but I <i>hate</i> running.", previous_id: nil, published: true, pub_date: "2009-02-26 22:25:26"},
  {title: "Wordpress for iphone", body: "I don't know why it took me so long to bop on over to the app store and search Wordpress, but of course there's an iPhone app! I'll use it now to distract myself while Sheaffer drives us to the airport. \r\n\r\nWe're headed to the Mile High music festival in Denver tonight. We're playing tomorrow afternoon at the exact same time as Ani DiFranco, which is a real bummer because she was the best set of music I saw all weekend at Rothbury. I'd never seen her play before, and all I can say is Holy Crap. She played the Sherwood stage, which faces that forest you might have heard about. She played her song Napolean, which I'd never heard before. Sitting there on the side of the stage with her voice echoing off the forest was the best way to hear a tune like that for the first time. I'm kind of in love with her now. Anyway...", slug: "wordpress-iphone", summary: "I don't know why it took me so long to bop on over to the app store and search Wordpress, but of course there's an iPhone app! I'll use it now to distract myself while Sheaffer drives us to the airport. \r\n\r\nWe're headed to the Mile High music festival in Denver tonight. We're playing tomorrow afternoon at the exact same time as Ani DiFranco, which is a real bummer because she was the best set of music I saw all weekend at Rothbury. I'd never seen her play before, and all I can say is Holy Crap. She played the Sherwood stage, which faces that forest you might have heard about.", previous_id: nil, published: true, pub_date: "2009-07-17 16:42:26"},
  {title: "The last gasp of the Album?", body: "In case you don't follow the tech press as closely as I do, Apple will be releasing a small, supposedly cheaper tablet computer intended to compete in the \"netbook\" market.  Those are small, cheap computers that can't really do anything but access the internet.  I see them in airports a lot lately.  They look annoying to use, but that's just me.  So Apple's version will (according to rumor) look like a really large iPhone - a 9 inch or so touchscreen and no keyboard.  \r\n\r\n<!--break-->\r\n\r\n\"Apple wants to make bigger purchases more compelling by creating a new type of interactive album material, including photos, lyric sheets and liner notes that allow users to click through to items that they find most interesting. Consumers would be able to play songs directly from the interactive book without clicking back into Apple’s iTunes software, executives said.\" - <a href=\"http://www.ft.com/cms/s/0/28129982-7a18-11de-b86f-00144feabdc0.html\">via Financial Times</a>\r\n\r\nThis sounds like what the iPhone's promise of a music player has been all along - crazy amounts of interaction with the content you've bought - but artists (save perhaps Trent Reznor) have been slow to get on board with realizing the potential.  Let's hope this will stir things up a bit.\r\n\r\n<p><a href=\"http://www.businessinsider.com/apples-cocktail-to-offer-interactive-music-albums-2009-7\">Apple, Labels Aim To Save The Album With \"Cocktail\" Project (AAPL)</a>\r\n\r\n", slug: "last-gasp-album", summary: "In case you don't follow the tech press as closely as I do, Apple will be releasing a small, supposedly cheaper tablet computer intended to compete in the \"netbook\" market.  Those are small, cheap computers that can't really do anything but access the internet.  I see them in airports a lot lately.  They look annoying to use, but that's just me.  So Apple's version will (according to rumor) look like a really large iPhone - a 9 inch or so touchscreen and no keyboard.  \r\n\r\n", previous_id: nil, published: true, pub_date: "2009-07-27 19:25:57"},
  {title: "When Social Media Becomes A Weapon", body: "This one comes from a marketing blog called Outspoken Media.  It's a little over the top for me most of the time, and the girl Lisa that runs it most of the time has pronounced diarrhea of the keyboard (yes, I'm calling the kettle black).  This post got me thinking, however...\r\n\r\nThe spark was with the \"United Breaks Guitars\" tune that's been stuck in my head all day.  I'll ruin the surprise and tell you - she's not that impressed.  She has some interesting reasons why =>\r\n\r\n<p><a href=\"http://outspokenmedia.com/social-media/when-social-media-becomes-a-weapon/#comments\">When Social Media Becomes A Weapon</a>", slug: "when-social-media-becomes-weapon", summary: "This one comes from a marketing blog called Outspoken Media.  It's a little over the top for me most of the time, and the girl Lisa that runs it most of the time has pronounced diarrhea of the keyboard (yes, I'm calling the kettle black).  This post got me thinking, however...\r\n\r\nThe spark was with the \"United Breaks Guitars\" tune that's been stuck in my head all day.  I'll ruin the surprise and tell you - she's not that impressed.", previous_id: nil, published: true, pub_date: "2009-07-28 22:05:19"},
  {title: "Had the weirdest dream last night", body: "Travelling, of course.  By myself, of course.  In Georgia.  Train terminal in middle GA, taking a train to Europe.  Forgot my wallet - had to go back and get it.  got lost.  Couldn't find my way, repeatedly.  Ended up in McDonough, but it was huge and congested.  Met some hippy kids.  Ended up at a music store.  Ended up in the rain.  Ended up outside McDonough and it was a giant city on a hill.  Beautiful.  \r\n\r\nWas telling Michelle about it and she said it sounded like my life.", slug: "had-weirdest-dream-last-night", summary: "Travelling, of course.  By myself, of course.  In Georgia.  Train terminal in middle GA, taking a train to Europe.  Forgot my wallet - had to go back and get it.  got lost.  Couldn't find my way, repeatedly.  Ended up in McDonough, but it was huge and congested.  Met some hippy kids.  Ended up at a music store.  Ended up in the rain.  Ended up outside McDonough and it was a giant city on a hill.  Beautiful.  \r\n\r\nWas telling Michelle about it and she said it sounded like my life.", previous_id: nil, published: true, pub_date: "2009-08-27 20:53:43"},
  {title: "The importance of \"blind carbon copy\"", body: "<p>You've all seen it.  It's right under the to: field when you compose an email.  No, not CC, but BCC.  That stands for \"Blind Carbon Copy\".  The purpose of this little feature isn't just to send copies of important emails to yourself for archival purposes.  Let's have an example...</p>\r\n\r\n<p>Let's say you have a really enthusiastic bud-die that's always sending links to music that he's uploaded to all his friends.  You hugely appreciate the thought every time you get one of his treats.  But then it happens.  Someone accidentally hits \"reply all\" on the email.  Pretty soon one person's personalized shout out is sent to the entire list, even though the intended recipient is only one person.  How best to avoid this <em>faux pas petit</em>?  Blind Carbon Copy.</p>\r\n\r\n<p>Ideally, you'd put yourself in the to: field and everyone else in the BCC field.  This way, not only are you not exposing the email addresses of all of your friends to the whole world, when someone inevitably hits the \"reply all\" button, it's cool.  They don't have any names on the list except the original sender, and the world is just that much happier.</p>\r\n\r\n<p>Thus concludes today's lesson in etiquette and irony from yours truly.</p>", slug: "importance-blind-carbon-copy", summary: "<p>You've all seen it.  It's right under the to: field when you compose an email.  No, not CC, but BCC.  That stands for \"Blind Carbon Copy\".  The purpose of this little feature isn't just to send copies of important emails to yourself for archival purposes.  Let's have an example...</p>", previous_id: nil, published: true, pub_date: "2009-10-22 18:05:47"},
  {title: "Revision.", body: "<p>I'd said earlier that I'd use this blog as a tool to try and explain the process that I'm going through so as to hopefully help some of you understand what has led me to this decision (to quit my awesome band).  </p>\r\n\r\n<p>I'm changing my mind.</p>\r\n\r\n<p>Most of what I'm feeling and doing and going through at this point is way too personal and, the existence of this blog notwithstanding, I'm kind of a private person.</p>\r\n\r\n<p>Edit: what I mean is that I'm going write about whatever is on my mind, just like I've always done.  I've felt something of a mental block since I made my pronouncement on the purpose of this blog.  I didn't really feel like talking about what a wreck I was after the last CO show, or how Vince Guaraldi set me off Sunday afternoon after Stroudsburg.  It's my bidness, and there's not really much to say about it.  So, I'm just going to resume writing about whatever...</p>", slug: "revision", summary: "<p>I'd said earlier that I'd use this blog as a tool to try and explain the process that I'm going through so as to hopefully help some of you understand what has led me to this decision (to quit my awesome band).  </p>\r\n\r\n<p>I'm changing my mind.</p>\r\n\r\n<p>Most of what I'm feeling and doing and going through at this point is way too personal and, the existence of this blog notwithstanding, I'm kind of a private person.</p>", previous_id: nil, published: true, pub_date: "2009-12-04 17:07:15"},
  {title: "Programming Classes", body: "A f-ing killer free programming class that some kind dude just started yesterday on Reddit.  Anyone who's at all curious about how computers work or and of this stuff might want to have a look...\r\n\r\n<a href=\"http://www.reddit.com/r/carlhprogramming\">Programming Classes</a>.", slug: "programming-classes", summary: "A f-ing killer free programming class that some kind dude just started yesterday on Reddit.  Anyone who's at all curious about how computers work or and of this stuff might want to have a look...\r\n\r\n<a href=\"http://www.reddit.com/r/carlhprogramming\">Programming Classes</a>.", previous_id: nil, published: true, pub_date: "2009-09-26 14:08:14"},
  {title: "On Facebook's new no-privacy policy.", body: "<blockquote>\r\nI don't buy Zuckerberg's argument that Facebook is now only reflecting the changes that society is undergoing. I think Facebook itself is a major agent of social change and by acting otherwise Zuckerberg is being arrogant and condescending.\r\n</blockquote>\r\n\r\nvia => <a href=\"http://www.readwriteweb.com/archives/facebooks_zuckerberg_says_the_age_of_privacy_is_ov.php\">ReadWriteWeb</a>.\r\n\r\nAnd, in my humble opinion, he's begging the FTC and the FCC to get involved in a sector of the economy in which they can only do lasting and permanent harm.  This is why 25 year olds shouldn't be allowed to be CEO of companies this large.  This is nothing more or less than youthful hubris and this giant mis-step is the first on the road to irrelevance.  I hope for the sake of Silicon Valley that they don't IPO now, because they're done.  It'll take a few years, but they're done...", slug: "facebooks-new-no-privacy-policy", summary: "<blockquote>\r\nI don't buy Zuckerberg's argument that Facebook is now only reflecting the changes that society is undergoing. I think Facebook itself is a major agent of social change and by acting otherwise Zuckerberg is being arrogant and condescending.\r\n</blockquote>\r\n\r\nvia => <a href=\"http://www.readwriteweb.com/archives/facebooks_zuckerberg_says_the_age_of_privacy_is_ov.php\">ReadWriteWeb</a>.\r\n\r\nAnd, in my humble opinion, he's begging the FTC and the FCC to get involved in a sector of the economy in which they can only do lasting and permanent harm.  This is why 25 year olds shouldn't be allowed to be CEO of companies this large.  This is nothing more or less than youthful hubris and this giant mis-step is the first on the road to irrelevance.  I hope for the sake of Silicon Valley that they don't IPO now, because they're done.  It'll take a few years, but they're done...", previous_id: nil, published: true, pub_date: "2010-01-15 20:53:33"},
  {title: "Communities of Creators", body: "<p><a href=\"http://feeds.dashes.com/~r/AnilDash/~3/dGG_dHl0_MI/communities-of-creators.html\">Communities of Creators</a>: \"What I've found, though, is that being part of an active, ambitious, supportive and diverse community of peers is just as valuable, if not more so, than any of the more prosaic prerequisites for success.\"</p>\r\n\r\nI'll bet that's true.  Maybe I'll find out someday.\r\n\r\n<p>(Via <a href=\"http://dashes.com/anil/\">Anil Dash</a>.)</p>", slug: "communities-creators", summary: "<p><a href=\"http://feeds.dashes.com/~r/AnilDash/~3/dGG_dHl0_MI/communities-of-creators.html\">Communities of Creators</a>: \"What I've found, though, is that being part of an active, ambitious, supportive and diverse community of peers is just as valuable, if not more so, than any of the more prosaic prerequisites for success.\"</p>\r\n\r\nI'll bet that's true.  Maybe I'll find out someday.\r\n\r\n<p>(Via <a href=\"http://dashes.com/anil/\">Anil Dash</a>.)</p>", previous_id: nil, published: true, pub_date: "2009-10-09 16:56:22"},
  {title: "Did you know...", body: "<p>...that the DOJ approved the merger of everyone's two favorite companies in the touring business - TicketMaster and LiveNation?  They found no reason to have anti-trust concerns with a merger between a monopolistic ticket service and a monopolistic concert promoter/venue owner.  But wait!  There's more!</p>\r\n\r\n<p>One person who may have had some input into this decision was FCC chairman Julius Genachowski.  Fun fact about Mr. Genachowski - one of his previous gigs before he came to Washington was <a href=\"http://en.wikipedia.org/wiki/Julius_Genachowski\">on the board of directors at - wait for it - TicketMaster</a>!  I'm sure there was no conflict of interest if he did in fact have a say in this decision.</p>\r\n\r\n<p>I'm sure we've all heard of Obama's hard-ass chief of staff, Rahm Emanuel.  Fun fact about Mr. Emanuel - his brother, Ari, is a hard-ass Hollywood talent agent.  He was supposedly the inspiration behind the character Ari on the HBO show Entourage.  I'm sure that <a href=\"http://en.wikipedia.org/wiki/Ari_Emanuel\">his being on the board of directors at LiveNation</a> played no part in swaying the DOJ's decision to let this absurdly anti-competitive, big-business friendly decision to go through.</p>\r\n\r\n<p>I might as well have voted for Palin...</p>\r\n\r\n<a href=\"http://flickr.com/photos/51035555243@N01/130601011\" title=\"45 Fremont, #4\"><img src=\"/sites/default/files/images/130601011_0bde5fc972.jpg\" float=\"left\" /></a>\r\n\r\n", slug: "did-you-know", summary: "<p>...that the DOJ approved the merger of everyone's two favorite companies in the touring business - TicketMaster and LiveNation?  They found no reason to have anti-trust concerns with a merger between a monopolistic ticket service and a monopolistic concert promoter/venue owner.  But wait!  There's more!</p>", previous_id: nil, published: true, pub_date: "2010-01-31 16:29:22"},
  {title: "goodWebsiteExample.", body: "At least <a href=\"http://widespreadpanic.com/\">these guys</a> get the clean thing.  There's a raft of interesting content up there, and all you have to do is sign up on their page to get access to it all.  \"Inbound marketing\" I believe the savvy would call it.  Applause, please..", slug: "good-website-example", summary: "At least <a href=\"http://widespreadpanic.com/\">these guys</a> get the clean thing.  There's a raft of interesting content up there, and all you have to do is sign up on their page to get access to it all.  \"Inbound marketing\" I believe the savvy would call it.  Applause, please..", previous_id: nil, published: true, pub_date: "2009-03-06 18:50:48"},
  {title: "On the road...", body: "<p>To Ruby on Rails proficiency, that is.  I mean, I just happen to be in Madison WI at the moment, getting ready to play a show at the Barrymore Theater.  I've spent the last two days holed up in a corner of the awesome <a href=\"http://www.fairtradecoffeehouse.com/\">Fair Trade Coffee House</a> on State St. drinking their awesome dark roast and getting up to speed on some things.</p>\r\n\r\n<p>After <a href=\"http://ignoredByDinosaurs.com/2009/10/chapter-6a-version-control/\">having written about version control</a> last week, I figured it might be cool for me to actually make a choice and get up to speed on one.  My only other freelance programming buddy out there uses Subversion, so of course I decided to go Git.  Git has a great  site that will store your code for you called <a href=\"https://github.com/\">GitHub</a> - they kinda go hand in hand.  It's a fun and relatively easy place to start getting familiar with the process of controlling your code.  I've been working out of a Rails book and am pushing the practice project that I'm working on up to GitHub.  The best thing about Git for me has been that it only took me about 2 days worth of hacking and poking around to get it running like it's supposed to be.  This is in stark contrast to the week or so I spent trying to get Subversion happening before basically giving up.  I understand the concepts behind Git's system of source control much better than I understand Subversion, as well.  And GitHub is a (for now) free place to upload my stuff.</p>\r\n\r\n<p>The reason this excites me so is that I've embarked on a learning project.  I briefly exposed my intentions yesterday on this blog, so if you get this via RSS, you probably already have the idea.  For those of you browsing the web version, the idea is basically a simple photo sharing site for wayward musicians.  I got the idea from a great piece of dressing room graffiti in Cleveland at the Beachland Ballroom, and the domain just happened to be available although admittedly of questionable taste.  Perfect for musicians, I think.  So I've decided to try and build this thing as a Rails project.  That should make it functional, but gritty and cheap looking, just like it should be.  Anyway.  Have fun out there...</p>\r\n", slug: "on-the-road", summary: "<p>To Ruby on Rails proficiency, that is.  I mean, I just happen to be in Madison WI at the moment, getting ready to play a show at the Barrymore Theater.  I've spent the last two days holed up in a corner of the awesome <a href=\"http://www.fairtradecoffeehouse.com/\">Fair Trade Coffee House</a> on State St. drinking their awesome dark roast and getting up to speed on some things.</p>", previous_id: nil, published: true, pub_date: "2009-10-30 00:04:36"},
  {title: "Unresponsive touch UIs", body: "If you haven&#39;t seen <a href=\"http://www.youtube.com/watch?v=N1zxDa3t0fg\">this</a> yet, it&#39;s a clip taken from yesterday&#39;s press event for the new Microsoft tablet.  Dude launches Internet Explorer to show us around the browsing experience, but the thing immediately locks up.  It&#39;s not just slow but completely frozen, and after about 20 seconds when he realizes that he&#39;s not going to be able to demo anything else he has to go swap it out for another device to get on with the presentation.  Awkward!\r\n\r\n<p>Anyway, there&#39;s so many things that we (the royal we) want to rip on here.  But I started thinking about how many times in a week I experience something similar on my iPad.  I can&#39;t remember the last time it completely froze on me, but the UI isn&#39;t as snappy as it once felt.  </p>\r\n\r\n<p>I started thinking - is it because the touch UI is supposed to be simulating doing something tactilely - actually touching an icon and moving it with your finger - that this is so annoying?  With a computer, you have this interface - the keyboard and the mouse or whatever - that still provides a mental buffer between you and the screen.  If it gets unresponsive it&#39;s definitely annoying, but not anything like tapping an icon on the screen and getting the computer equivalent of &quot;huh?  what?  me?&quot;.  </p>\r\n\r\n<p>I know we&#39;ve only started to scratch the surface <small>(pun intended)</small> of alternative ways of interacting with computing devices, but seriously - responsiveness of the UIs we already have has got to be a front burner issue.  You really want to blow me away Apple?  Make iOS 6 not turn my 3GS into an unusable brick, thereby forcing me to upgrade an otherwise perfectly good phone.</p>\r\n", slug: "unresponsive-touch-uis", summary: "    <p>If you haven&#39;t seen <a href=\"http://www.youtube.com/watch?v=N1zxDa3t0fg\">this</a> yet, it&#39;s a clip taken from yesterday&#39;s press event for the new Microsoft tablet.  Dude launches Internet Explorer to show us around the browsing experience, but the thing immediately locks up.  It&#39;s not just slow but completely frozen, and after about 20 seconds when he realizes that he&#39;s not going to be able to demo anything else he has to go swap it out for another device to get on with the presentation.  Awkward!</p>", previous_id: nil, published: true, pub_date: "2012-06-20 05:00:00"},
  {title: "Top 3 albums of the year", body: "##\\#3 Arcade Fire - The Suburbs\r\n\r\nI've never listened to these guys before.  I'd been getting my indie rock fix from Death Cab and the Decemberists for the last couple of years and had never felt the urge to get any of their previous albums, but when their [web video for \"We Used To Wait\"](http://www.thewildernessdowntown.com/ \"The Wilderness Downtown\") came out I couldn't stop watching it.  It's one of the most amazing things I've seen done with the internet so far, and the tune behind the video was really good, too.\r\n\r\nAfter a couple of weeks I bought the whole album, listened to it a few times and put it away.  It's only been over the last 6 weeks or so that I put it on repeat, and this is a fantastic record.  It's got the right mix of tunes that get you immediately and tunes that take a while to realize that you love (like every great album).  [The Month of May](http://www.youtube.com/watch?v=KNqnvaWZ-JA \"YouTube - Arcade Fire - Month Of May\") in particular is custom made for setting record times on your jog...\r\n\r\n##\\#2 Infamous Stringdusters - Things That Fly\r\n\r\nAfter I quit my last gig, I was feeling a little burned out on acoustic music.  I didn't listen to much besides hip hop and dance music for the first several months of this year, but then a strange thing started happening.  Larry Keel would end up on repeat for several listens through his whole catalog.  I started going through Tony Rice's records, Bill Monroe's records..  I was having an urge I'd never felt before - an urge to listen to and (gasp) play bluegrass.\r\n\r\nI'd gotten the Stringduster's latest record and listened to it a few times while planting the garden, but at the time it was too produced for me.  It occurs to me now that maybe they're just too good and that's what I didn't really like at the time.\r\n\r\nI've had this record on repeat for the last 4 months straight, and haven't gotten even close to burned out on it.  \r\n\r\n[It'll Be Alright](http://www.youtube.com/watch?v=eQ2bgU-X_tE \"YouTube - The Infamous Stringdusters -- It'll Be Alright\") from the Beachland Ballroom.  I love how these guys stalk the stage when somebody's soloing.  That'd be so fun, but I'll never get to do it.  sigh...\r\n\r\n##\\#1 Big Boi - Sir Lucious Left Foot: The Son of Chico Dusty\r\n\r\nGoing back and listening to some old Outkast I've think I've figured out that this is some sort of alter ego that he has in his tunes.  I never really got into Outkast except for a few tunes here and there, the big ones.  Hell, I probably only buy a hip hop record about once a year or so, so this is this year's entry.\r\n\r\nI first heard about this album on the NPR show \"Sound Opinions\".  I don't have much regard for music journalists in general (I don't mean you Tyler), but these guys have a really great show.  This record was featured on their show sometime over the summer and I liked what I heard, so I bought it.  It got it's hooks in immediately.  The first half of the album was the part that's immediately catchy on first listen, so I put it on repeat and rarely made it to the back nine.\r\n\r\nThe back half is where I spend much of my time lately.  This whole album is fantastic from front to back, maybe the best hip hop record for me since Kanye's Graduation.  The beats are awesome, the lyrics are hilarious, dirty, intelligible.  \r\n\r\n[Hustle Blood](http://www.youtube.com/watch?v=Bs9mYwK0fF0 \"YouTube - Big Boi - 09 Hustle Blood - Sir Lucious Left Foot\").  I had no idea that was Jamie Foxx on there singing the other part...", slug: "top-3-albums-year", summary: "##\\#3 Arcade Fire - The Suburbs\r\n\r\nI've never listened to these guys before.  I'd been getting my indie rock fix from Death Cab and the Decemberists for the last couple of years and had never felt the urge to get any of their previous albums, but when their [web video for \"We Used To Wait\"](http://www.thewildernessdowntown.com/ \"The Wilderness Downtown\") came out I couldn't stop watching it.  It's one of the most amazing things I've seen done with the internet so far, and the tune behind the video was really good, too.\r\n\r\nAfter a couple of weeks I bought the whole album, listened to it a few times and put it away.  It's only been over the last 6 weeks or so that I put it on repeat, and this is a fantastic record.  It's got the right mix of tunes that get you immediately and tunes that take a while to realize that you love (like every great album).  [The Month of May](http://www.youtube.com/watch?v=KNqnvaWZ-JA \"YouTube - Arcade Fire - Month Of May\") in particular is custom made for setting record times on your jog...\r\n\r\n##\\#2 Infamous Stringdusters - Things That Fly\r\n\r\nAfter I quit my last gig, I was feeling a little burned out on acoustic music.  I didn't listen to much besides hip hop and dance music for the first several months of this year, but then a strange thing started happening.  Larry Keel would end up on repeat for several listens through his whole catalog.  I started going through Tony Rice's records, Bill Monroe's records..  I was having an urge I'd never felt before - an urge to listen to and (gasp) play bluegrass.\r\n\r\nI'd gotten the Stringduster's latest record and listened to it a few times while planting the garden, but at the time it was too produced for me.  It occurs to me now that maybe they're just too good and that's what I didn't really like at the time.\r\n\r\nI've had this record on repeat for the last 4 months straight, and haven't gotten even close to burned out on it.", previous_id: nil, published: true, pub_date: "2010-12-24 05:00:00"},
  {title: "Spammers", body: "> On Tue, Sep 9, 2014, at 10:58 AM, San wrote:\r\n> \r\n> Dear business owner of Ignoredbydinosaurs.com,\r\n> \r\n> I would like to take a few minutes from your schedule and ask for your attention towards Internet marketing for Ignoredbydinosaurs.com.\r\n> \r\n> As a business Owner you might be interested to gain profit by placing your website among top in search engines. Your website needs immediate improvement for some major issues with your website.\r\n> \r\n> - Low online presence for many competitive keyword phrases\r\n> - Unorganized social media accounts\r\n> - Not compatible with all mobile devices\r\n> - Many bad back links to your website\r\n> \r\n> Looking at the above issues and other additional improvements for your website, I would request you to give us a chance to fix those issues. Our team of Search Engine and Social Media experts are here to serve you with best inputs. If you are interested in learning more about current status of your website, we would be glad to share WEBSITE AUDIT REPORT of Ignoredbydinosaurs.com for FREE.\r\n> \r\n> You will feel the difference once you get services from our company as we never let our clients expectations go down. Being at the top left of Google (#1- #3 organic positions) is the best thing you can do for your company's website traffic and online reputation. You will be happy to know that, my team is willing to guarantee you 1st page Google ranking for your targeted local keyword phrases.\r\n> \r\n> If my proposal sound's interesting for your business goal, feel free to email us, or can provide me with your phone number and the best time to call you. I am also available for an online meeting to present you this website audit report.\r\n> \r\n> Best Regards,\r\n> \r\n> Jessica\r\n> \r\n> Marketing Consultant\r\n> \r\n> PS I: I am not spamming. I have studied your website and believe I can help with your business promotion. If you still want us to not contact you, you can ignore this email or ask to remove and I will not contact again.\r\n> \r\n> PS II: I found your site using Google search and after having a look over your website I recommend you to implement future technologies such as HTML5 and Responsive Design to make your site more accessible in mobile phone, tablets, desktop etc.\r\n\r\n_Dear whatever your name is,_\r\n\r\nI promise I'm better at all aspects of what you're trying to sell me than anyone in your entire \"company\".\r\n\r\nGo fuck yourself,\r\n\r\nJohn Grubb", slug: "spammers", summary: "", previous_id: nil, published: true, pub_date: "2014-09-09 15:17:46"},
  {title: "Dear me, 5 years ago", body: "This shit is all very scary and confusing to you right now.  You're about to walk the plank into the unknown.  This will be the last \"principled\" career decision that you make up until the point that I'm writing you this, and you will learn a hell of a lot from it - about yourself, about your marriage, and about life in general.  Shit's about to get really difficult for you, in a way that you sense now, and that's why you were up unable to sleep at 3am last night.\r\n\r\nThere will be no gentle landing, and that hail mary pass that you're hoping to connect with that idea of yours isn't going to connect, at least not as neatly as you need it to.  And certainly not as quickly as you need it to.\r\n\r\nI'm writing you now to let you know that it's going to be alright.  You have this cocky hunch that the move you're making is going to be the best move you ever made, and it will be, mostly in ways that you can't really get yet.  But you're going to pay for it, too.\r\n\r\nThe investment that you're making now and over the coming years is going to come back in a big way.  Don't let knowing this make you work any less hard though - it's only under this pressure that you get where you need to go. It's only by putting more time into something that's more difficult than anything you've tried to do before that you get where you need to go.\r\n\r\nNow go.", slug: "dear-me-5-years-ago", summary: "", previous_id: nil, published: true, pub_date: "2014-12-22 16:53:38"},
  {title: "Installing Drush on Media Temple Grid Server", body: "<p><a href=\"http://drupal.org/project/drush\">Drush</a> is a tool for working on Drupal websites.  It's technically filed away on Drupal.org as a \"module\", but it's not exactly a module.  It's more like an add-on for your webserver setup, either <a href=\"http://ignoredbydinosaurs.com/2010/01/newby-web-programmer-episode-1/\">development</a> or production, that adds some really useful tools for managing your Drupal website.  For instance, those of you familiar with Wordpress might be surprised to know that Drupal has no built in facility for updating either the core Drupal code or any of the add-ons (which go by the name \"Plug-ins\" in Wordpress and \"Modules\" in Drupal).  I don't have any statistics to back this up, but I think the average Drupal site is built with many more of these open-source-and-constantly-shifting contributions than the typical Wordpress site.</p>  \r\n\r\n<p><span class=\"highlight\">What all that means is that Drupal is a pain in the ass to maintain</span>.  When one of your modules has an update, you get a message that tells you so.  These messages come all the time.  They never stop, actually.  And there's no way to make them go away except to go and download the latest version(s) and upload it/them to the server over FTP, hope nothing went wrong with the transfer, and then go and update your DB, more or less manually.  Over time, slackness can set in.</p>\r\n\r\n<p>I've been reading about it for several weeks because the most interesting thing it does (to me now) is take care of updating your stuff.  The downside for some is that it's a command line tool.  However, if you like the command line because it makes you feel like a real programmer, you're in luck!  <code>drush up</code>  updates your site, modules and all by downloading them straight from the Drupal CVS repository, and then running any DB updates for you.  \"Magic\", you might say had you been deprived of this after having tasted Wordpress' sweet waters.</p>\r\n\r\n<p>I haven't even used it yet, but I spent the last two days figuring our how to install it, and found the answer scattered over 3 or 4 different places.  Maybe I'm the only one, but I figured I'd make it a little easier for the next guy.</p>\r\n\r\n<ol>\r\n<li>Make sure you <a href=\"http://kb.mediatemple.net/questions/16/Connecting+via+SSH+to+your+(gs)+Grid-Service\">know how to use SSH</a> on your grid server account, and log in.</li>\r\n<li>You will now be at the command line.  You want to make sure you are in the home directory, so type:<br />\r\n<code>cd ~/</code></li>\r\n<li>At this point you'll create a folder for stuff that you install to live in.  Type:<br />\r\n<code>mkdir bin</code>, and then switch into that directory:<br />\r\n<code>cd bin</code></li>\r\n<li>This command fetches it from drupal.org for you:<br />\r\n<code>wget http://ftp.drupal.org/files/projects/drush-All-versions-3.0-beta1.tar.gz</code><br />\r\nin tarball form.</li>\r\n<li>Untar:<br />\r\n<code>tar xzvf drush-All-versions-3.0-beta1.tar.gz</code></li>\r\n<li>Switch into the new <code>drush</code> folder:<br />\r\n<code>cd drush</code></li>\r\n<li>Take a look at the contents of that folder by typing <code>ls</code> and make sure everything looks like this:\r\n<code>LICENSE.txt  commands  drush.api.php  drush.info  drush_logo-black.png  example.drushrc.php\r\nREADME.txt   drush     drush.bat      drush.php   example.drush.inc     includes\r\n</code></li>\r\n<li>Note the path to that folder by typing:\r\n<code>pwd</code>.  <br />\r\nYou'll get something back like: <code>/home/70298/users/.home/bin/drush</code>.<br />\r\nThe drush command is at the end of that path, and you have to let the server know that now.<br />\r\nNote that everything before <code>bin</code> can be replaced with <code>~/</code>.</li>\r\n<li>Switch back to your FTP client and root around in your server for the \"home\" folder.  It's going to be back toward the root:<br /><code>cd ~/users</code></li>\r\n<li>You may or may not see a file named <code>.bash_profile</code>.  Note that it might be hidden depending on your FTP client.  If you are sure that it's not there, create a file and give it that name.</li>\r\n<li>MT runs PHP4 on the command line by default.  You have to specifically tell it to run Drush with PHP5.  Thus, paste this into the file you just created (<code>.bash_profile</code>).<br />\r\n<code>alias drush='/usr/bin/php5 ~/bin/drush/drush.php'</code></li>\r\n<li><code>source .bash_profile</code> to reload the <code>.bash_profile</code> file.</li>\r\n<li>God willing, if you type in <code>drush</code> at this point you are going to get a long list of newly available commands.</li>\r\n\r\n</ol>\r\n\r\n<p>Note that this took me over a month of poking and prodding to get working correctly.  Specifically, in contrast to all the Drush installation tutorials I found out there, I had to specifically direct it to the <code>drush.php</code> file, rather than the generic <code>drush</code> wrapper file that the tutorials directed me to use when aliasing the Drush command.  As usually YMMV.</p>\r\n\r\n<p>Good luck!</p>\r\n\r\n<p>EDIT - September 8, 2010</p>\r\n\r\n<p>I've been having issues with updating the Drupal core with Drush.  <code>drush up</code> works just fine to update any modules, but for some reason I get an error that Drush needs PHP 5.2 when trying to update the core.  It seems to kick out of php5 when it gets to Drupal core.  I've tried running the full <code>php5 /home/70298/users/.home/bin/drush/drush.php up</code> and it still says that my cli version of PHP is too old.  Any suggestions/workarounds/fixes are most welcome.  Thanks, JG.</p>\r\n\r\n<p>EDIT - November 8, 2010</p>\r\n<p>After filing a ticket with Media Temple's Awesome Customer Support, they pointed me to a <a href=\"http://wiki.mediatemple.net/w/GS:Allow_multiple_open_basedir_directories\">knowledge base article on configuring multiple open basedir directories</a>.  I haven't had a chance to go through it yet and update the instructions above, but if and when this becomes absolutely necessary to use Drush, I certainly will.", slug: "installing-drush-media-temple-grid-server", summary: "<p><a href=\"http://drupal.org/project/drush\">Drush</a> is a tool for working on Drupal websites.  It's technically filed away on Drupal.org as a \"module\", but it's not exactly a module.  It's more like an add-on for your webserver setup, either <a href=\"http://ignoredbydinosaurs.com/2010/01/newby-web-programmer-episode-1/\">development</a> or production, that adds some really useful tools for managing your Drupal website.  For instance, those of you familiar with Wordpress might be surprised to know that Drupal has no built in facility for updating either the core Drupal code or any of the add-ons (which go by the name \"Plug-ins\" in Wordpress and \"Modules\" in Drupal).  I don't have any statistics to back this up, but I think the average Drupal site is built with many more of these open-source-and-constantly-shifting contributions than the typical Wordpress site.</p>  \r\n\r\n<p><span class=\"highlight\">What all that means is that Drupal is a pain in the ass to maintain</span>.  When one of your modules has an update, you get a message that tells you so.  These messages come all the time.  They never stop, actually.  And there's no way to make them go away except to go and download the latest version(s) and upload it/them to the server over FTP, hope nothing went wrong with the transfer, and then go and update your DB, more or less manually.  Over time, slackness can set in.</p>\r\n\r\n<p>I've been reading about it for several weeks because the most interesting thing it does (to me now) is take care of updating your stuff.  The downside for some is that it's a command line tool.  However, if you like the command line because it makes you feel like a real programmer, you're in luck!  <code>drush up</code>  updates your site, modules and all by downloading them straight from the Drupal CVS repository, and then running any DB updates for you.  \"Magic\", you might say had you been deprived of this after having tasted Wordpress' sweet waters.</p>", previous_id: nil, published: true, pub_date: "2010-07-16 15:50:50"},
  {title: "ibd Version 5.0, and top 5 bass influences.", body: "Well, here we are.  It was a tortuous migration, but IgnoredByDinosaurs (the blog) has reached version 5.  I think it's version 5, let's see there was Blogger, then WP, then Drupal, then back to WP, then back to Drupal, and now this bad boy, so I guess you would call this one 6.0.\r\n\r\nThis blog is now run by a system called [Jekyll](https://github.com/mojombo/jekyll), a \"site generator\" that's written in Ruby.  What it does is take a bunch of text posts and runs them through a couple of different templates and spits out a full site of static HTML, since that's mostly what a blog is anyway.  It's a [compiler](http://ignoredbydinosaurs.com/2009/03/chapter1b/) for your website.  No webforms, no databases, no security updates.  Just plain old HTML, like back in the good old days, but less hassle and more fun!  I would have stayed with Drupal but honestly, it was just way too slow.  This being just HMTL, without 119 database tables being joined by 200 different queries to display a blog post will be about a thousand times faster (literally).\r\n\r\nSo anyway...\r\n\r\n### Bass influences\r\n\r\nI've been reading [Kyle Hollingsworth's recent blog posts](http://kylehollingsworth.wordpress.com/2010/11/28/hoppy-holidays-countdown/) with great interest.  It's always fun to see if who you think was an influence was truly such, but nobody ever posts these kinds of lists about _themselves_.  Now that I'm on the verge of no longer being a defunct bassist, but rather a funct bassist, I thought I take a look back and see if I could boil it down to five bassists who pretty much wrote my play book.\r\n\r\nLong story short, I can't.  There's a few non-bassists who have given me more ideas than many of the bassists I've grown up with.  So here goes.\r\n\r\n### #5 Cliff Burton\r\n\r\nI know, it's pretty fashionable to say Cliff instead of Jason, especially in light of the fact that it was Jason who actually inspired me to start playing the bass in the first place.  After years and years of begging my folks to let me be Lars and buy me a drum set, and years and years of begging the band director to let me be Lars and play percussion instead of trombone, I finally gave up.  I guess I figured the bass line on \"The God That Failed\" was pretty cool too, and strangely my folks were immediately agreeable to a bass in the house.  So I sat in the basement and played along with every early 90's grunge and metal record that I had.\r\n\r\nHowever, it wasn't until a lot later that I realized the depth of the influence that I had absorbed many years before I even began playing.  \"...And Justice For All\" was the first tape I ever bought and the first CD I ever bought a few years after that.  It was literally almost all I listened to for a four year period between 5th and 8th grade.  I didn't know anything about music or it's place in my future life, but in hindsight I learned everything I ever needed to know about harmony from that record.  Most of it was written either by Cliff when he was alive or in his memory shortly after his death and his highly educated, dramatic, baroque influence is all over it.  \"To Live is To Die\", \"The Frayed Ends of Sanity\", and \"Eye of the Beholder\" are all masterpieces.  When the black album came out and there was neither a double bass drum nor a multi-movement epic to be found on it anywhere, somewhere in my 8th grade brain I was deeply let down.  It wasn't Cliff's bass style that sunk in so much as the style of composition.\r\n\r\nIt's so nice to write.  Thanks for reading.\r\n\r\n<object width=\"640\" height=\"505\"><param name=\"movie\" value=\"http://www.youtube.com/v/6O9zMnwD65Q?fs=1&amp;hl=en_US\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/6O9zMnwD65Q?fs=1&amp;hl=en_US\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"640\" height=\"505\"></embed></object>", slug: "ibd-version-50-and-top-5-bass-influences", summary: "Well, here we are.  It was a tortuous migration, but IgnoredByDinosaurs (the blog) has reached version 5.  I think it's version 5, let's see there was Blogger, then WP, then Drupal, then back to WP, then back to Drupal, and now this bad boy, so I guess you would call this one 6.0.\r\n\r\nThis blog is now run by a system called [Jekyll](https://github.com/mojombo/jekyll), a \"site generator\" that's written in Ruby.  What it does is take a bunch of text posts and runs them through a couple of different templates and spits out a full site of static HTML, since that's mostly what a blog is anyway.", previous_id: nil, published: true, pub_date: "2010-12-14 12:27:45"},
  {title: "Angular, Protractor tests, and Sauce Connect config", body: "So it took me days of trying to piece together the correct config options to make my local protractor test suite run in a bunch of different setups on Sauce Labs.\r\n\r\n~~~js\r\n// An example configuration file.\r\nexports.config = {\r\n\r\n    sauceUser: 'jgrubb',\r\n    sauceKey: 'fill-in-the-blank',\r\n    sauceSeleniumAddress: 'localhost:4445/wd/hub',\r\n\r\n    // Capabilities to be passed to the webdriver instance.\r\n    // This option is called \"capabilities\" in the protractor docs\r\n    // but whatever.  this also works.\r\n    multiCapabilities: [{\r\n        // by default, these first two browsers will come up in \r\n        // Linux if you don't specify an OS\r\n        'name': 'Chrome',\r\n        'browserName': 'chrome'\r\n    }, {\r\n        'name': 'Firefox',\r\n        'browserName': 'firefox'\r\n    }, {\r\n        'name': 'Win XP/IE8',\r\n        'os': 'Windows XP',\r\n        'browserName': 'internet explorer',\r\n        'version': '8.0'\r\n    }, {\r\n        'name': 'Win7/IE8',\r\n        'os': 'Windows 7',\r\n        'browserName': 'internet explorer',\r\n        'version': '8.0'\r\n    }, {\r\n        'name': 'Win7/IE9',\r\n        'os': 'Windows 7',\r\n        'browserName': 'internet explorer',\r\n        'version': '9.0'\r\n    }, {\r\n        'name': 'Win8/IE10',\r\n        'os': 'Windows 8',\r\n        'browserName': 'internet explorer',\r\n        'version': '10.0'\r\n    }, {\r\n        'name': 'Win8.1/IE11',\r\n        'os': 'Windows 8.1',\r\n        'browserName': 'internet explorer',\r\n        'version': '11.0'\r\n    }],\r\n\r\n    // Spec patterns are relative to the current working directly when\r\n    // protractor is called.\r\n    specs: ['e2e/**/*_spec.js'],\r\n\r\n    // Options to be passed to Jasmine-node.\r\n    jasmineNodeOpts: {\r\n        showColors: true,\r\n        defaultTimeoutInterval: 30000\r\n    },\r\n\r\n};\r\n~~~\r\n\r\nI burned tons of time just trying to figure out the correct names for the options, can't find where those are documented.  This page - [https://docs.saucelabs.com/reference/platforms-configurator/#/](https://docs.saucelabs.com/reference/platforms-configurator/#/) turned out to be hugely helpful.\r\n\r\nyou probably figured this out already, but the Sauce Connect thing is awesome, and really easy to set up - [https://docs.saucelabs.com/reference/sauce-connect/](https://docs.saucelabs.com/reference/sauce-connect/)", slug: "angular-protractor-tests-and-sauce-connect-config", summary: "", previous_id: nil, published: true, pub_date: "2015-04-14 15:30:41"},
  {title: "Real innovation in the publishing industry", body: "<p>And I'm not talking about the iPad.  The iPad is so cool I still haven't had the opportunity to play with one yet, but from a hundred miles up it's still just one of the bazillion devices that fall into the terrifically broad and jam-packed category of \"gadgets to read stuff on the internet\".  \"<a href=\"http://unsuck-it.com/consume-content/\">Consume content</a>\" is the hipster way of saying it.  It's an obviously lucrative market, which is why it gets the attention of so many innovators.  Well and good, but what about people who \"produce content\", we'll call them writers and publishers from now on...</p>\r\n\r\n<p>I finally experimented today with a service that I signed up for several months ago but never spent the 45 minutes to learn how to get it going.  It's called <a href=\"http://typekit.com/\">Typekit</a>.  The idea is <em>so</em> simple and <em>so</em> brilliant.  Allow me...</p>\r\n\r\n<code>&lt;geek content &lt;!--feel free to skip ahead--&gt; &gt;</code>\r\n\r\n<p>There's a fundamental issue when you're building a website that most people probably aren't aware of at all.  The issue is the limited number of fonts that you can reliably use to set the type on said website.  The vast majority of the world is browsing your site on a Windows computer with a standard set of fonts installed on it. Yes, fonts are installed on your computer.  It's a weird concept.  When you browse to a website, that website tells your browser what font it would prefer to have used when the browser shows you that webpage.  It's not at all uncommon for the designer to want to use a font that's not installed on that computer.  There are only about a dozen or so \"<a href=\"http://www.ampsoft.net/webdesign-l/WindowsMacFonts.html\">web-safe fonts</a>\" that you can rely on, and it gets old really fast using those same fonts over and over and over.  If the designer wants to work outside that box a little he may ask the browser to call a more exotic font, but he'll also specify what he wants used if that font doesn't exist on the user's computer.  Confused yet?  An example perhaps...</p>\r\n\r\n<p style=\"font-family:arial\">This is a sentence set in Arial.</p>\r\n<p style=\"font-family:'lucida grande'\">This is a sentence set in Lucida Grande</p>\r\n<p style=\"font-family:georgia\">This is a sentence set in Georgia</p>\r\n<p style=\"font-family:'courier new'\">This is a sentence set in Courier New</p>\r\n\r\n<p>That's all cool, but what if you want to use something more exotic to give the name of the site <a href=\"http://twitter.com/\">a bit more branded flair</a>?  Well, in the case of Twitter and most every other website on Earth that means firing up Photoshop and making it there.  You get many more fonts to choose from and you can always make your own if you want.  Photoshop then spits out your cool text as an image.  Yes, that Twitter logo is an image, not HTML text.  That means that every browser renders it just like you want it, but it also means that it's a relative pain to change and that search engines can't tell what it says unless you fill in a bunch of info about it.  HTML is preferable for anything that's meant to be read, but then you only get those dozen fonts.  Double rainbow of a bummer.</p>\r\n\r\n<p>So Typekit has a service that lets you use a whole bunch of different fonts, served up to every browser that's reasonably modern.  I won't bore you with the details (that's for another post), but it's a serious lifesaver.  I'm working on a site right now and <span style=\"font-family:'myriad pro'\">my favorite Myriad Pro</span> just ain't doin' it for the site header when it's set 3 inches tall.  For a variety of reasons I didn't want to go to Photoshop, so I dove in and tried out Typekit.  I soon came upon a cool font called Cody something or other.\r\n\r\n<p>Not exactly what the designer used, but vastly more stylish than Myriad.</p>\r\n\r\n<code>&lt;/geek content&gt;</code>\r\n\r\n<p>Now, here's why this is cool for all of us.  Services like this are actually starting to focus on the \"production\" end of the content business.  That's a very good thing for all of us.  That means that the web is finally hitting puberty as a publishing medium.  <a href=\"http://takeoutphoto.blogspot.com/2008/09/psychology-of-typeface.html\">There's a reason that there are a million different fonts in the world</a>, because an all Courier world would be very boring indeed.  It's a terrible thing that most websites only get a choice of a dozen different fonts, but it's a wonderful thing that someone is putting their head toward solving this problem for us all.  I personally think that this is a BIG market waiting to happen.  Get in now.</p>\r\n\r\n<p>Speaking of BIG markets waiting to happen, has anyone tried out <a href=\"https://www.greplin.com/\">Greplin</a> yet?</p>", slug: "real-innovation-publishing-industry", summary: "<p>And I'm not talking about the iPad.  The iPad is so cool I still haven't had the opportunity to play with one yet, but from a hundred miles up it's still just one of the bazillion devices that fall into the terrifically broad and jam-packed category of \"gadgets to read stuff on the internet\".  \"<a href=\"http://unsuck-it.com/consume-content/\">Consume content</a>\" is the hipster way of saying it.  It's an obviously lucrative market, which is why it gets the attention of so many innovators.", previous_id: nil, published: true, pub_date: "2010-09-01 13:05:16"},
  {title: "Keeping it up", body: "<p>Well, the hardest thing about blogging is not having things to say, but finding the time to write them down.  And oddly, when I do find the time to write them down, I have very little to say.  This is no exception...</p>\r\n\r\n<p>There's a blogger out there named <a href=\"http://dashes.com/anil/\">Anil Dash</a>, who I first stumbled across at the Gathering by the River over there in Yarmony Creek territory.  His bio is on the site, but he worked for Six Apart, a company that made some of the first mass-used blogging software.  Their main platform is/was called <a href=\"http://www.movabletype.com/\">Movable Type</a>.  Moveable Type powers Daring Fireball, I believe, and has mostly had it's lunch eaten by Wordpress.  Six Apart has recently been bought by some larger company, and that's not what this post is about so I'll skip the details.</p>\r\n\r\n<p>Six Apart was one of the few venture capital funded software companies to have been birthed in the wake of the Clinton era technology bubble (or the bursting of said bubble, to be more accurate).  The founding of the company is profiled in the excellent book <a href=\"http://www.foundersatwork.com/\">Founders at Work</a>, one of the few cover-to-cover-interesting business books I've ever read, and the only one on the Apress imprint.  I highly recommend it to anyone who's interested in how some of these more modern web startups got their start, as well as some interesting backstory on Apple, Adobe, and a bunch more early 80's innovators that you've probably never heard of.  There's a section on Evan Williams, one of the really smart founders of Twitter, only the profile was written about three years ago, when he was known as one of the really smart founders of Blogger.  Rather amazing.</p>\r\n\r\n<p>And cue the crying baby.</p>\r\n\r\n<p>Anyway, my point was that Anil's blog has seen a lot more interesting action lately, which is cool because he's got some really interesting takes on some of the business out there and the culture that goes with it. Enjoy.</p>\r\n\r\n<p>jg</p>", slug: "keeping-it", summary: "<p>Well, the hardest thing about blogging is not having things to say, but finding the time to write them down.  And oddly, when I do find the time to write them down, I have very little to say.  This is no exception...</p>", previous_id: nil, published: true, pub_date: "2010-09-28 14:32:59"},
  {title: "iPhone as PR tool.", body: "So, if you're in a band and you don't have a website, you're not really a band, right?  If you own a business and you don't have a website, your business doesn't really exist, right?  If you ran a festival, could you see how you could get by without having a website?\r\n\r\nThe iPhone, and the mobile platform in general, is going to be the means by which info is spread, by which content is delivered, by which people are entertained and kept in the loop.  The portable website, but better.  Can we all agree on that much?", slug: "iphone-pr-tool", summary: "So, if you're in a band and you don't have a website, you're not really a band, right?  If you own a business and you don't have a website, your business doesn't really exist, right?  If you ran a festival, could you see how you could get by without having a website?<div><br /></div><div>  The iPhone, and the mobile platform in general, is going to be the means by which info is spread, by which content is delivered, by which people are entertained and kept in the loop.  The portable website, but better.  Can we all agree on that much?</div>", previous_id: nil, published: true, pub_date: "2009-02-27 21:23:12"},
  {title: "The thing about Drupal, again", body: "<p>So here I go again.  </p>\r\n\r\n<p>I&#39;ve written at length on this blog over the years about Drupal.  It&#39;s a great tool for getting things done right now.  It&#39;s seen a huge uptake over the last couple years among government agencies and educational institutions, so being versed in Drupal development is a good career bet at the moment, meaning over the next couple years.</p>\r\n\r\n<p>In the longer term though, I see it as pretty shaky and here&#39;s why.</p>\r\n\r\n<p>Drupal&#39;s raison d&#39;etre is that non-technical users (meaning - people who aren&#39;t programmers) can build fairly complex sites without writing a lick of code.  It has seen massive growth, mainly because the fact that websites are actually computer applications with which users interact is a fact that is really just dawning on the majority of people who use the internet and/or need a website for their business.  Most people don&#39;t have CS degrees, but <em>every</em> business needs a website.  Thus, they either turn to someone who knows how to build websites, or they hook up with GoDaddy and do a one-click install of Wordpress.  </p>\r\n\r\n<p>However...</p>\r\n\r\n<p>I think the world at large is rapidly getting used to the idea of writing code, and the proportion of people out there who are at least somewhat comfortable enough with that idea to hack together their idea is growing.  And their idea might not be a good candidate for a Drupal site.  The other thing about Drupal is that whatever your idea is, you can probably get pretty close without writing code, but chances are high that it&#39;s not going to be exactly what you want without writing some code (or hiring someone to write some code).  And at that point, you either settle for something that isn&#39;t what you want or you teach yourself to write some code.  And after you get comfortable with writing code, you start to wonder why you are dealing with all of this Drupal overhead that you didn&#39;t ask for in the first place.  And some time after that you might find a language like Ruby, that makes infinite more sense to me than PHP, and looks a hell of a lot prettier to boot.  And soon after that you might find it hard to get excited about Drupal work, because overriding other people&#39;s code is way less fun than writing your own to begin with, and that&#39;s the vast majority of working with Drupal code, at least form the backend.</p>\r\n", slug: "thing-about-drupal-again", summary: "    <p>So here I go again.  </p>\r\n\r\n<p>I&#39;ve written at length on this blog over the years about Drupal.  It&#39;s a great tool for getting things done right now.  It&#39;s seen a huge uptake over the last couple years among government agencies and educational institutions, so being versed in Drupal development is a good career bet at the moment, meaning over the next couple years.</p>\r\n\r\n<p>In the longer term though, I see it as pretty shaky and here&#39;s why.</p>", previous_id: nil, published: true, pub_date: "2012-09-25 05:00:00"},
  {title: "Now what?? //part 1.", body: "<span class=\"drop_cap\">T</span>he problem I have with the world is this -> \r\n\r\n<h3>It's too friggin hard to build a good website.</h3>\r\n\r\n<p><a href=\"http://flickr.com/photos/11971338@N02/3115676722\" title=\"Imperial Austro-Hugarian Music Commando\"><img src=\"/sites/default/files/images/3115676722_4be76a01fd_m.jpg\" align=left /></a>I spent the better part of 2009 studying this problem.  I was bummed out about RRE's website and the fact that it was just a little too static, a little too disconnected from the rest of the internet.  It was a custom built solution, and God bless you Berry for that, but I didn't even know what that meant at that time.  It took me several months of poking, prodding, and pulling my hair out before I started to get the idea.</p>\r\n\r\n<h3>People have been here before.</h3>\r\n\r\n<p>There is a thing out there called a <a href=\"http://en.wikipedia.org/wiki/Content_management_system\">CMS</a>.  That stands for Content Management System, and what it does is take care of the nuts and bolts behind the scenes so that you can get on with posting cool stuff.  That's what you do after all, right?  Tour dates, news, pictures, it's all just stuff.  People have been putting up stuff since the dawn of the internet, so it's not surprising that some enterprising types have tried to simplify the process.  There's just one problem.</p>\r\n\r\n<h3>It's still too hard to build a friggin website.</h3>\r\n\r\n<p>I mean, let's be honest -> raise your hand if you know what DNS is, and why you should care.  Yeah.  Now, if you're not a musician, put your hand down.  That's what I thought.  And that's only one infinitely tiny little facet of a web site.  Good luck with the rest.  I'm a pretty driven person at this point in my life, and after banging my head on the internet wall for a year, the best I could come up with is <a href=\"http://railroadearth.com\">this</a>.  I had to learn an inordinate amount of routine, sub-geek level internet crap that has nothing to do with putting up cool stuff before I could even get started.  <em>Can't someone please just take all of this responsibility away from us musicians?</em></p>\r\n<a href=\"http://flickr.com/photos/95492938@N00/235225844\" title=\"Mike Oldfield\"><img src=\"/sites/default/files/images/235225844_cf3d908c4e_m.jpg\" align=right /></a>", slug: "now-what-part-1", summary: "<span class=\"drop_cap\">T</span>he problem I have with the world is this -> \r\n\r\n<h3>It's too friggin hard to build a good website.</h3>\r\n\r\n<p><a href=\"http://flickr.com/photos/11971338@N02/3115676722\" title=\"Imperial Austro-Hugarian Music Commando\"><img src=\"http://farm4.static.flickr.com/3237/3115676722_4be76a01fd_m.jpg\" align=left /></a>I spent the better part of 2009 studying this problem.  I was bummed out about RRE's website and the fact that it was just a little too static, a little too disconnected from the rest of the internet.", previous_id: nil, published: true, pub_date: "2009-11-18 20:36:57"},
  {title: "Programmers, please enter -->", body: "<p>I have this crazy hope inside of me that some of the IT professionals who have expressed their disdain for the field since my last post will find a way to quit their crappy jobs and go do something that they can put their hearts into.  Life is too short to be stuck.</p>\r\n<p>Thank you.</p>", slug: "programmers-please-enter", summary: "<p>I have this crazy hope inside of me that some of the IT professionals who have expressed their disdain for the field since my last post will find a way to quit their crappy jobs and go do something that they can put their hearts into.  Life is too short to be stuck.</p>\r\n<p>Thank you.</p>", previous_id: nil, published: true, pub_date: "2009-11-14 22:42:23"},
  {title: "Converting mp3s to ogg files in the background with Sidekiq and FFmpeg", body: "I have a friend for whom I'm building a site right now, and I chose Rails to do so.  I think I'll probably reach for Rails for most sites I build until I get bored of it, which isn't going to happen any time soon.  I also learned a few things about different browser's implementations of HTML5 audio, which I'll get into first.\r\n\r\nMy buddy is in a band, and so part of the functionality of the site is a photo gallery, and another part is a music player.  Whereas in the past I'd have just reached for something off the shelf like <a href=\"http://www.jplayer.org/\">jPlayer</a>, I decided to go the HTML5 route this time, as I was fairly confident that my buddy wouldn't be asking for legacy browser support.  In any event, he's not paying for legacy browser support, so I decided to teach myself a few long overdue tricks.\r\n\r\nFirst up is a bit of a primer on the HTML Audio element.  I found, as usual, Mozilla to have the most understandable and trustworthy documentation - [here](https://developer.mozilla.org/en-US/docs/HTML/Element/audio), and [here](https://developer.mozilla.org/en-US/docs/HTML/Using_HTML5_audio_and_video).  Building the player was fairly straightforward, but required a bunch of repetitive code that I'm too embarrassed to post here.  It's fairly simple to create an audio element, list out a bunch of song objects with recording attributes attached to them, set a `data-source` attribute on those songs that points to the path where your uploaded recording file lives, courtesy of the Carrierwave and jQuery FileUpload gems.  When you click on one of the songs, it kicks off the player.play() method and your song plays.\r\n\r\nThe surprise was that Firefox, in which I work every day, doesn't like mp3 files.  There's some contradictory info out there about whether or not FF does or doesn't support mp3, but my version does not, so I had to figure out how to get an ogg version of the file up there also.\r\n\r\nThe method I came up with was to install FFmpeg to do the conversion, but to place the conversion into a background Sidekiq job so it didn't hang up the browser when my buddy uploaded his song.  Sidekiq makes this so absurdly easy, and the [Railscast](http://railscasts.com/episodes/366-sidekiq) steps you right through the process.  Basically any processing that you'd want to do in the `create` or `update` action in your controller can be moved into a Sidekiq worker that's called instead of doing the processing synchronously.  Watch - \r\n\r\n~~~ruby\r\n# songs#create\r\n\r\n  def create\r\n    @song = Song.new(params[:song])\r\n    @song.title = @song.default_name unless @song.title\r\n    if @song.save\r\n      ConversionWorker.perform_async(@song.id)\r\n#logger.debug path\r\n      redirect_to music_path\r\n    end\r\n  end\r\n~~~\r\n\r\nAnd the worker --\r\n\r\n~~~ruby\r\n# app/workers/conversion_worker.rb\r\n\r\nclass ConversionWorker\r\n  include Sidekiq::Worker\r\n\r\n  def perform(song_id)\r\n    song = Song.find song_id\r\n    path = \"\#{Rails.root}/public\#{song.recording_url}\"\r\n    ogg = path.gsub(/mp3$/, \"ogg\")\r\n    yup = %x[ffmpeg -i \#{path} -acodec libvorbis \#{ogg}]\r\n  end\r\nend\r\n~~~\r\n\r\nConverting stuff with FFmpeg was really straightforward, but only in Ubuntu.  I fought with trying to get it set up with libvorbis on the Mac and eventually gave up.  `%x[]` is the easiest way I found to execute shell commands from Ruby, complete with string interpolation.  Basically this says - load that song, give me the recording_url (convenient that these Carrierwave methods are in scope), and create an ogg version.  Do that by putting it right next to the mp3 version, but with the ogg file extension.  ", slug: "converting-mp3s-ogg-files-background-sidekiq-and-ffmpeg", summary: "I have a friend for whom I'm building a site right now, and I chose Rails to do so.  I think I'll probably reach for Rails for most sites I build until I get bored of it, which isn't going to happen any time soon.  I also learned a few things about different browser's implementations of HTML5 audio, which I'll get into first.\r\n\r\nMy buddy is in a band, and so part of the functionality of the site is a photo gallery, and another part is a music player.", previous_id: nil, published: true, pub_date: "2013-04-25 18:49:11"},
  {title: "The infamous Phil gig", body: "I didn't remember mixing this but it must've been some time last year.  This was the gig that Vince Herman opened up and Phil Lesh pulled up in his Ferrari out front and helped us level the joint for the second set.  Strangely, there were no tapers present whatsoever, so no tapes showed up on the Archive.  This was, however, one of the tours that we were taping for <a href=\"http://ignoredbydinosaurs.com/sites/default/files/2005-04-16_San_Francisco_CA.zip\">Elko</a>, so we were running a 24 track rig that evening.  I remember it being a challenge to get everyone down to 24 inputs, and being really glad that we figured it out later.\r\n\r\nI remember listening to the little slice that we did put up on the Archive while I was doing this and being amazed how much reverb I put on it.  Here's a drier version of the whole show.\r\n\r\n<a href=\"http://asset.ibdweb.net/2005-04-16_San_Francisco_CA.zip\">2005-04-16_San_Francisco_CA.zip</a>\r\n", slug: "infamous-phil-gig", summary: "I didn't remember mixing this but it must've been some time last year.  This was the gig that Vince Herman opened up and Phil Lesh pulled up in his Ferrari out front and helped us level the joint for the second set.  Strangely, there were no tapers present whatsoever, so no tapes showed up on the Archive.  This was, however, one of the tours that we were taping for <a href=\"http://ignoredbydinosaurs.com/sites/default/files/2005-04-16_San_Francisco_CA.zip\">Elko</a>, so we were running a 24 track rig that evening.", previous_id: nil, published: true, pub_date: "2013-03-21 15:39:49"},
  {title: "The Twitter API is Finished. Now What?", body: "The future is here.  Check it out...\r\n\r\n<p><a href=\"http://feeds.dashes.com/~r/AnilDash/~3/GnI_l2UKFF0/the-twitter-api-is-finished.html\">The Twitter API is Finished. Now What?</a>\r\n\r\nvia <a href=\"http://dashes.com/anil/\">Anil Dash</a>", slug: "twitter-api-finished-now-what", summary: "The future is here.  Check it out...\r\n\r\n<p><a href=\"http://feeds.dashes.com/~r/AnilDash/~3/GnI_l2UKFF0/the-twitter-api-is-finished.html\">The Twitter API is Finished. Now What?</a>\r\n\r\nvia <a href=\"http://dashes.com/anil/\">Anil Dash</a>", previous_id: nil, published: true, pub_date: "2009-12-22 20:54:47"},
  {title: "Try Ruby", body: "http://tryruby.org/\r\n\r\nThe coolest and most useful programming tutorial I've seen so far.", slug: "try-ruby", summary: "http://tryruby.org/\r\n\r\nThe coolest and most useful programming tutorial I've seen so far.", previous_id: nil, published: true, pub_date: "2009-12-23 20:54:27"},
  {title: "honestly.", body: "I'm kind of ready to get this over with.", slug: "honestly", summary: "I'm kind of ready to get this over with.", previous_id: nil, published: true, pub_date: "2009-12-28 20:54:24"},
  {title: "On airport security.", body: "<blockquote>\"A systemic failure has occurred, and I consider that totally unacceptable,\" an angry and unusually blunt Obama told reporters near his vacation retreat in Hawaii.</blockquote>\r\n<a href=\"http://www.latimes.com/news/nation-and-world/la-na-terror-obama30-2009dec30,0,887782,full.story\">via LA Times</a>\r\n\r\nA few points =>\r\n\r\nI haven't noticed any change in any security whatsoever in any of the 3 airports in which I've been in the last three days.  I am not, nor has anyone that I've talked to been concerned with getting killed by a terrorist.  The perp in the case was \"subdued by passengers and crew\" on the plane.  \r\n\r\nFlying is miserable.  It has been for years by now.  The entire process from finding a ride to the airport to getting picked up and certainly everything in between seems as if scientifically designed to exert as much stress on as large a segment of the population as possible.  Atlanta's airport sees almost <em><a href=\"http://en.wikipedia.org/wiki/Hartsfield–Jackson_Atlanta_International_Airport\">a million flights</em> a year</a>.  Belligerence is high.\r\n\r\nThe \"threat level\" was already at orange, and probably has been for several months.  It was not raised after the attempted attack.  This got me to thinking.\r\n\r\nHas the Bush/Cheney threat level mechanism actually desensitized us to the possibility of a terrorist threat so thoroughly by this point that even when there is an attack nobody really cares?  And if the ultimate goal of the terrorist is to make us afraid, and we're not really that afraid, have we now won the war on terror?  None of the security measures in place stopped this asshole, a fellow passenger did.  I'm surprised they didn't beat him to a pulp, for if someone were attempting to blow me up on a plane on Christmas day, that's quite likely what I'd be inclined to do.  And how much further past the point of diminishing returns are we going to push this quest for airline security?  Wouldn't we be safer giving all passengers a set of brass knuckles before they board the plane?\r\n\r\n", slug: "airport-security", summary: "<blockquote>\"A systemic failure has occurred, and I consider that totally unacceptable,\" an angry and unusually blunt Obama told reporters near his vacation retreat in Hawaii.</blockquote>\r\n<a href=\"http://www.latimes.com/news/nation-and-world/la-na-terror-obama30-2009dec30,0,887782,full.story\">via LA Times</a>\r\n\r\nA few points =>\r\n\r", previous_id: nil, published: true, pub_date: "2009-12-30 20:54:02"},
  {title: "Well that was fun.", body: "Out with the old, in with the newer.  Yes, I just spent the last 3 hours writing SQL queries, mostly by hand in order to move this blog back from Drupal to Wordpress where it belongs.  Some of the effects are still evident, such as the weird catagories.  Luckily I find this kind of shit fun now, so I'll fix it tomorrow.  Thanks for stopping by.", slug: "well-that-was-fun", summary: "Out with the old, in with the newer.  Yes, I just spent the last 3 hours writing SQL queries, mostly by hand in order to move this blog back from Drupal to Wordpress where it belongs.  Some of the effects are still evident, such as the weird catagories.  Luckily I find this kind of shit fun now, so I'll fix it tomorrow.  Thanks for stopping by.", previous_id: nil, published: true, pub_date: "2010-01-28 06:01:28"},
  {title: "I had this idea for a band...", body: "<p>So, the software model of yore is just that.  The one where you go to the mall and buy a box with a disk inside of it.  Do you remember doing that?  I do.  I actually remember it more clearly than going to the music store, but that's probably a figment of where I'm at right now in terms of my interests.  I digress, within five sentences...</p>\n\n<p>Where was I?  Oh yeah, so the music business of yore is just that.  Remember the one where you went to the store and bought a box with a disk in it?  That model isn't working out so well these days.  The problem is that it worked out SO well for SO long that the whole industry has taken an extraordinarily long time to figure out how to save their phony-baloney jobs.  I know - news flash, right?</p>\n\n<p>Anyway, back to the software business, which is a lot younger as an industry and which has a pretty solid record of evolving past whatever Goliath emerges in whatever epoch/industry model is/was dominant.  Did that make sense?  What I meant was that the entire history of software is built by heretics who see the opportunity in moving the ball.</p>\n\n<p>The music business, on the other hand, is historically run a little more like the country club.  It's mostly the same players that have been there, except for the few that have finally died and opened up a seat.  Even today.  You'd think that there'd be plenty of room for new upstarts with fresh ideas to come in and revolutionize an industry and an art form that is so clearly demanding just that.  Where's the evidence that that's the case?  I've got a funny story about the introduction of CD techology at an AES conference, but that's another post.</p>\n\n<p>Pardon the long winded exposition.  I haven't been writing lately and it feels really good to have time.  I was on rt. 80 the other day and I had a flash.  What if you started a band and ran it like a software company?  Instead of \"album cycles\" you'd have \"rapid development\".  The product wouldn't just be music and the usual merch, but would really take advantage of technology to give the fan something more to interact with.  You'd have a rocking website of course, which would be the main avenue through which new creative product would be distributed.  You'd have a mobile app to give your fans commuting into NYC on the train something to play with/listen to on the way in.  The press would be so enamored with your savvy that you'd barely even need a publicist.</p>\n\n<p>I think ideally you'd have a couple of developers who play in the band, a really strong songwriter, and a producer type.  Everyone gets to concentrate on their creative thing and everyone is fairly equal.  How fun would that be?</p>", slug: "i-had-this-idea-for-a-band", summary: "<p>So, the software model of yore is just that.  The one where you go to the mall and buy a box with a disk inside of it.  Do you remember doing that?  I do.  I actually remember it more clearly than going to the music store, but that's probably a figment of where I'm at right now in terms of my interests.  I digress, within five sentences...</p>", previous_id: nil, published: true, pub_date: "2010-05-29 02:01:55"},
  {title: "Speechless.", body: "I appreciate that you've stopped by.  I unfortunately have nothing to say about anything.  I feel like I should be giving some sort of summation on the last 7 years in a band, but I don't have anywhere near the perspective to do so yet.  I also don't feel like just blathering about technology (again) yet, as I don't feel like I have the guns to be espousing my viewpoints on that either.\r\n\r\nThis blog might be a little static for a little while.  \r\n\r\nWhat I'm doing in the meantime is rewriting JohnnyGrubb.com as a Rails app.  This will be my first Rails app from scratch.  The Posts model (system) is pretty much done, and I, and only I, can blog away all I want.  The trick is the comments model.  I've got a commenting system in place, but what it needs is the simple little email verification and website linking tricks that all blogs have.  I've got the database set up to receive the info, and display the info, but verifying that email addresses are in the correct format and setting the commenter's name to link to their website, if they put that in, is a bit more of a trick.  when I get it figured out, you'll know.\r\n<!--break-->\r\n", slug: "speechless", summary: "I appreciate that you've stopped by.  I unfortunately have nothing to say about anything.  I feel like I should be giving some sort of summation on the last 7 years in a band, but I don't have anywhere near the perspective to do so yet.  I also don't feel like just blathering about technology (again) yet, as I don't feel like I have the guns to be espousing my viewpoints on that either.\r\n\r\nThis blog might be a little static for a little while.  \r\n\r\nWhat I'm doing in the meantime is rewriting JohnnyGrubb.com as a Rails app.  This will be my first Rails app from scratch.  The Posts model (system) is pretty much done, and I, and only I, can blog away all I want.  The trick is the comments model.  I've got a commenting system in place, but what it needs is the simple little email verification and website linking tricks that all blogs have.  I've got the database set up to receive the info, and display the info, but verifying that email addresses are in the correct format and setting the commenter's name to link to their website, if they put that in, is a bit more of a trick.  when I get it figured out, you'll know.\r\n", previous_id: nil, published: true, pub_date: "2010-01-07 20:53:43"},
  {title: "Welcome to the new site!", body: "After several months of sifting and searching, I think I've finally honed in on the framework around which I'll be helping anyone and everyone who needs help with their web presence.  As my CSS and PHP skillz improve so will this site.  This is how it looks now, so take a picture.\r\n\r\nAnd thanks for the encouragement.", slug: "welcome-new-site", summary: "After several months of sifting and searching, I think I've finally honed in on the framework around which I'll be helping anyone and everyone who needs help with their web presence.  As my CSS and PHP skillz improve so will this site.  This is how it looks now, so take a picture.\r\n\r\nAnd thanks for the encouragement.", previous_id: nil, published: true, pub_date: "2009-05-22 16:47:03"},
  {title: "I have only one regret...", body: "<p>And that's that I didn't start programming when it first occurred to me that I should.  I'd be at least four years further along.  Sigh...</p>\n\n<p>A brief list of the things I've been working on.</p>\n\n<p>The front burner:</p>\n<ol>\n\t<li><a href=\"http://codex.wordpress.org/Developer_Documentation\">Wordpress customization</a></li>\n\t<li>CSS</li>\n\t<li>Photoshop</li>\n\t<li><a href=\"http://jquery.com/\">jQuery</a></li>\n\t<li><a href=\"http://github.com/JGrubb\">GitHub</a></li>\n</ol>\n<p>The back burner:</p>\n<ol>\n\t<li><a href=\"http://rubyonrails.org/\">Rails</a></li>\n\t<li><a href=\"http://www.sinatrarb.com/\">Sinatra</a></li>\n\t<li><a href=\"http://haml-lang.com/\">HAML</a></li>\n\t<li><a href=\"http://sass-lang.com/\">SASS</a></li>\n\t<li><a href=\"http://webby.rubyforge.org/\">Webby</a></li>\n\t<li><a href=\"http://github.com/mmangino/facebooker\">Facebook APIs</a></li>\n</ol>\n\n<p>A whole lot of PHP, CSS, JS, and when I have time, Ruby.</p>\n\t\n\t", slug: "i-have-only-one-regret", summary: "<p>And that's that I didn't start programming when it first occurred to me that I should.  I'd be at least four years further along.  Sigh...</p>\n\n<p>A brief list of the things I've been working on.</p>\n\n<p>The front burner:</p>", previous_id: nil, published: true, pub_date: "2010-02-23 15:34:43"},
  {title: "Let's try something.", body: "<p>Does anybody here want to build something?  My buddy Jimmy of This Blog fame laid an idea on me the other night.  He's a teacher, and a fairly progressive, observant one at that.  I believe him when he says that there's nothing out there like this kinda simple, cool idea that he had.  I think it must exist somewhere but it's not being properly promoted if it does.  So, I thought maybe it'd be a cool idea to try and teach him a little something about web development, and teach myself a lot in the process.  There's no way that this idea of his is currently within my grasp since a big part of the concept is an iOS app, but I don't think the overall idea is really that far outside the realm of possibility.  It's going to need a web backend to it, anyway.  So let's see.  Where to start?</p>\r\n\r\n<p>I think we'll build it in Rails since I've learned enough about programming to know that I prefer Ruby as a language to PHP.  I think this idea could easily be done in Drupal (a large, flexible content management system that's built in PHP) as well, but for some reason the aesthetic of building the solution you need and no more is really appealing to me.  Drupal takes care of a LOT of the stuff that we're going to need to do upfront, things like user authentication (accounts) and interacting with a variety of different protocols - essential if the app phase is ever going to work.  Drupal and Rails are both just pieces of software that run databases for you, but the difference is sorta like the difference between buying a really good loaf of bread and baking a really good loaf of bread.  It doesn't make you any less of a chef to serve the store bought loaf to your guests, but if you have the time and you know how to bake a good loaf (or if it's just something you want to get good at), you're going to prefer that route.</p>\r\n\r\n<p>Step one is getting Rails installed on your computer which, if you bought a Mac is made significantly easier.  We'll do that next.</p>", slug: "lets-try-something", summary: "<p>Does anybody here want to build something?  My buddy Jimmy of This Blog fame laid an idea on me the other night.  He's a teacher, and a fairly progressive, observant one at that.  I believe him when he says that there's nothing out there like this kinda simple, cool idea that he had.  I think it must exist somewhere but it's not being properly promoted if it does.  So, I thought maybe it'd be a cool idea to try and teach him a little something about web development, and teach myself a lot in the process.", previous_id: nil, published: true, pub_date: "2010-11-16 20:35:18"},
  {title: "Bluegrass fans", body: "Regarding <a href=\"http://chrispandolfi.com/?p=567\">Pandolfi's recent pot stirrer</a>:\r\n\r\nIt's pretty much all been said out there, but I'll tell you what gets me going to the point that I have to write about it.  It's when I read comments like this one -\r\n\r\n>Bands like Railroad Earth, Green Sky, Yonder Mountain, Infamous Stringdusters, etc. are going to be labeled bluegrass and I think that's fine....as long as they understand where the roots of the music came from and they have an understanding and respect for that.\r\n\r\nGet stuffed.  We're all out here working as hard as we can to live doing what we love.  You are the armchair quarterbacking internet dweller.  For us to care about whether or not you approve of our reverence for tradition or the lack thereof would render us unable to do our jobs.  \r\n\r\nSame dude, same comment - \r\n\r\n>The only thing I wish is that these newer grassy bands stop all playing solely through pickups and get some high quality mics, like the Punch Brothers or the Jaybirds. I went to a Yonder Mountain show 2 weeks ago and I cringed every time I heard Jeff Austin solo with his pickup-burdened Nugget. He might of well had a Michael Kelly or something as it would have sounded the same. Sorry if that's harsh...just not a big fan of his style or sound, I guess. \r\n\r\nWe've already established our freedom to an opinion, but had you ever done any touring you'd probably have realized the technical and acoustical limitations of playing with live microphones on loud stages.  They don't make the sound better.  Period.  Ever.  I've never heard of the Jaybirds, but I'm guessing the crowd that the Punch Brothers primarily plays to is a very quiet crowd.  Good for them.  Obviously some of us prefer a different setting.\r\n\r\n<iframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/fCV8qHmkEHk\" frameborder=\"0\" allowfullscreen></iframe>\r\n\r\nBy the way, Andy Hall came to the Nashville show last night and helped us destroy the place.", slug: "bluegrass-fans", summary: "Regarding <a href=\"http://chrispandolfi.com/?p=567\">Pandolfi's recent pot stirrer</a>:\r\n\r\nIt's pretty much all been said out there, but I'll tell you what gets me going to the point that I have to write about it.  It's when I read comments like this one -\r\n\r\n>Bands like Railroad Earth, Green Sky, Yonder Mountain, Infamous Stringdusters, etc. are going to be labeled bluegrass and I think that's fine....as long as they understand where the roots of the music came from and they have an understanding and respect for that.\r\n\r\nGet stuffed.", previous_id: nil, published: true, pub_date: "2011-04-27 05:00:00"},
  {title: "The music / business idea I haven't seen tried yet", body: "### Prologue\r\n\r\nI have a lot of friends in successful working bands that all have one thing in common - a fairly useless website.  Pretty much every band I know, with a very few exceptions, treats their website as a tour poster.  Most of them have some kind of \"store\", but frequently they're stocked with leftovers from last year's road merch.  You often have to go through PayPal to checkout.  I don't know of anyone short of Radiohead that actually lets you download digital goods directly from them.  \r\n\r\nRailscasts, Peepcode, Lullabot, and every other player in the digital goods space that caters to developers have had their act together on this for years now, but for some reason the real promise of the internet age hasn't paid a visit to the music business yet.\r\n\r\n### The promise\r\n\r\nPerhaps I misunderstood, but the real promise of the internet age as it pertains to musicians was that the old, centralized means of distributing your music were going to be torn down and in it's place would be a democratic, no-barriers system for getting your music out instantly to the whole world.  Services that have sprung up in the last 10 years - iTunes, Spotify, Soundcloud, and the like - have almost universally propped up this old, centralized system.  Services like [Distrokid](http://distrokid.com/) are well intentioned and barking toward the right tree, but still miss the point.\r\n\r\n### The problem\r\n\r\nThe problem is that the music business was so profitable for so many decades, so many people got rich off the old label system that the world in general is clearly having a hard time letting go.  Every single service that I've mentioned so far has some sort of \"gatekeeper\" mechanism in place, be it label affiliation or whatever, and profit motive for the business owners as a central tenet.\r\n\r\n_\"How can I (or my investors) make money off the music business?\"_\r\n\r\n### What I haven't seen done\r\n\r\nWhat I haven't seen done yet is for someone to come along and offer a service that has altruism toward the musicians that this whole business revolves around in the first place as a fundamental principle (distrokid partially excepted).\r\n\r\n### The solution\r\n\r\nHow about someone build an open source CMS for bands and musicians, ala Wordpress since every band I know is already on that and comfy with it, but built with commerce as the fundamental purpose of the site?  Plug in a [Stripe](https://stripe.com/) API key for credit card processing, an [S3](https://aws.amazon.com/s3/) key for storing their digital goods, and _tada!_ - you can sell your _own_ music through your _own_ website and keep 100% of the net for yourself.  \r\n\r\nObviously the simple features that every band wants - tour dates, photos, bios, etc - would be there, but instead of having the store be a page on the site, have the tour dates be a page in the store.  I know they must be out there, but I literally don't know of a single band that approaches their online presence this way.  \r\n\r\n### But, but, how do I make money off this?\r\n\r\nI dunno.  How about a hosted service, ala Wordpress.com for bands that don't want to deal with setting it up themselves?  How about taking a percentage of fees for ticket sales if they want to activate that module?  How about consulting fees for custom implementations?  I think there are actually plenty of ways, but only if you start with the libre, open version at the core.\r\n\r\n### Postscript\r\n\r\nThere must be someone out there working on this idea - I had it years ago and it just seems too obvious at this point.  [I've been working on it off and on](https://github.com/JGrubb/gsbg) for most of this year.  I've even got a guinea pig client lined up, but I'm that stereotypical musician that has kids, gets off the road, and is now so busy with my 9-5 and my 3 kids and trying to find contract work to fill in the financial gaps that I can't keep the momentum going to get it finished and launched.  So...\r\n\r\nIf this idea is interesting to you and you feel like building it, call me.  If you're already building it and want someone to help sell it, call me.  [The band I quit](http://www.railroadearth.com/splash/) 4 years ago sold 9000 tickets at Red Rocks this summer.  [I'm now in a band](http://www.emmittnershiband.com/) with two guys from Leftover Salmon and a guy from String Cheese Incident.  If you've never heard of these bands then you're not a hippy, but trust me - there is serious money to be made in this grassroots, live-music, no-label-affiliation sector of the music business if for no other reason than _nobody is looking at this market at all_, and the customer base in this market is extremely loyal.  And I've got an iPhone stuffed full of potential clients.\r\n\r\nAll this product would have to do is show some real revenue increases for a couple of bands.  Once that happens, the real promise of the internet as it pertains to the music business can start to be realized.\r\n\r\n### Postpostscript\r\n\r\nI'm a developer now.  I'm handy enough with the backend, and what I consider pretty good with the front end of things, especially as far as the technical needs of this project are concerned.  Point is, I can contribute a lot - business, development, a laundry list of clients, implementation details (if you want em) - I just can't do it all myself.  I've been holding on to this idea for so long, trying to build up the dev chops to execute that it's starting to eat me, especially since I now have the dev chops and no time.  \r\n\r\nSo if you're reading this and it strokes a chord, drop me a line - therealjohnnygrubb@gmail.com", slug: "music-business-idea-i-havent-seen-tried-yet", summary: "I have a lot of friends in successful working bands that all have one thing in common - a fairly useless website.  Pretty much every band I know, with a very few exceptions, treats their website as a tour poster.  Most of them have some kind of \"store\", but frequently they're stocked with leftovers from last year's road merch.  You often have to go through PayPal to checkout.  I don't know of anyone short of Radiohead that actually lets you download digital goods directly from them.", previous_id: nil, published: true, pub_date: "2013-10-30 15:26:50"},
  {title: "Step 1 - text editor", body: "<p>May I suggest you download this book -- <a href=\"http://learnpythonthehardway.com/index\">Learn Python the Hard Way</a>?  It's got instructions in the very first bit about getting a decent, free text editor installed.  TextEdit that comes with the Mac leaves quite a bit to be desired, and though I haven't personally checked out <a href=\"http://projects.gnome.org/gedit/\">GEdit</a>, I'm sure it's a step up.  Of course if you think you might want to get serious about this, or if you get serious about this down the line, may I suggest dropping $60 on <a href=\"http://macromates.com/\">TextMate</a>?  I know it's kind of a lot of money, but if you get into this stuff, it's worth it.</p>\r\n\r\n<p>May I also suggest that you go through the first few exercises?  It's fun to make your computer do things, however rudimentary, and doing them in the babystep fashion that this has you do eases you into programming geekery like the command line.  It trains your fingers, it trains your eyes.  It's like that part in Rocky 4 where he goes to Siberia to toughen up against Drago.</p>\r\n\r\n<p>Back soon.  Cheers.</p>\r\n<!--break-->\r\n", slug: "step-1-text-editor", summary: "<p>May I suggest you download this book -- <a href=\"http://learnpythonthehardway.com/index\">Learn Python the Hard Way</a>?  It's got instructions in the very first bit about getting a decent, free text editor installed.  TextEdit that comes with the Mac leaves quite a bit to be desired, and though I haven't personally checked out <a href=\"http://projects.gnome.org/gedit/\">GEdit</a>, I'm sure it's a step up.  Of course if you think you might want to get serious about this, or if you get serious about this down the line, may I suggest dropping $60 on <a href=\"http://macromates.com/\">TextMate</a>?  I know it's kind of a lot of money, but if you get into this stuff, it's worth it.</p>\r\n\r\n<p>May I also suggest that you go through the first few exercises?  It's fun to make your computer do things, however rudimentary, and doing them in the babystep fashion that this has you do eases you into programming geekery like the command line.  It trains your fingers, it trains your eyes.  It's like that part in Rocky 4 where he goes to Siberia to toughen up against Drago.</p>\r\n\r\n<p>Back soon.  Cheers.</p>\r\n", previous_id: nil, published: true, pub_date: "2010-11-18 15:00:16"},
  {title: "Databases cont. - the rookie web developer series", body: "<em>This is part of an IRC transcript between a buddy and I, wherein I try to explain a little bit about how the internet works and why knowing at least a little bit of database theory will go a long way in demystifying learning how to build stuff.  (It's a technical term.)  He's trying to learn a bit about Drupal and about how you build sites with it, so I'm going to tag him in on a project for a friend of mine who runs a yoga studio.  Hers was <a href=\"http://breathingroomcenter.com/\">the first site I ever built</a>, in Wordpress.  I've been thinking about porting it to Drupal and having some more fun with it, as she'd kinda like a database of her registered students among a few other niceties that would be fairly easy to pull off in Drupal.</em>\r\n\r\n<hr />\r\n\r\ngrubb: And it basically works fine, but I wanted to have a bit more fun with it and integrate the calendar into the site<br />\r\n[4:21pm] grubb: but it's pretty much a prefect easy Drupal site.<br />\r\n[4:21pm] grubb: When I say \"there'd be a couple of different content types<br />\r\n[4:21pm] grubb: \"<br />\r\n[4:21pm] Keith__: ok<br />\r\n[4:21pm] grubb: does that mean anything to you?<br />\r\n[4:24pm] grubb: So I'll just go ahead and explain it<br />\r\n[4:24pm] Keith__: ok, sorry multitasking<br />\r\n[4:24pm] grubb: Pretty much everything you interact with on the internet is an interface to a database somewhere.<br />\r\n[4:25pm] grubb: no sweat.<br />\r\n[4:25pm] grubb: I assume you're familiar with super-basic database theory<br />\r\n[4:26pm] grubb: basically a database is a bunch of data, and that data is ordered in a very structured way so that it's easy to tell a computer how to go get the specific data you're looking for<br />\r\n[4:26pm] grubb: Example -  http://ignoredbydinosaurs.com/<br />\r\n[4:27pm] grubb: if you scroll to the bottom, the blog - that's one content type on my site, which means more or less that each one of those posts is located in one row of the \"blog\" table in the database.<br />\r\n[4:27pm] grubb: I'm the only user on that site, but if there were more we'd each occupy one row in the \"user\" table in the database.<br />\r\n[4:28pm] grubb: My portfolio is another content type - each portfolio entry is one row in the \"portfolio\" table in the database.<br />\r\n[4:28pm] grubb: (This is a simplified explanation, but basically accurate)<br />\r\n[4:28pm] grubb: If you go to Facebook, each user is a row in the \"user\" table in the FB database.<br />\r\n[4:29pm] grubb: Each post on everybody's wall is a row in the \"wall_posts\" table in their database.<br />\r\n[4:29pm] grubb: The \"wall_posts\" table in the database would have a column for the \"post\" and for the \"user\" who posted it.<br />\r\n[4:30pm] Keith__: ok<br />\r\n[4:30pm] grubb: So if I post something on my Facebook wall, that particular row would have \"blah, blah blah\" (whatever the post is) and my user_id<br />\r\n[4:31pm] grubb: So by linking that table with the post on it with the table that contains my profile info (including my user_id), you can put all of that info onto my post on someone else's wall.<br />\r\n[4:31pm] Keith__: ok<br />\r\n[4:31pm] Keith__: based on user id<br />\r\n[4:31pm] grubb: and that post would have all the meaningful shit that you want to see on FB<br />\r\n[4:31pm] grubb: right<br />\r\n[4:31pm] Keith__: ok<br />\r\n[4:31pm] grubb: so the user_id is important<br />\r\n[4:32pm] Keith__: what browser do you work in?<br />\r\n[4:32pm] grubb: it appears not just in the user table, but also in the posts table so you can link the two together<br />\r\n[4:32pm] grubb: I use Chrome<br />\r\n[4:32pm] grubb: is this making sense?<br />\r\n[4:32pm] Keith__: somewhat<br />\r\n[4:32pm] grubb: the point is obviously that whenever you go to a web page, you're looking at HTML<br />\r\n[4:32pm] grubb: (scuse me, it's not that obvious)<br />\r\n[4:33pm] Keith__: ok<br />\r\n[4:33pm] grubb: But there's not a mountain of programmers writing each page of HTML that anyone could possibly look at<br />\r\n[4:33pm] grubb: on the entire internet<br />\r\n[4:33pm] Keith__: right<br />\r\n[4:34pm] grubb: When you go to your Facebook homepage, a computer on the other end of that is putting that particular page of HTML together \"dynamically\"<br />\r\n[4:34pm] grubb: it says \"okay, database, give me the 50 most recent posts from all of Keith Hick's friends.  put the most recent one at the top\"<br />\r\n[4:35pm] grubb: and that is fundamentally what a database does<br />\r\n[4:35pm] Keith__: ok<br />\r\n[4:35pm] grubb: and so it hands that information back to the computer which then puts that specific page together for you<br />\r\n[4:35pm] Keith__: right<br />\r\n[4:35pm] grubb: If you go to the front page of my website it does the same thing<br />\r\n[4:36pm] Keith__: complex filing system deciphered?<br />\r\n[4:36pm] grubb: you mean this/path/or/wahtever?<br />\r\n[4:36pm] grubb: to get that particular page?<br />\r\n[4:36pm] Keith__: huh<br />\r\n[4:36pm] Keith__: yeah<br />\r\n[4:36pm] grubb: what do you mean?<br />\r\n[4:36pm] Keith__: never mind<br />\r\n[4:37pm] grubb: OK<br />\r\n[4:37pm] Keith__: let's plan on rebuilding this site<br />\r\n[4:37pm] grubb: OK<br />\r\ngrubb: so basically, start looking at most webpages as a thing that has been lovingly crafted for you by a computer at that specific point in time, because that's what a lot of them are<br />", slug: "databases-cont-rookie-web-developer-series", summary: "<em>This is part of an IRC transcript between a buddy and I, wherein I try to explain a little bit about how the internet works and why knowing at least a little bit of database theory will go a long way in demystifying learning how to build stuff.  (It's a technical term.)  He's trying to learn a bit about Drupal and about how you build sites with it, so I'm going to tag him in on a project for a friend of mine who runs a yoga studio.  Hers was <a href=\"http://breathingroomcenter.com/\">the first site I ever built</a>, in Wordpress.", previous_id: nil, published: true, pub_date: "2012-04-18 15:59:16"},
  {title: "An overly long analogy about the IBMA", body: "<em>I'm just going to attach this note to a rock and toss it over the wall here.  Maybe someone will notice it.  Maybe it will even be read.</em>\r\n\r\n<hr />\r\n\r\nHi.  I'm one of the barbarian bluegrass players on the other side of the wall.  I've been looking at your gated neighborhood my entire professional life, and it looks very nice from the outside.  \r\n\r\nA guy that I respect a lot also happens to be a member of your community.  He and his band come outside the gates all the time to play for the masses out here, and we love them.  I'm actually in another band that plays the same circuit out here in the world, and we have a great time.  I've never really worried about whether or not I would be able to afford a house in your neighborhood because as far as I'm concerned, we've got it all out here.  I just assumed that you guys would rather not mix with the riff raff (I say that with fondness) and that's fine.  You're welcome to, but you shouldn't have to.  \r\n\r\nPlease forgive me if I've got some of the facts wrong here, I've never actually been inside your neighborhood.  But some things I've heard lately have surprised me.  There are apparently some empty houses in there, and the number of houses that are being filled with new residents is not keeping pace with the number of houses that are coming up on the market.  Some of those houses have been vacant for a while now?  The tax base is dwindling, lawns aren't being kept and the neighborhood committee is starting to worry that this decline is accelerating.  The idea of opening the gates has been proposed.  To make the community inclusive rather than exclusive.  To relax some of the requirements for membership.  This guy I'm talking about is one of the most articulate proponents of <a href=\"http://chrispandolfi.com/?p=969\">this idea</a>.\r\n\r\nHe has rightly figured that we make a lot more hay out here than you guys are able to in there.  It's just supply and demand - there's more of both out here.  The tax base you need to keep the neighborhood thriving is right outside the gate.\r\n\r\n<hr />\r\n\r\nYou all are more than welcome out here.  That's the entire point of out here.  We take everybody.  There's plenty of land and having it worked rather than lay fallow only makes it that much more more fertile for the rest of us, which leads to more fans enjoying the fruits of bluegrass, which brings more young bands into the fold.  A virtuous cycle.\r\n\r\nI'm just not so sure about us coming in there.\r\n\r\nI have 2 young kids and they're loud and a lot of times their toys get left in the yard, and admittedly it doesn't look that great but we live on some land where you can't really see the house from the road.  Sometimes the grass gets a little shaggy.  I still have part of a tree down from that hurricane, but I'll get to it.\r\n\r\nIf I move in there, then either I'm going to have to hire someone to keep my grass in line with the neighborhood covenant or I'm going to get dirty looks from my neighbors.  Now, I refuse to pay someone else to mow my lawn, and you most certainly shouldn't have to be aggravated every time you look outside your window.  Part of the reason you live in that neighborhood is because everyone there keeps their grass a certain way, and I can appreciate that as much as you can.  \r\n\r\nIf the new committee does away with that covenant then it might make it easier for me to be who I am, but what about all the people that have lived in that neighborhood for a long time because they like it the way it is?  \r\n\r\nWhere are they going to be able to go?", slug: "overly-long-analogy-about-ibma", summary: "<em>I'm just going to attach this note to a rock and toss it over the wall here.  Maybe someone will notice it.  Maybe it will even be read.</em>\r\n\r\n<hr />\r\n\r\nHi.  I'm one of the barbarian bluegrass players on the other side of the wall.  I've been looking at your gated neighborhood my entire professional life, and it looks very nice from the outside.", previous_id: 196, published: true, pub_date: "2011-10-04 13:58:14"},
  {title: "theBandWebsiteThingCont'd.", body: "<a href=\"http://phish.com/\">Here's</a> a band with the resources to do something cooler than they are.  Is it just me or is this front page totally overstuffed with info, rendering it almost impossible to glean the useful bits at a glance?  Are the links at the top of the page really 2003 looking?  Are there an obscene amount of links on the right border that take forever to load?\r\n\r\nOr is it just me?\r\n\r\nEdit: I count 16 banners of equal size and flashiness (90% of which point to the same merchandise page) on the right margin and 30 or so news items.  I'm all about having interesting content on the front page, but this looks like our shoe closet.  And we don't wear most of the shoes that we own....\r\n\r\nAnother edit: I wrote this post the week before the Hampton victory frothing ceremony.  They've obviously had a recent injection of motivation capital and have <a href=\"http://phish.com/\">gotten their web game back together a bit</a>.", slug: "the-band-website-thing-contd", summary: "<a href=\"http://phish.com/\">Here's</a> a band with the resources to do something cooler than they are.  Is it just me or is this front page totally overstuffed with info, rendering it almost impossible to glean the useful bits at a glance?  Are the links at the top of the page really 2003 looking?  Are there an obscene amount of links on the right border that take forever to load?<div><br /></div><div>  Or is it just me?</div><div>", previous_id: nil, published: true, pub_date: "2009-03-06 18:42:03"},
  {title: "What really killed the music industry...", body: "Well unsurprisingly, even after several _minutes_ of Google searching I'm unable to dig into the real article on this one, only countless verbatim reposts on countless web-scraping sites.\r\n\r\nAnyway, [here's an example](http://www.torontosun.com/entertainment/music/2011/03/15/17616986-wenn-story.html \"Steve Jobs killed music: Bon Jovi - Music - Entertainment - Toronto Sun\").  I don't hate on Jon Bon Jovi, but I do hate on the misrepresentation of facts.  Steve Jobs didn't kill the music industry, the music industry killed the music industry.  Here's how.\r\n\r\n---\r\n\r\nSome time in the early 80s record companies and stereo manufacturers (then known as HiFi) found themselves with a problem.  Record sales and HiFi sales were both flat.  The somewhat endless parade of new media formats, the same on that continues today with Blueray, had not found a new winner in a while.  People were still buying vinyl and cassettes.\r\n\r\nIt was at an AES convention that the CD was introduced to the world for the sole purpose of reviving back catalog and HiFi sales.  \"But it sounds like a turd\" was the general consensus among the crowd of professional audio engineers at AES.  Analog to digital conversion was in it's infancy and most early CDs sounded really brittle and really thin compared to their vinyl counterparts.  Sound familiar?  Anyway, because marketing is often more powerful than the truth especially when aimed at teenagers, the record companies got to work.  \"It's a perfect copy\", \"It'll never wear out\" was the message and it worked like a charm.  By the late 80s the CD was the dominant format and back catalog sales were humming along.\r\n\r\nPresumably nobody in marketing foresaw an age where digital information would be so easy to transfer, or more likely they figured by then it wouldn't be their problem.  \r\n\r\nNot going to get all Lefsetz about Napster and the subsequent reaction from the industry, but suffice to say that it was all coming down anyway and Apple was the company that put together a new model for distribution of a medium that was inevitable.  They didn't kill the music industry, you idiot.  You really think people would still be driving to Tower records to pick up [this shit](http://www.youtube.com/watch?v=CD2LRROpph0 \"YouTube  - Rebecca Black - Friday (OFFICIAL VIDEO)\")?", slug: "what-really-the-killed-music-industry", summary: "Well unsurprisingly, even after several _minutes_ of Google searching I'm unable to dig into the real article on this one, only countless verbatim reposts on countless web-scraping sites.\r\n\r\nAnyway, [here's an example](http://www.torontosun.com/entertainment/music/2011/03/15/17616986-wenn-story.html \"Steve Jobs killed music: Bon Jovi | Music | Entertainment | Toronto Sun\").  I don't hate on Jon Bon Jovi, but I do hate on the misrepresentation of facts.  Steve Jobs didn't kill the music industry, the music industry killed the music industry.", previous_id: nil, published: true, pub_date: "2011-03-15 05:00:00"},
  {title: "Drupal 101", body: "I've recently begun a new contract for a rather large Drupal site.  I was very excited to land this contract as it shall be my first bona fide \"enterprise\" contract and there's already a large amount of content on the site despite the company being rather young.  There are a <em>lot</em> of forms on this site with leads being transferred to a backend system that I'll probably never have anything to do with.  Anyway, I was excited to get a look in the back end of the Drupal portion of the site to see what the previous developers had been cooking up.\r\n\r\nImagine my intense surprise when it quickly became apparent that the previous developers weren't very learned in the <em>Drupal way</em>.  Specifically, they committed some major Drupal rookie sins that a novice Drupal developer must know about.\r\n\r\n1. <strong>Modules don't belong in the modules directory.  Themes don't belong in the themes directory.</strong>\r\n\r\nThere are many aspects of Drupal that are, politely speaking, counterintuitive to the new developer.  Drupal by itself doesn't actually do a whole lot.  The concept of the \"lean core\" means that the basic Drupal functionality is expected to be augmented to by<a href=\"http://drupal.org/project/modules\"> community contributed modules</a>.  You'd be hard pressed to find a Drupal site out in the wild without at least half of those front page modules installed.  I learned this on my second or third week of working with Drupal - the modules directory is reserved for Drupal core modules.  All community or \"contrib\" modules go into a directory that doesn't even exists with a stock Drupal install - sites/all/modules.  The same goes with themes - sites/all/themes.\r\n\r\nWhen Drupal runs through it's \"bootstrapping\" process (a fancy name for when a request from someone's browser hits anywhere on a Drupal site), it looks in a number of different places to find code that may extend it's functionality or alter it's output to a request.  Obviously, the modules directory is one of those places, that's why Drupal will run if you put contrib modules there.  However, a big part of maintaining a Drupal site involves keeping on top of updates to those modules, not to mention updates to the Drupal core itself.  Since the majority of Drupal lives in those modules, when Drupal core receives an update it becomes a much more muddlesome process to separate which files belong in which folder if they're all mixed together.  More advance development tools like <a href=\"http://drupal.org/project/drush\">Drush</a> make updating sites a total breeze, but not if the site structure is laid out wrong.\r\n\r\n<strong>2. Use an admin theme.</strong>\r\n\r\nGarland is a lovely theme (cough), but luckily the ecosystem has led to the evolution of some really useful admin themes that have big forms, big buttons and an intuitive layout by default.  My personal favorite is <a href=\"http://drupal.org/project/rubik\">Rubik</a>, which requires also downloading <a href=\"http://drupal.org/project/tao\">Tao</a> to function.\r\n\r\n<strong>3. Speaking of updates, stay on top of them.</strong>\r\n\r\nPart of the wonder of open source software is the knowledge that all over the world, thousands of developers with vastly differing skill sets and experiences are working together on one project.  Such a model ensures that many sets of eyes are on the lookout for security holes (\"exploits\") and that many hands are at work moving the project and it's features forward.  The flipside to this rapid development pace is that updates to the software are released whenever they are ready, and this is often quite frequently on larger projects.  It's a rare week when I don't have any sites that have some sort of update released on at least one module.  Drupal maintenance is all about keeping on top of the Status Reports page - found under admin/reports/status and admin/reports/updates.", slug: "drupal-101", summary: "I've recently begun a new contract for a rather large Drupal site.  I was very excited to land this contract as it shall be my first bona fide \"enterprise\" contract and there's already a large amount of content on the site despite the company being rather young.  There are a <em>lot</em> of forms on this site with leads being transferred to a backend system that I'll probably never have anything to do with.  Anyway, I was excited to get a look in the back end of the Drupal portion of the site to see what the previous developers had been cooking up.\r\n\r\n", previous_id: nil, published: true, pub_date: "2011-03-17 05:00:00"},
  {title: "Web designer or web developer?", body: "<p>I see lots of these posts on Craigslist -</p>\r\n\r\n<blockquote>\r\n<p>Meeting Planning firm is seeking a web designer on a freelance basis to work with provided art work in Photoshop/Illustrator and host onto closed invitation system. </p>\r\n\r\n<p>Requirements: </p>\r\n\r\n<p>Web designer must have design sense.\r\nMust code HTML/CSS -- Java a plus.</p>\r\n</blockquote>\r\n\r\n<p>I think they&#39;d probably get taken more seriously if they replaced all instances of &quot;designer&quot; with &quot;developer&quot;.</p>\r\n\r\n<p>So, it&#39;s pretty simple.  A designer designs.  A developer develops.  &quot;Web designer must have design sense.&quot;  Well, yeah.  A designer must design.</p>\r\n\r\n<p>So there are two parts to building anything on the web.  See if you can guess what they are.  I like to describe the difference to clients or my parents like this.  </p>\r\n\r\n<hr>\r\n\r\n<p>Think of your website project as building a house.  Before you start building anything you probably want to meet with an architect.  That architect will meet with you to find out what kind of house you want, will use their prior experience to help guide you with different ideas and options, and will ultimately deliver detailed plans of what your house will look like so that you can go hire someone who will actually build it.</p>\r\n\r\n<p>The person who will actually build it is the general contractor.  They have experience in building things from plans and can help guide you with difference options based on <em>their</em> experiences once in the building phase of the project.</p>\r\n\r\n<p>Designer - architect.  Developer - general contractor.</p>\r\n\r\n<p>Do you already have artwork that you&#39;re happy with and need someone to help you build the darn thing?  You need a web <em>developer</em>.  </p>\r\n\r\n<p>Are you just starting the planning phase and need to flesh out the ideas in your head?  You probably want to meet with a web <em>designer</em>.</p>\r\n\r\n<h3>Note</h3>\r\n\r\n<p>This is a very loose metaphor.  Many designers have some skills coding, and many developers have at least some clue about design.  I am one that has some clue.  I get layout, flow, what makes for good and bad user interface.  I am a hell of a finish carpenter.  I can make buttons like you wouldn&#39;t believe.  What I struggle with is the &quot;blank canvas&quot;.  I can&#39;t brand your idea.  I can&#39;t come up with what I&#39;d call a &quot;design&quot;.  for that I call my buddy Bob.  Bob is an artist.  He does shit in Photoshop you wouldn&#39;t believe, but couldn&#39;t/wouldn&#39;t write a line of HTML if his life depended on it.  We work really well together, and less well apart.</p>\r\n\r\n<p>I sincerely hope this helps at least one person write a better Craigslist ad.  Thank you.</p>\r\n", slug: "web-designer-or-web-developer", summary: "    <p>I see lots of these posts on Craigslist -</p>\r\n\r\n<blockquote>\r\n<p>Meeting Planning firm is seeking a web designer on a freelance basis to work with provided art work in Photoshop/Illustrator and host onto closed invitation system. </p>\r\n\r\n<p>Requirements: </p>\r\n\r\n<p>Web designer must have design sense.\r\nMust code HTML/CSS -- Java a plus.</p>\r\n</blockquote>\r\n\r\n<p>I think they&#39;d probably get taken more seriously if they replaced all instances of &quot;designer&quot; with &quot;developer&quot;.</p>", previous_id: nil, published: true, pub_date: "2012-07-13 05:00:00"},
  {title: "Why I dig on Sass these days (the quick version)", body: "Sass is a programming language.  It's purpose is to take some of the repetitive drudgery out of writing CSS (don't get me wrong, I love writing CSS).  It does this by letting you define things such as constants and functions, things that other programming languages give you but CSS doesn't.  The end purpose of Sass is to be digested and spit out as plain old CSS.\r\n\r\nThere are a couple of best parts.  One of them is being able to define constants, referred to as variables in Sass.  This lets you do things like define a standard color palate at the top of your sheet like this: \r\n\r\n<pre>\r\n$dark_blue: #064463\r\n$green: #68db1e\r\n$med_blue: #0089c7\r\n</pre>\r\n\r\nThen, any time you need to use that shade of dark blue, rather than having to go find (or remember) <code>#064464</code> you just put <code>$dark_blue</code>.  That's it.  \r\n\r\n<pre>\r\nbackground: $dark_blue\r\n</pre>\r\n\r\nDone.\r\n\r\nSass also has what are called mixins, but are more like functions in other languages.  My personal favorite use of mixins is this one - \r\n\r\n<pre>\r\n@mixin gradient($color1, $color2)\r\n  background: -webkit-gradient(linear, left top, left bottom, from($color1), to($color2))\r\n  background: -moz-linear-gradient(270deg, $color1, $color2)\r\n  background: linear-gradient(270deg, $color1, $color2)\r\n  -pie-background: linear-gradient(270deg, $color1, $color2)\r\n  behavior: url(/sites/default/files/pie/PIE.htc)\r\n</pre>\r\n\r\nThis defines all those different vendor specific ways of writing a CSS background gradient (with a dash of <a href=\"http://css3pie.com/\">css3pie</a> to boot!) and lets you simply drop this in your sheet :\r\n\r\n<pre>\r\n@include gradient($dark_blue, $med_blue)\r\n</pre>\r\n\r\nAnd again, done.  It gets compiled and spit out exactly how you need it to be.  Still experimenting with the exact colors of that gradient?  Change the color once for the whole thing and you can't forget to do it for Firefox after you've spent 10 minutes getting it just right in Chrome.\r\n\r\nIt starts getting really fun when you do things like this :\r\n\r\n<pre>\r\nbackground: lighten($dark_blue, 10%)\r\n</pre>\r\n\r\nOops, that's too light.\r\n\r\n<pre>\r\nbackground: lighten($dark_blue, 7%)\r\n</pre>\r\n\r\n<em>Perrrrfect</em>\r\n\r\nMix them all together!\r\n\r\n<pre>\r\n@include gradient(lighten($dark_blue, 10%), $dark_blue)\r\n</pre>\r\n\r\nThis is how Sass saves you time.  You can even try it out with existing stylesheets with the <code>sass-convert</code> command.  The syntax is <code>sass-convert input-file.css</code>.  This spits out your CSS file as Sass at standard output, so try this to get it into a file - \r\n\r\n<pre>\r\nsass-convert style.css > style.sass\r\n</pre>\r\n\r\nSass has a handy watcher function that you can invoke to automatically convert your Sass files into CSS files when you update them.  Separate the Sass source file and the target CSS files by a colon.\r\n\r\n<pre>\r\nsass --watch style.sass:style.css\r\n</pre>\r\n\r\n\r\nEnjoy!\r\n\r\nEdit 7/27 -- \r\n\r\nThere are some damn handy additions in Sass 3.1.  for instance, foreach loops - \r\n\r\n<pre>\r\n@mixin grad($color1, $color2)\r\n  @each $browser in webkit, moz, o, ms\r\n    background: -\#{$browser}-linear-gradient(top, $color1, $color2)\r\n</pre>\r\n\r\n- spits out this\r\n\r\n<pre>\r\n          background: -webkit-linear-gradient(top, #e7e7e7, #b4b4b4);\r\n          background: -moz-linear-gradient(top, #e7e7e7, #b4b4b4);\r\n          background: -o-linear-gradient(top, #e7e7e7, #b4b4b4);\r\n          background: -ms-linear-gradient(top, #e7e7e7, #b4b4b4);\r\n</pre>\r\n\r\nSo, there!", slug: "why-i-dig-sass-these-days-quick-version", summary: "Sass is a programming language.  It's purpose is to take some of the repetitive drudgery out of writing CSS (don't get me wrong, I love writing CSS).  It does this by letting you define things such as constants and functions, things that other programming languages give you but CSS doesn't.  The end purpose of Sass is to be digested and spit out as plain old CSS.\r\n\r\nThere are a couple of best parts.  One of them is being able to define constants, referred to as variables in Sass.  This lets you do things like define a standard color palate at the top of your sheet like this: \r\n\r\n<pre>\r", previous_id: nil, published: true, pub_date: "2011-07-08 21:50:14"},
  {title: "\"So what are you up to?\"", body: "So here I sit, at the end of another brief tour, watching the sky get lighter outside the windows at the St. Louis airport.  Listening to a bit of the <a href=\"http://www.amazon.com/Bon-Iver/dp/B004XE0P5E/ref=sr_1_4?ie=UTF8&qid=1314015521&sr=8-4\">new Bon Iver record</a>, which is beyond terrific to the point of being maybe the record of the year for me.  We'll see.\r\n\r\nIt's not that I haven't had much to say (though I haven't had quite <em>as much</em> to say), it's just that the time in which I used to say it has been filled by the consequence of my prayers for work being answered.  I've been very, very busy this year and not a moment too soon.  I jumped off my last gig in desperation; desperation at a job that I just wasn't feeling anymore and that finally qualified itself as being the wrong path.  To wander that far down a path such as that one and then decide to bushwhack my way back up to where I could see the landscape again was a life/career move I'd probably have considered a bit more carefully had I known just how hard it would be.  The undergrowth was dense.  The way was dark.  Had I not found the way back to be already overgrown I'd probably have turned around and asked for my old job back.  Or maybe not.\r\n\r\nForgive all the flashy metaphor, but I've just driven 4 hours to the airport after a gig in the middle of Nowheresville, Missouri and I've got the perfect balance of coffee buzz, time, exhaustion, and an itch to write.\r\n\r\nSo anyway, I get the title question a lot this year.  In short - \r\n\r\nI split RRE with grand ideas and a grander mouth to broadcast them.  The crusade was to put together the solution to the music industries problem.  Because there weren't enough smart, capable, connected people working on the issue already, apparently.  Part of last year's journey was a pretty extreme pruning of my ego, and it hurt.  I had (and still sort of have) a pretty good idea about an open source angle to the music business that hasn't been done before, in my opinion because it explicitly doesn't make anyone any money except for the artists who implement the solution.  I had a few other people convinced it was at least part of a good idea, and a few of them were kind enough to trot me in front of business types who could give me some feedback.  The conversation generally ended shortly after they asked me \"so how does it make money?\".  Well, the idea is that it doesn't make <em>you</em> money.  Kthx.\r\n\r\nI understand of course, and learned a hell of a lot about early stage startups in the process of all this.  Chiefly, I learned that I was seriously lacking in the ability to implement <em>any</em> ideas that I might have, either now or in the future.  So I decided to fall back and work on what I could work on, which I chose to be the technical end of the equation.  Always was good with computers.\r\n\r\nI picked up a very few clients last year, those who were desperate enough to hire me.  I went to a few networking things, mostly centered around <a href=\"/2010/06/ignored-dinosaurs-3\">Drupal</a>, and went to several job interviews.  I received some fairly harsh smackdowns at these interviews, typically during the technical part of the interview, and did not receive any jobs.\r\n\r\nSomewhere around last November I was pretty damn close to the edge of \"all I could take\".  That's when I saw the ENB gig up for grabs, so I grabbed it.  It wasn't much (by design) but it was a direction, it was good music with guys I already knew, it was at least a tiny bit of income.  I started in February.\r\n\r\nAbout 10 days into my tenure with ENB, I got a couple of emails on the same day that have turned out to be all the work I need.  But it didn't stop there.\r\n\r\nSomehow in the process of all this, I've become a fairly well-rounded, intermediate programmer, and one who has a pretty good sense of how to figure out the infinite number of problems that he's never encountered before.  I've learned more programming languages, acronyms, protocols, tools, toolkits, best practices and shortcuts for being an effective (hireable) programmer than I could've guessed I'd be capable of.  In April something amazing happened.  I had a technical interview for a freelance gig based out of Austin TX that went astonishingly well.  We talked about <a href=\"http://git-scm.com/\">Git</a> and <a href=\"http://drupal.org/\">Drupal</a> and <a href=\"http://www.ruby-lang.org/en/\">Ruby</a> and handwriting <a href=\"http://en.wikipedia.org/wiki/SQL\">SQL</a> for half an hour.  It was <em>fun</em>.  I got the gig, and that was the little gig I got that month.  I've been getting gigs left and right all year.  It's insane.  It's wonderful.\r\n\r\nSo basically, I'm making about 90% of my income on this computer here, and I do the ENB thing for fun and to stay connected and relevant to the scene I really care about.  I've been in technical woodshedding mode all year, but I sense that it's about time to start trying to crack the nut that beat me this time last year.  I've had a few things fall in my lap in the last couple weeks that are pointing me in that direction again, to try and see what I can come up with that could contribute to the music scene.  I'm not trying to \"save\" it anymore.  I'm not really sure that \"saving\" the music industry is what needs to happen right now anyway.  As much as I am completely in LOVE with Spotify for the last month, they pay the artists about 1/10 of a piece of dog shit for royalties on the tunes that they stream.  Nobody could make a living on what they pay out.  Excuse me, no <em>artist</em> could ever make a living on what they pay out.  I hear the labels have found a way to keep making nice profits in the midst of all this supposed bloodshed.  So the brass ring is still sitting there, waiting to be grabbed.  ", slug: "so-what-are-you", summary: "So here I sit, at the end of another brief tour, watching the sky get lighter outside the windows at the St. Louis airport.  Listening to a bit of the <a href=\"http://www.amazon.com/Bon-Iver/dp/B004XE0P5E/ref=sr_1_4?ie=UTF8&qid=1314015521&sr=8-4\">new Bon Iver record</a>, which is beyond terrific to the point of being maybe the record of the year for me.  We'll see.\r\n\r\n", previous_id: nil, published: true, pub_date: "2011-08-21 12:42:12"},
  {title: "Resetting postgres sequences", body: "I recently rebuilt this site (again, I think this is v9 now) into Rails and Postgres.  I was moving out of Drupal, so there was a significant downsizing of the database, and some pretty painless migration of the data.  Once again, I used the Sequel gem to write the migration script to pull out the posts and related data that gets scattered hither and yon in Drupal's database.  That was the easy part.\r\n\r\nI did all of this over a period of about two weeks and it was joyous, painless, and fun.  I used the [Textacular gem](https://github.com/textacular/textacular) to power that full text search up there (if you're on a `\#{$medium-and-up}` device) and generally got to know a teeny little bit more about Postgres - the grown up's open source database.  This whole thing is just a step on the path of the continous quest toward \"the idea\", and some of Postgres' features that let you denormalize some easy data will definitely come in handy when I understand the fundamentals of the engine a little better.  I just met one of them now.\r\n\r\n#### Postgres sequences\r\n\r\nWhen you want an auto-incrementing id as a primary key on your database table in MySQL, it's very straightforward.  It's essentially a property of the column itself, ie \r\n\r\n~~~sql\r\n+-------+---------+------+-----+---------+----------------+\r\n| Field | Type    | Null | Key | Default | Extra          |\r\n+-------+---------+------+-----+---------+----------------+\r\n| id    | int(11) | NO   | PRI | NULL    | auto_increment |\r\n+-------+---------+------+-----+---------+----------------+\r\n~~~\r\n\r\nIn postgres, which is a much more robust database, you have an entire \"sequence\" object available in the database.  You can program these sequences as you would an object, so if for some reason you wanted to skip even numbers, you can do that.  The first use case for this that comes to mind is sharding your dataset when scaling out, but it'll likely be never when I find that out in practice.  \r\n\r\nAnyway, when I migrated the blog data into the system it brought the numeric primary ids with it, but just now when I went to author my first blog post on the new system it bombed out when I went to save.  \r\n\r\n~~~\r\nERROR -- : PG::UniqueViolation: ERROR:  duplicate key value violates unique constraint \"posts_pkey\"\r\nDETAIL:  Key (id)=(1) already exists.\r\n~~~\r\n\r\nIf I hadn't read about sequences already, this would've confused the shit out of me.  So the fix is to holler at your sequence object to start incrementing where you need it to, rather than 1, which is where it's currently set.\r\n\r\n~~~sql\r\nibd_db=# select id from posts order by id desc limit 5;\r\n id\r\n-----\r\n 251\r\n 250\r\n 244\r\n 243\r\n 239\r\n(5 rows)\r\n\r\nibd_db=# alter sequence posts_id_seq restart with 252;\r\n\r\n// Save post, no problems\r\n\r\nibd_db=# select id from posts order by id desc limit 5;\r\n id\r\n-----\r\n 252\r\n 251\r\n 250\r\n 244\r\n 243\r\n(5 rows)\r\n~~~\r\n\r\nSo `ALTER SEQUENCE sequence_name RESTART WITH next_id_in_line;`.", slug: "resetting-postgres-sequences", summary: "How to reset postgres sequences if your auto-incrementing id gets out of whack (after migrating out of MySQL, for instance).", previous_id: nil, published: true, pub_date: "2014-01-27 20:56:06"},
  {title: "Hex values, rgb, and me", body: "One of the first discoveries I ever made in web development was that CSS hex values that were all the same number would always give me some shade of grey.  #444 was dark, almost black.  #ccc was light, perfect for form borders.  Not long after I discovered that Photoshop wouldn't accept these values and would make me type in all 6 characters - #444444, #cccccc.  \r\n\r\nSometime after that I discovered how to tap into a shade somewhere between #eee and #fff, just a barely perceptible off-white with #f4f4f4.  #f9f9f9 was lighter.  #efefef was darker.  The jobs at hand didn't really call for a deeper cognitive understanding.  Just some off white colors.\r\n\r\n---\r\n\r\nIt was only much more recently that somewhere in the corners of my mind I began to unravel the science, and just this morning walking down the stairs when it hit me in the way that I now have to write about.\r\n\r\n#### parseInt()\r\n\r\nThere is a javascript function called `parseInt()`, and its job (in case it isn't clear) is to parse integers.  There are two parameters - the first being the string/number you want to parse, but the second is often overlooked.  The second is the \"base number\" in which you wish to parse, 10 (for decimal) is the default.  I've read there is a bug whereby if you pass is a string beginning with the number 0, a base of 8 is assumed.  This can lead to some weird bugs if that's not what you intend, so it's considered good style to always specify what you mean, usually 10.  \r\n\r\nIf you want to play with this function, pass it some hexadecimal (base 16) and see what you get back.  This will let you do something like this --\r\n\r\n~~~javascript\r\n  parseInt('ef', 16); // -> 239\r\n  \r\n  parseInt('ff', 16); // -> 255\r\n  \r\n  parseInt('44', 16); // -> 68\r\n  \r\n  parseInt('45', 16); // -> 69\r\n~~~\r\n\r\n#### Hex and Rgb\r\n\r\nRgb color notation is pretty simple to get your head around.  It means Red, Green, Blue.  The same colors that your old tube TV used to put out in those tiny little dots if you got close enough.  Mix those 3 colors together in the proper proportions anbd you can pull any shade of the rainbow out.  Mix them together in equal portions and you get shades of grey, ie `rgb(239, 239, 239)` is a lovely shade of off-white.  \r\n\r\n`16 x 16 = 256;`  Duh.\r\n\r\nrgb(68, 68, 68) === #444444;\r\n\r\nI haven't really been required to think much in base 16, and the average developer probably isn't called on to think in those terms very often, but once that clicked for me, I can somewhat compute the shades of colors that I want in my head based off of thinking about basic color mixing theory and then doing some base 16 calculations in my head.  Staving off Alzheimers, hopefully.", slug: "hex-values-rgb-and-me", summary: "The non-obvious relationship between rgb and hex color encoding and why being able to calculate hexadecimal values in your head might actually be useful to a front end developer.", previous_id: nil, published: true, pub_date: "2014-01-27 15:21:55"},
  {title: "i'mWorkingOnAForum...", body: "For my band, for my band...\r\n\r\nWould any of you care to help out with putting together yet another online community?  The aim with this one is to try and organize Railroad Earth's online presence just a bit, mainly so that newcomers can have a better central clearinghouse for RRE info and community before swimming into deeper waters.  This probably isn't the most expeditious place to post this, but I'm trying to keep this kinda small while we're hammering out the design details.\r\n\r\nThat said, if you're an RRE fan, or a curious onlooker, please check it out here, and feel free to let me know of any annoying settings that you discover that I might be able to change.\r\n", slug: "im-working-on-a-forum", summary: "For my band, for my band...\r\n\r\nWould any of you care to help out with putting together yet another online community?  The aim with this one is to try and organize Railroad Earth's online presence just a bit, mainly so that newcomers can have a better central clearinghouse for RRE info and community before swimming into deeper waters.", previous_id: nil, published: true, pub_date: "2009-04-07 21:57:22"},
  {title: "And I bid you goodnight...", body: "<p>Well, campers, the day has come.  Regular readers of this blog might be a little less surprised about this particular piece of news, but I'm pretty surprised to be writing it.  I've been writing it in my head for a few weeks now, but now that I'm sitting here, I don't really know how to put it.</p>\r\n\r\n<p>I joined this band at the age of 24 to accomplish a few objectives.  I was barely a year out of college and was already tired of washing dishes and rolling burritos for a living, so I prayed for a gig.  I met John Skehan within a week, and the rest is history.  What I wanted then was to get out of the kitchen and play professionally (with my college educated hands), to travel, and to learn about the music business.  Check, check, and check.  I never intended to be a touring musician for the rest of my life, and have proceeded to plan my life with my wife and our son and our dogs accordingly.  We played Red Rocks a couple of months ago.  Icing on the cake.</p>\r\n\r\n<p>About a year and a half ago (as regular readers know), the flame of my creativity began lighting a different path than the one that I was on with RRE.  I'd always been pretty good with computers.  I only recently realized that the main reason that I like recording and production so much was mainly because it involves using and being good with computers.  It took an iPhone to spark the idea that I should take matters into my own hands and start learning how to program myself.  So, for the last 18 months, that's what I've been doing.  I'm not quite to the point that I'm ready to make a living with it, but God has taken care of me and me family so far, so I have to place my trust in him now.</p>\r\n\r\n<p>I had a medium-range plan that had me exiting RRE at the end of next year - 2010 - and dovetailing my present and future careers together the best I could in the meantime.  Then a record deal came along.  I'm a lawyer's son, so when it became apparent that this deal was probably going to actually happen, it kinda screwed up my plan.  I couldn't sign a piece of paper committing myself to RRE and touring for the next 3 or 4 years when I knew good and well that I didn't have it in me.  That's when I knew I had to tell my bandmates what was going on with me.  Needless to say, they were probably a little surprised themselves.  I gave them until the end of next May, but they've rightly decided that since a new record needs to be written, and we won't be on the road while that's happening, it's probably best to just go ahead and call it.</p>\r\n\r\n<p>I'm not sure what the future holds, but I've got a few ideas.  I know how much RRE means to many of you, and many of you probably think I've gone off my rocker reading this, but I have to ask you to trust me.  RRE has meant a lot to me, too.  I'm lucky to be able to say goodbye to a few of my favorite cities in America - Denver, San Francisco, and Portland - before hanging up my cables after the New Year.  RRE is an unbelievably good band, and I have no doubt that they'll pick a worthy successor for me.  At the very least they won't have to talk some kid into sleeping on hotel floors for weeks on end anymore.</p>\r\n\r\n<p>To my bandmates I want to extend my deepest thanks for the opportunity to do exactly what I always dreamed of doing for the last 7 years, and to play the best music I'll probably ever play.  To Mikey and J Ro and Phil and Stacy and Alex and especially Gayle I want to say thanks for working way harder than I ever did to make sure that RRE not only had people at the show but that they were lavished in the most inviting atmosphere possible, even at the Nick in Birmingham.  To Brian I want to say thanks for talking me into such a ridiculous situation in the first place and for everything that you've done for RRE.  And lastly to all the strangers who have become fans who have become friends, I will miss the hell out of y'all, but I won't be too hard to find either.  I have an entire industry to try and save now, for the benefit of musicians and music lovers alike, and I'll need all the help and support I can get.</p>\r\n\r\n<p>Thanks for the ride, and I'll leave you with a little Gillian Welch...</p>\r\n\r\n<div class=\"flex-video\"><iframe width=\"640\" height=\"480\" src=\"//www.youtube.com/embed/j7xTEJzi-xQ\" frameborder=\"0\" allowfullscreen></iframe></div>\r\n\r\n<p class=\"alert\">EDIT : I'm going to be checking in here frequently over the next several weeks as this process unfolds.  I had a thought during last night's show that it'd probably be very helpful to me and informative for you if I use this blog as a tool to try and explain to you just what I'm so fired up about that I'd quit a fantastic band to go do it.  Please stop back by.  Later...</p>", slug: "and-i-bid-you-goodnight", summary: "<p>Well, campers, the day has come.  Regular readers of this blog might be a little less surprised about this particular piece of news, but I'm pretty surprised to be writing it.  I've been writing it in my head for a few weeks now, but now that I'm sitting here, I don't really know how to put it.</p>\r\n\r\n<p>I joined this band at the age of 24 to accomplish a few objectives.  I was barely a year out of college and was already tired of washing dishes and rolling burritos for a living, so I prayed for a gig.  I met John Skehan within a week, and the rest is history.  What I wanted then was to get out of the kitchen and play professionally (with my college educated hands), to travel, and to learn about the music business.  Check, check, and check.  I never intended to be a touring musician for the rest of my life, and have proceeded to plan my life with my wife and our son and our dogs accordingly.  We played Red Rocks a couple of months ago.  Icing on the cake.</p>", previous_id: nil, published: true, pub_date: "2009-11-12 01:03:27"},
  {title: "Saturday 8:30pm", body: "<p>Well, it has been quite some time, hasn't it?  So much has changed!  So much is still the same!  Where to begin?  I've once again written this post in my head so many times that I don't know where to start.  How about the first thing that jumps to mind?</p>\r\n\r\n<p>Okay, the first thing that jumps to mind is that I just found a card in my backpack yesterday.  It was given to me on new years in Portland, the night of my last show with RRE.  I don't remember who gave it to me, which was probably their plan (or maybe I was just so out of it that I really don't remember).  Anyway, later that night I was sitting in Mark-a-rita's hotel room and realized that I'd been carrying this card around in my pocket all night and maybe I should open it and see what it was.  It was from everyone in the room, which was basically a great number of my really close friends from the RRE experience.  As soon as I a saw all the signatures on it and a couple of the things that people had written I shoved it back in the envelope.  I heard somebody behind me say \"Oh, did he just open it?\"</p>\r\n\r\n<p>I couldn't read it then because I was totally overwhelmed.  From the time that I announced that I was leaving the band to that night at the Aladdin I was completely flooded with so much emotion from so many people with whom I'd shared most of my adult life that I myself was emotionally paralyzed.  It was amazing, and amazingly difficult.  Most Sundays after gig weekends during that period I would spend at least a little while crying and not knowing why.  I was leaving of my own free will and for reasons that were plenty good enough for me.  What was this all about?</p>\r\n\r\n<p>By the time I got to Portland I couldn't take it anymore.  I'd had enough of people being so nice to me.  I didn't deserve it.  People gave me cards with hundreds of signatures on them telling me that I'd be missed.  Someone organized a can drive in my name at our Thanksgiving show, for Pete's sake.  What did I do?  I just played the bass!  I'd have been doing it anyway, hopefully, and instead I got to make friends and play shows and get good at the bass and be a rockstar for years.  I didn't deserve this outpouring.</p>\r\n\r\n<p>So, to anyone reading this who was around in that period, this one's for you.</p>\r\n\r\n<p>I know I'll see some of you again, but I'll never see all of you again.  My life has been a blessing, a dream.  When I can transcend my neurosis and the chaos of my life currently for a few brief moments and really just take a breath, I feel so profoundly grateful for being a part of it.  You and I made it together, and it was so. much. FUN!  I kind of get it now, some of what there was to be sad about.  Change is usually a wonderful thing, a necessary thing, but in a sense I feel like I've quit my family.  Like I've spit in the face of the thing that we built.  For that I'm both sorry and thankful for having had the experience in the first place.</p>\r\n\r\n<p>I guess that'll do for now.  Hopefully this gets the writer's clog out.  I love you guys.</p>\r\n", slug: "saturday-830pm", summary: "<p>Well, it has been quite some time, hasn't it?  So much has changed!  So much is still the same!  Where to begin?  I've once again written this post in my head so many times that I don't know where to start.  How about the first thing that jumps to mind?</p>", previous_id: nil, published: true, pub_date: "2010-03-14 01:44:00"},
  {title: "Reversing strings in PHP", body: "Was asked this question recently, and haven't done any low level string manipulation w PHP in a little while.  Couldn't remember the signature of `substr()`, but that wasn't my method anyway.  Mine was more like iterating over an index, working from the back forward and concat-ing that on to a new string.   Also, this is like 5 minutes worth of code, so cut me some slack.\r\n\r\n~~~php\r\n<?php\r\n\r\necho \"\\nString reverse test\\n\\n\";\r\n\r\nfunction bench_it($func) {\r\n  if (function_exists($func)) {\r\n    $str = file_get_contents(__DIR__ . '/mobydick.txt');\r\n    $results = [];\r\n    $iter = 10;\r\n    for ($i = 0; $i < $iter; $i++) {\r\n      $then = microtime(true);\r\n      $func($str);\r\n      $now = microtime(true);\r\n      $results[] = $now - $then;\r\n    }\r\n    $timeout = array_sum($results) / count($results);\r\n    \r\n    echo \"$func avg: $timeout\\n\";\r\n  }\r\n}\r\n\r\nfunction substr_test($str) {\r\n  $len = strlen($str);\r\n  $new_str = \"\";\r\n  while ($len > 0) {\r\n    $new_str += substr($str, $len, 1);\r\n    $len--;\r\n  }\r\n}\r\n\r\nfunction str_concat($str) {\r\n  $len = strlen($str);\r\n  $new_str = \"\";\r\n  while ($len > 0) {\r\n    $new_str += $str[$len - 1];\r\n    $len--;\r\n  }\r\n}\r\n\r\nfunction str_push_and_join($str) {\r\n  $len = strlen($str);\r\n  $arr = [];\r\n  while ($len > 0) {\r\n    $arr[] = $str[$len - 1];\r\n    $len--;\r\n  }\r\n  implode('', $arr);\r\n}\r\n\r\nfunction strrev_test($str) {\r\n  strrev($str);\r\n}\r\nbench_it('substr_test');\r\nbench_it('str_concat');\r\nbench_it('str_push_and_join');\r\nbench_it('strrev_test');\r\n~~~\r\n\r\n~~~bash\r\ngrubb:php/ $ php test.php                                                                                   [18:18:13]\r\n\r\nString reverse test\r\n\r\nsubstr_test avg: 1.2850220918655\r\nstr_concat avg: 0.24263381958008\r\nstr_push_and_join avg: 0.63150105476379\r\nstrrev_test avg: 0.00075311660766602\r\n~~~\r\n\r\nSo the method that I was working on (#2 str_concat) is the fastest besides the built in `strrev()`, but most interesting is when you run these same tests on PHP 7.0.4 --\r\n\r\n~~~bash\r\ngrubb:php/ $ brew unlink php56 && brew link php70                                                           [18:18:56]\r\nUnlinking /usr/local/Cellar/php56/5.6.19... 19 symlinks removed\r\nLinking /usr/local/Cellar/php70/7.0.4... 17 symlinks created\r\ngrubb:php/ $ php test.php                                                                                   [18:19:20]\r\n\r\nString reverse test\r\n\r\nsubstr_test avg: 0.12836751937866\r\nstr_concat avg: 0.084317827224731\r\nstr_push_and_join avg: 0.13263397216797\r\nstrrev_test avg: 0.00083370208740234\r\n~~~", slug: "reversing-strings-php", summary: "String reversing w PHP.", previous_id: nil, published: true, pub_date: "2016-03-28 18:53:07"},
  {title: "Toward the point...", body: "Okay, so this blog is gonna be really boring if I do it in chronological order.  I want to make sure that my two readers so far have something to look forward to besides cleaning out my mental closet.<br /><br />   I had an idea for a business that would be really cool if someone started.<br /><br />   I'm in a band that gets virtually no love from the mainstream media, the major record labels, the world at large...Yet, we've been together for 8 years now.  I've been in the band for 6.  When I first joined the band we were buying a van from a liquor store parking lot so that we could get around the country more comfortably and reliably.  That van turned 300,ooo miles last weekend.  We played Maine, Vermont, and New Hampshire.  In February.  \"This is ridiculous\" we thought to ourselves.  Yet, we sold out the little place we played in ME, and the huge place we played in VT.  Turns out cabin fever is a good thing for your band.  But we do this all the time.<br /><br />   You take your average artist that's on a major label, that's on the radio or MTV, and we draw more people to any given show in any given town than probably 90% of them.  That there's something going on here is plain for anyone to see.  That we're impossible to \"market\" in the traditional sense, in the traditional way is equally plain, to me at least.  I don't even know how to answer the question \"What kind of music do you guys play?\" and I've been looking for a straight reply for 6 years.  So I don't get frustrated when we put out a new record and it doesn't sell, or get the media response that I'm sure it'll get, or when the good radio play we're actually getting for the first time doesn't actualy translate into any hard numbers.  Okay, so I do, but does it really matter?  If you're a fan of RRE, how did you find RRE?  Was it seeing an article in the paper, or a magazine?  Was it by hearing us on XM/Sirius?<br /><br />   It may have been, but I'd say chances are pretty strong that either one of your friends turned you on to us, or that you stumbled across us on the internet.  That tells me something.", slug: "toward-point", summary: "Okay, so this blog is gonna be really boring if I do it in chronological order.  I want to make sure that my two readers so far have something to look forward to besides cleaning out my mental closet.<br /><br />   I had an idea for a business that would be really cool if someone started.<br />", previous_id: nil, published: true, pub_date: "2009-02-24 19:16:40"},
  {title: "Computers.", body: "Let me just say this, and I was a big PC defender/Mac smack-talker for many years.  The adjustment period, when I bought my Mac last summer, was about an hour long.  I just had to get used to closing windows in the left side of the screen instead of the right.  Since the adjustment period has ended, and working on this thing has become sort of an extension of my arms, I gotta tell you - Macs just stay out of your way.  It's that simple.  I don't fight with it.  i don't have to reboot or reinstall.  I don't even have to think about it.  When I got my iPhone a year and a half ago, I knew that this was a tool that would allow the most unorganized person to have a ball getting their shit together.  That person is me.  I'm pretty sure if i take the time to plot out some sort of productivity index for my life, it's going to start showing some serious upward movement around July of 08.", slug: "computers", summary: "Let me just say this, and I was a big PC defender/Mac smack-talker for many years.  The adjustment period, when I bought my Mac last summer, was about an hour long.  I just had to get used to closing windows in the left side of the screen instead of the right.  Since the adjustment period has ended, and working on this thing has become sort of an extension of my arms, I gotta tell you - Macs just stay out of your way.  It's that simple.  I don't fight with it.  i don't have to reboot or reinstall.  I don't even have to think about it.", previous_id: nil, published: true, pub_date: "2009-02-26 22:33:15"},
  {title: "The Great Lie - Lorem Ipsum", body: "And by \"Great\", I don't mean awesome.  \r\n\r\nFor those of you who don't know what I mean when I say Lorem Ipsum, it's standard gibberish copy put in place of the real copy that's going into your design.  It's been used for decades if not centuries to allow creative teams to test out different visual designs and know what it'll look like when some words get put in there.\r\n\r\n> Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n>\r\n> ~ a standard paragraph of Lorem Ipsum...\r\n\r\nSo what's wrong with this?\r\n----------------------\r\n\r\nI just built a website for a friend over the last half of last week.  The designer and I worked together marvelously, which is great because it was our first gig.  She was totally into trying out the [cool, new tool](https://trello.com/) that launched last week to see if it would help keep us organized while in a hurry (our launch date is today - Monday).  The project manager was the one in charge of dealing with the ADD client, so it was really a perfect scenario.  We went with Wordpress since everyone was familiar with it.\r\n\r\nFriday evening I got a Word doc of the site's copy.   I don't like placing copy in websites, but whatever.  At least it wasn't in all caps.\r\n\r\nThis morning I open it up and at least half of the pages are  \"coming soon\".  Approximately half of the remaining pages are four sentences or less.  I'm all about white space, but this is a _bit too much_.  \r\n\r\nThat's when the title of this post popped into my head.\r\n\r\nSimple Rule for Marketing Websites\r\n------------------------------\r\n\r\nIf you do the design first and the copy last, you lose.  If you do the copy first and the design second, you stand a much better chance at succeeding with both.", slug: "great-lie-lorem-ipsum", summary: "And by \"Great\", I don't mean awesome.  \r\n\r\nFor those of you who don't know what I mean when I say Lorem Ipsum, it's standard gibberish copy put in place of the real copy that's going into your design.  It's been used for decades if not centuries to allow creative teams to test out different visual designs and know what it'll look like when some words get put in there.\r\n\r\n> Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.", previous_id: nil, published: true, pub_date: "2011-09-19 12:45:03"},
  {title: "RoR", body: "Oh, yeah... The Holy frickin Grail.  The MVC framework that's sweeping the land fell under my text editor yesterday.\r\n\r\nI hacked my way into Ruby on Rails.\r\n\r\nI built a website yesterday in two hours that does more than anything I've done in the last nine months.  Granted, it doesn't look that great, but it's functional.  Also granted, it took me nine months to put the conceptual pieces together, and to find the technical resources to do something with the RoR framework that I downloaded 6 weeks ago, and to figure out how to install all manner of seriously deep Unix command line shit, but so help me, it's an exhilarating feeling.\r\n\r\nOkay, so RoR isn't the Holy Grail, iPhone apps are, for me.  iPhone apps are written in a language that's not Ruby, but the MVC architecture is the same.  What I'm <i>hoping</i> that this means is that all this cool stuff that I'm learning about building Ruby stuff will translate nicely to building Obj-C stuff.  The work that I've done over the past 2 weeks with PHP was heavily informed by the one class I took on straight C, so I'm optimistic.\r\n\r\nI'm in Davenport IA right now.  It's cold, but the sun is shining.  Sorry I've been out of touch, but touring really does kinda wear you out.  I'm not saying it's hard, but it does wear you out.\r\n\r\nPeace...", slug: "ror", summary: "Oh, yeah... The Holy frickin Grail.  The MVC framework that's sweeping the land fell under my text editor yesterday.  <div><br /></div><div>I hacked my way into Ruby on Rails.  </div><div>", previous_id: nil, published: true, pub_date: "2009-03-29 18:31:36"},
  {title: "justSoYouKnow", body: "I'm screwing around with the host settings of this website pretty much continually.  If you should happen to come by here and find a \"Site doesn't exist\" or other such notice, please check back soon.  I probably just changed some setting to see what would happen and ended up hosing the entire site.  Thanks to Scotty Baron for the word \"hosed\".", slug: "just-so-you-know", summary: "I'm screwing around with the host settings of this website pretty much continually.  If you should happen to come by here and find a \"Site doesn't exist\" or other such notice, please check back soon.  I probably just changed some setting to see what would happen and ended up hosing the entire site.  Thanks to Scotty Baron for the word \"hosed\".", previous_id: nil, published: true, pub_date: "2009-04-01 23:29:01"},
  {title: "A VC", body: "I really like Fred Wilson's blog.  He's a tech VC (venture capitalist) based in New York.  He's steady, and often I fall behind since he puts out some good stuff on a daily basis.  Following the tack of this post, Facebook just added an SMS friend feature to their business pages.  All you do if you're not already a fan is text \"fan RailroadEarth\" to whatever the number is.  The question I could use your assistance with is how best to get the word out about this.  Seems to me like getting folks at the show would be the best way to capitalize on this, but obviously we're not going to announce it from the stage.  Any ideas?<p><a href=\"http://feedproxy.google.com/~r/AVc/~3/-oxOev8GzjQ/dont-ignore-the-least-common-denominator.html\">Don't Ignore The Least Common Denominator</a>\r\n\r\nEdit: We have a winner, folks!  Allan Ronquillo has sent a complete battle plan - a work that deserves intensive study.  If he doesn't mind I'll put it up here...", slug: "avc", summary: "I really like Fred Wilson's blog.  He's a tech VC (venture capitalist) based in New York.  He's steady, and often I fall behind since he puts out some good stuff on a daily basis.  Following the tack of this post, Facebook just added an SMS friend feature to their business pages.  All you do if you're not already a fan is text \"fan RailroadEarth\" to whatever the number is.  The question I could use your assistance with is how best to get the word out about this.", previous_id: nil, published: true, pub_date: "2009-07-21 23:33:53"},
  {title: "Any copyright geeks in the house?", body: "\"The lesson for any artist here has to be to sign a contract with any session musicians you use to ensure that you have set out any arrangement on copyright and royalties in the product. The vast majority of modern artists will be well aware of the risks, but we could see a great number of similar cases. An ounce of protection could be worth nearly 40 years of cure.\"\r\n\r\n- from a British law blog, <a href=\"http://www.ralli.co.uk/news?news_id=398\">Ralli Solicitors</a>.  You know that tune \"Whiter Shade of Pale\", that I always thought was a Steve Winwood tune?  That's by a band called Procul Harum.  The keyboardist on that tune claimed \"that he wrote and was responsible for the main melody of “Pale”, and as such is entitled to a share of its copyright.\"  He won the judgment, 40 years after the tune came out.  Good for him, right?  It's a little more complicated than that.", slug: "any-copyright-geeks-house", summary: "\"The lesson for any artist here has to be to sign a contract with any session musicians you use to ensure that you have set out any arrangement on copyright and royalties in the product. The vast majority of modern artists will be well aware of the risks, but we could see a great number of similar cases. An ounce of protection could be worth nearly 40 years of cure.\"\r\n\r\n- from a British law blog, <a href=\"http://www.ralli.co.uk/news?news_id=398\">Ralli Solicitors</a>.  You know that tune \"Whiter Shade of Pale\", that I always thought was a Steve Winwood tune?", previous_id: nil, published: true, pub_date: "2009-07-31 17:33:46"},
  {title: "It's the wizard, not the wand.", body: "I'm reading this morning and I come across a post about a thing that somebody wrote called (or subtitled, I'm not sure) Node.php.  Anyone who doesn't understand what it is by looking at the name wouldn't understand my explanation for what it does, so whatever.  \r\n\r\nFor the non-programmers --\r\n\r\nIt's written in  a language called PHP.  PHP, despite being the backbone for the server side component of a huge number of the largest websites in existence (as well as this tiny little one), is almost universally derided in hacker circles.  It's sort of like the Alvarez guitar of programming languages.  No \"real professional\" guitar player would be caught dead playing anything but a Les Paul or a Strat, so the Alvarez is widely acknowledged to be a \"starter\" guitar, much like PHP is \"starter\" language to some people.  \r\n\r\n\r\nThe problem is that this is all a bunch of pseudo-religious hokey, and (many) hackers are more vain, egotistical, and prone to engaging in flame wars over their chosen tools than even musicians.  Any <em>actual</em> real professional musician knows good and damn well that he can get a beautiful sound out of an Alvarez and that only rookies have the time to make fun of each other for their choice because the pros are too busy creating. \r\n\r\nI typically play <a href=\"http://foldingbass.com/\">a plywood Chinese bass that's been cut up into little pieces</a> and I get a damn good sound out of it.  Is the sound better than my carved bass?  Is it easier to play?  No.  Does that stop me from rocking the joint with it?  No.\r\n\r\nSo why in the face of so much evidence that PHP is a perfectly useful language to a vast number of programmers of all skill levels around the world does it garner such derision?  Someone please explain it to me as if you were trying to convince a non-programmer that they should care because the whole thing seems a little immature.", slug: "its-wizard-not-wand", summary: "I'm reading this morning and I come across a post about a thing that somebody wrote called (or subtitled, I'm not sure) Node.php.  Anyone who doesn't understand what it is by looking at the name wouldn't understand my explanation for what it does, so whatever.  \r\n\r\nFor the non-programmers --\r\n\r", previous_id: nil, published: true, pub_date: "2012-05-19 15:45:52"},
  {title: "go for launch", body: "My cherry is no more.  Yesterday I fired off <a href=\"http://railroadearth.com\">my first real website</a>.  Nothing exploded except for the email for a little bit.  Turns out when you switch servers, the email and the website don't show up at the same time.  So most of today was spent learning about MX servers and stuff.  The documentation out there about what to expect from your website when you pull a host change is quite shitty, so I'll have to write a chapter in the <a href=\"http://ignoredByDinosaurs.com/category/the-book/\">Moron's Guide</a> about it.\r\n\r\nAnyway, I'm totally fried, and taking a break from the Thesis Wordpress theme for a bit.  It's great, but I need to get sharp with some CSS skills now so that I can get on with the style now that I know somewhat how to walk.", slug: "go-launch", summary: "My cherry is no more.  Yesterday I fired off <a href=\"http://railroadearth.com\">my first real website</a>.  Nothing exploded except for the email for a little bit.  Turns out when you switch servers, the email and the website don't show up at the same time.  So most of today was spent learning about MX servers and stuff.", previous_id: nil, published: true, pub_date: "2009-08-21 03:09:06"},
  {title: "U2 to Play Free Concert on YouTube", body: "\"When U2 takes the stage in Los Angeles’ Rose Bowl Stadium this Sunday, fans in the United States and 15 other countries will be able to watch the whole show, live and for free, on YouTube — the first time the website has ever broadcast a complete concert live.\"</p>\r\n\r\n\r\nAre you kidding me?  This is the first time that YouTube has broadcast a concert live?  Did I somehow get teleported back to 2006?  I would think that news of this nature would seem a lot more like news back then, but seriously?\r\n\r\nThe first time <em>ever</em>?\r\n\r\nMaybe I'm not as late to the party as I thought with all this, y'know, technology stuff.  I guess giant-mega-corp will always move this slowly.  Is it already time to add Google to the Dinosaur List?\r\n\r\n<p><a href=\"http://www.wired.com/epicenter/2009/10/u2-will-play-free-concert-on-youtube/\">U2 to Play Free Concert on YouTube</a>\r\n\r\n<p>(Via <a href=\"http://www.wired.com/epicenter\">Epicenter</a>.)</p>", slug: "u2-play-free-concert-youtube", summary: "\"When U2 takes the stage in Los Angeles’ Rose Bowl Stadium this Sunday, fans in the United States and 15 other countries will be able to watch the whole show, live and for free, on YouTube — the first time the website has ever broadcast a complete concert live.\"</p>", previous_id: nil, published: true, pub_date: "2009-10-20 10:42:59"},
  {title: "Explaining Non-Relational Databases To My Mom", body: "I was on the phone with Mom yesterday, and we got to talking about technology - a thing that actually happens fairly frequently.  Being an only kid, she's genuinely interested in everything that I do and it's been helpful to have someone who's mostly non-technical to bounce explanations off of when I'm getting my head around a new piece of gear.  \r\n\r\nThe piece of gear that I was explaining the other day was something called Mongo DB.  Mongo's parent company is called 10gen, and they landed on the startup scene about 5 years ago or so with their flagship product, Mongo DB.  Mongo is currently the pre-eminent player in the \"NoSQL\" database market.  The NoSQL flavor of databases has come en vogue in the last few years in certain technology sectors, primarily ones that are evolving so quickly that having to slow down to put forethought into your data store and how it's going to be structured might literally be the difference between your whole company suceeding or not.  That whole sentence will make more sense in a minute, but first it'd be helpful to understand how a traditional, \"relational\" database works.\r\n\r\n####The Relational model\r\n\r\nThe relational model of storing data has been around for more than 40 years.  Wikipedia, of course, has a great article - [http://en.wikipedia.org/wiki/Relational_database](http://en.wikipedia.org/wiki/Relational_database) - giving a technical overview, and I wrote my own article 4 years ago while trying to get my own head around the concept - [http://www.ignoredbydinosaurs.com/2009/04/chapter2-databases](http://www.ignoredbydinosaurs.com/2009/04/chapter2-databases).  Wow, that's hilarious reading that article actually, since my \"Railroad Earth setlist database\" example is well underway - [http://www.hobocompanion.org/](http://www.hobocompanion.org/).  So yeah, read that second one for the idiot's guide.\r\n\r\nThe classic example I gave to my mom was that of a common blog.  You have a table for all your posts.  Each post in that table has a row, and each row has something like a numeric ID, and the text of that post.  When you want to read a blog post, the URL in that address bar of your says something to the effect of \"give me post #1\".  Whatever blog hosting software your using then turns around to the database behind it and says \"select everything from the posts table where the ID of the post is 1\".  The database hands back the post, the software renders some HTML out of it and sends it back to your browser.  This is the simplest example of your interacting with a database. \r\n\r\nThe relational model typically comes into play when you visit a blog that has comments.  Now you don't just have a Posts table, but you also have a Comments table.  That Comments table will most likely have the same ID column, and a column called \"body\" or something like that for storing the text of the comment.  However, this table will also have a column called something like \"post_id\", and what gets stuffed in that column is the (you guessed it) ID of the blog post that this comment \"relates\" to.  So now when your reader comes by, the blog software turns around to the database and asks for two things this time - \"select everything from the posts table where the ID of the post is 1\", and then \"select everything from the comments table where the post_id is 1\".  This second \"query\", if you're lucky enough to write something that people respond to, will return a list of comments, an _array_ if you will, that your blog software will then convert to HTML and append to your blog post in the form of the comments section.  Pretty simple, _or is it_?\r\n\r\n####Issues with the relational model\r\n\r\nFor the purposes of this simplistic example, this hopefully isn't that hard to get your head around.  \"But\", you might be wondering, \"does that really make sense to store blog posts over here and comments over there?  They're clearly related.  When are you ever going to be examining a post's comments without wanting that post also?\"  \r\n\r\nVery good.  And this is a prime example of when a \"non-relational\" or \"NoSQL\" database might make a lot of sense.\r\n\r\n####The non-relational model\r\n\r\nLet's stick with the same example, the blog post and comments, but let's think about how to \"model\" this in a non-relational way.  By the way, if you're still with me, you have a deeper technical understanding than 99% of everybody around you.\r\n\r\nThe non-relational data model would look more like a sheet of paper.  In fact, the concept of one entity and all the data that pertains to that one entity is known in Mongo as a \"document\", so truly this is a decent way to think about it.\r\n\r\nThe way that your blogging software interacts with this blog post is theoretically a lot simpler in a non-relational database.  Request comes in, blogging software turns around to Mongo and says \"Please give me back this specific post and everything related to it\", in this case a listing of comments.  **BUT**, that's not all.  Since we're not forced to be too uptight about having to define how the data is structured beforehand, what if we want to tag that post with an arbitrary number of categories?  No problem, stick them on the same document and when blog software says \"gimme everything on Post #1\", the tags, the comments, and any other randomly associated data come back with it.  Your software doesn't need to know ahead of time, you don't need to know ahead of time.  It all just kind of works, provided you know what you're doing on the software level.  \r\n\r\nThis amount of flexibility is what makes Mongo a very popular \"data store\" with quickly moving techonology companies that might be chasing an idea that changes from week to week or day to day.  You don't have to rearchitect your entire system when you discover this particular use case down the road where you need to stick some \"extra data\" on this particular \"thing\".\r\n\r\n####Issues with the non-relational model\r\n\r\nIt seems obvious that for this example a non-relational database makes a lot of sense, but like any useful tool, it has it's limits.\r\n\r\nFor this example, let's use a grocery list.  You can model the grocery list in a lot the same way - a piece of paper, you write the items you want on there.  But let's say, for the purposes of this example, you figure out after a couple of months that you want to keep track of how many loaves of bread you actually bought last year.  Well, with the non-relational model you might literally have to go through every list and count each loaf individually (*simplistic example alert*), whereas had you modeled this in a relational way, you could get that count back almost instantly.  Yes, it'd be a bit more work on the front end - essentially you'd have a Lists table and an Items table.  But, modelled correctly, you'd also have a table in the middle called a \"join table\" that allows you to associate any number of items with any number of lists.  After a while, were you truly the hacker, you could probably write some code that'd predict what you need to put on that list without even having to put it on there yourself, based strictly off of patterns that are easily discernable in a relational database.\r\n\r\nThat's why the Hobo Companion has a relational database behind it.  It's super easy to count how many and which shows each user was at (2000+ shows tagged between about 30 users so far).  It's super easy to count [the number of times they've played Mighty River](http://www.hobocompanion.org/songs/mighty-river \"Mighty River - Railroad Earth\").  It's super easy to count the number of times that I played Mighty River (somewhere around 260 times).  It's super easy to figure out [where in the setlist they typically put Dandelion Wine](http://www.hobocompanion.org/songs/dandelion-wine \"Dandelion Wine - Railroad Earth\") (Either first, or at the end of the first set).  These calculations are far from impossible in a non-relational database, but they are also pretty far from trivial.\r\n\r\nIn situations where you absolutely want to be really uptight about your data and how it's structured - think bank accounts as the classic example - a relational database is absolutely required, not just because it's theoretically better suited for the job, but it's also a \"mature technology\" that's older than I am.  \r\n\r\nThe wonderful point here is that we actually have decent options depending on what it is we are actually trying to do.  Startup hackers love Mongo precisely because it lets you move fast.  You can rock out an application in a weekend without having to spend most of one day setting up the equipment in the studio first.\r\n\r\nThanks for sticking with me.", slug: "explaining-non-relational-databases-my-mom", summary: "I was on the phone with Mom yesterday, and we got to talking about technology - a thing that actually happens fairly frequently.  Being an only kid, she's genuinely interested in everything that I do and it's been helpful to have someone who's mostly non-technical to bounce explanations off of when I'm getting my head around a new piece of gear.  \r\n\r\nThe piece of gear that I was explaining the other day was something called Mongo DB.  Mongo's parent company is called 10gen, and they landed on the startup scene about 5 years ago or so with their flagship product, Mongo DB.", previous_id: nil, published: true, pub_date: "2013-05-17 16:57:41"},
  {title: "Helpful books", body: "This is a little collection of books that I've found helpful over the past few years, ranging from design to development to business to fiction.\r\n\r\n### Ruby/Rails\r\n\r\n* [The Well-Grounded Rubyist](http://amazon.com/dp/1933988657 \"Amazon.com: The Well-Grounded Rubyist (9781933988658): David A. Black: Books\") - Great second programming book.\r\n* [Agile Web Development with Rails](http://amazon.com/dp/1934356549 \"Amazon.com: Agile Web Development with Rails (9781934356548): Sam Ruby, Dave Thomas, David Heinemeier Hansson: Books\")\r\n* [Metaprogramming Ruby](http://amazon.com/dp/1934356476 \"Amazon.com: Metaprogramming Ruby: Program Like the Ruby Pros (9781934356470): Paolo Perrotta: Books\")\r\n* [Learn to Program](http://amazon.com/dp/1934356360 \"Amazon.com: Learn to Program, Second Edition (The Facets of Ruby Series) (9781934356364): Chris Pine: Books\") - Great first programming book.\r\n* [Design Patterns in Ruby](http://amazon.com/dp/0321490452 \"Amazon.com: Design Patterns in Ruby (9780321490452): Russ Olsen: Books\")\r\n\r\n### Drupal\r\n\r\n* [Using Drupal](http://amazon.com/dp/0596515804 \"Amazon.com: Using Drupal (9780596515805): Angela Byron, Addison Berry, Nathan Haug, Jeff Eaton, James Walker, Jeff Robbins: Books\") - Great first Drupal book.\r\n* [Drupal 6 Search Engine Optimization](http://amazon.com/dp/1847198228 \"Amazon.com: Drupal 6 Search Engine Optimization (9781847198228): Benjamin Finklea: Books\") - Great general SEO book with heavy Drupal focus.\r\n* [Pro Drupal Development](http://amazon.com/dp/1430209895 \"Amazon.com: Pro Drupal Development, Second Edition (9781430209898): John K. VanDyk: Books\")\r\n\r\n### General Front End Development / Design / Usability\r\n\r\n* [CSS: the Missing Manual](http://amazon.com/dp/0596802447 \"Amazon.com: CSS: The Missing Manual (9780596802448): David Sawyer McFarland: Books\")\r\n* [Jquery Cookbook](http://amazon.com/dp/0596159773 \"Amazon.com: jQuery Cookbook: Solutions &amp; Examples for jQuery Developers (Animal Guide) (9780596159771): Cody Lindley: Books\")\r\n* [Don't Make Me Think!](http://amazon.com/dp/0321344758 \"Amazon.com: Don&#39;t Make Me Think: A Common Sense Approach to Web Usability, 2nd Edition (9780321344755): Steve Krug: Books\")\r\n* [Web Design for ROI](http://amazon.com/dp/0321489829 \"Amazon.com: Web Design for ROI: Turning Browsers into Buyers &amp; Prospects into Leads (9780321489821): Lance Loveday, Sandra Niehaus: Books\")\r\n* [The Design of Everyday Things](http://amazon.com/dp/0465067107 \"Amazon.com: The Design of Everyday Things (9780465067107): Donald A. Norman: Books\")\r\n\r\n### General Back End Development / Databases\r\n\r\n* [Learning SQL](http://amazon.com/dp/0596520832 \"Amazon.com: Learning SQL (9780596520830): Alan Beaulieu: Books\")\r\n* [Beginning Database Design](http://amazon.com/dp/1590597699 \"Amazon.com: Beginning Database Design: From Novice to Professional (9781590597699): Clare Churcher: Books\")\r\n\r\n### iPhone / Cocoa\r\n\r\n* [Cocoa Programming for OS X](http://amazon.com/dp/0321503619 \"Amazon.com: Cocoa(R) Programming for Mac(R) OS X (3rd Edition) (9780321503619): Aaron Pablo Hillegass: Books\")\r\n* [iPhone SDK Development](http://amazon.com/dp/1934356255 \"Amazon.com: iPhone SDK Development (The Pragmatic Programmers) (9781934356258): Bill Dudney, Christopher Adamson: Books\")\r\n\r\n### General Business / Startup Culture\r\n\r\n* [Founders At Work](http://amazon.com/dp/1430210788 \"Amazon.com: Founders at Work: Stories of Startups&#39; Early Days (Recipes: a Problem-Solution Ap) (9781430210788): Jessica Livingston: Books\")\r\n* [Tribes](http://amazon.com/dp/1591842336 \"Amazon.com: Tribes: We Need You to Lead Us (9781591842330): Seth Godin: Books\")\r\n* [Linchpin](http://amazon.com/dp/1591843162 \"Amazon.com: Linchpin: Are You Indispensable? (9781591843160): Seth Godin: Books\")\r\n* [Blink](http://amazon.com/dp/0316010669 \"Amazon.com: Blink: The Power of Thinking Without Thinking (9780316010665): Malcolm Gladwell: Books\")", slug: "books", summary: "This is a little collection of books that I've found helpful over the past few years, ranging from design to development to business to fiction.\r\n\r\n## Ruby/Rails\r\n\r\n* [The Well-Grounded Rubyist](http://amazon.com/dp/1933988657 \"Amazon.com: The Well-Grounded Rubyist (9781933988658): David A. Black: Books\") - Great second programming book.\r\n* [Agile Web Development with Rails](http://amazon.com/dp/1934356549 \"Amazon.com: Agile Web Development with Rails (9781934356548): Sam Ruby, Dave Thomas, David Heinemeier Hansson: Books\")\r\n* [Metaprogramming Ruby](http://amazon.com/dp/1934356476 \"Amazon.com: Metaprogramming Ruby: Program Like the Ruby Pros (9781934356470): Paolo Perrotta: Books\")\r\n* [Learn to Program](http://amazon.com/dp/1934356360 \"Amazon.com: Learn to Program, Second Edition (The Facets of Ruby Series) (9781934356364): Chris Pine: Books\") - Great first programming book.\r\n* [Design Patterns in Ruby](http://amazon.com/dp/0321490452 \"Amazon.com: Design Patterns in Ruby (9780321490452): Russ Olsen: Books\")\r\n\r\n## Drupal\r\n\r\n* [Using Drupal](http://amazon.com/dp/0596515804 \"Amazon.com: Using Drupal (9780596515805): Angela Byron, Addison Berry, Nathan Haug, Jeff Eaton, James Walker, Jeff Robbins: Books\") - Great first Drupal book.\r\n* [Drupal 6 Search Engine Optimization](http://amazon.com/dp/1847198228 \"Amazon.com: Drupal 6 Search Engine Optimization (9781847198228): Benjamin Finklea: Books\") - Great general SEO book with heavy Drupal focus.\r\n* [Pro Drupal Development](http://amazon.com/dp/1430209895 \"Amazon.com: Pro Drupal Development, Second Edition (9781430209898): John K.", previous_id: nil, published: true, pub_date: "2011-01-03 05:00:00"},
  {title: "Chris Pandolfi IBMA Keynote 2011", body: "Respect, mon.\r\n\r\n<div class=\"video\">\r\n<iframe src=\"http://player.vimeo.com/video/29731282?title=0&amp;byline=0&amp;portrait=0\" width=\"800\" height=\"453\" frameborder=\"0\" webkitAllowFullScreen allowFullScreen></iframe>\r\n</div>\r\n\r\n<p><a href=\"http://vimeo.com/29731282\">Chris Pandolfi IBMA Keynote 2011</a> from <a href=\"http://vimeo.com/user3956258\">Chris Pandolfi</a> on <a href=\"http://vimeo.com\">Vimeo</a>.</p>", slug: "chris-pandolfi-ibma-keynote-2011", summary: "Respect, mon.\r\n\r\n<div class=\"video\">\r\n<iframe src=\"http://player.vimeo.com/video/29731282?title=0&amp;byline=0&amp;portrait=0\" width=\"800\" height=\"453\" frameborder=\"0\" webkitAllowFullScreen allowFullScreen></iframe>\r\n</div>\r\n\r\n<p><a href=\"http://vimeo.com/29731282\">Chris Pandolfi IBMA Keynote 2011</a> from <a href=\"http://vimeo.com/user3956258\">Chris Pandolfi</a> on <a href=\"http://vimeo.com\">Vimeo</a>.</p>", previous_id: nil, published: true, pub_date: "2011-09-29 18:03:02"},
  {title: "Inside Drupal - Hooks", body: "This is the body", slug: "inside-drupal-hooks", summary: "", previous_id: nil, published: false, pub_date: "2016-04-06 19:06:21"},
  {title: "Drupal Paragraphs - what is structured content?", body: "So I gave [a presentation at Drupaldelphia](http://drupaldelphia.org/session/how-structured-content-and-paragraphs-module-reignited-my-drupal-flame) a few weeks ago about the [Paragraphs module](https://www.drupal.org/project/paragraphs).  \r\n\r\nThe Paragraphs module is my favorite Drupal module that I've come across in probably the last 5 years.  It's basically Drupal's implementation of the concept of \"structured content\" - one of those terms that sounds so abstract that you probably feel an unconscious repulsion to even learning more about the idea, but hopefully I can help get you over that.\r\n\r\n---\r\n\r\n### The problem\r\n\r\nThe problem is the dreaded *body field*.  The body field is (historically) basically the dumping ground for everything that is going into a piece of content on the website.  For sites like this blog, made up of 99.8% text, it works fabulously well and I suspect that in the early days of blogging and the internet most content that went into some kind of CMS was modeled in this way.  You're reading a body field right now.  There were undoubtedly some images placed in with the text, but anything really fancy or custom was most likely coded by hand, outside of the CMS.  \r\n\r\nThings went this way for a number of years and as CMSs like Drupal and Wordpress continued to gain popularity and more and more people began to use them to run their websites, more and more \"things\" began to wander into the body field.  I'd very much like to add some images to this post, for example, but it's actually kind of a PITA to do it in a reliable way.  \r\n\r\nOne day some dudes invented a website where the whole world could post and share videos, then they let you embed those videos into other web pages.  So now the body field has to accommodate text, images, and video embeds.\r\n\r\nThe slideshow was born. \"Why can't I put a slideshow into my article?!\" became a battle cry from legions of downtrodden District 12 editors.  \"Imgur lets me create slideshows!\"\r\n\r\n\"Data journalism\" comes along, and with it a thousand fancy infographics from your internal production teams and 3rd party tools alike, distributed via iframes and js snippets and holy shit letting our users embed javascript is suicide, right??\r\n\r\nThe Twitter card embed.  I'll stop there.\r\n\r\nSoundcloud.  Every other media site with their own custom video player.  Imgur. Flickr. Hubspot. Disqus.\r\n\r\n### Some (crappy) solutions\r\n\r\nThis is a problem for a number of reasons.  The most immediate issue that this causes is that unless all your editors know how to write perfect HTML, you're going to be stuck with The Wysiwyg.  Wysiwygs have come a pretty long way in the last couple years (a few of them anyway), but I don't know of any serious Wysiwyg solution out there that is able to keep pace with the number of new \"things\" showing up on the internet.  Our editors want to put these things in their content in a way that will effectively keep them from breaking the site, and it's our job to give that to them somehow.\r\n\r\nThe most evolved solution to this problem is the one that Wordpress came up with, and Jeff Eaton espoused last year in his DrupalCon Talk \"[The Battle for the Body Field](https://www.youtube.com/watch?v=hAIM1eEw-yU)\", basically - shortcodes.  This approach allows for a lot of editor creativity which should be a primary goal of our solution, but puts some guardrails up so that we're not constantly fielding tickets about a broken article.\r\n\r\nSo to recap, here are the most commonly employed solutions to this problem\r\n\r\n- Don't let them put anything in there (Markdown)\r\n- Let them put everything in there (HTML)\r\n- Let them put almost anything in there, but try and keep them from blowing our leg off (shortcodes)\r\n\r\n### And yet\r\n\r\nNone of these addresses a fundamental thing that we should care about - reuse.  Once you put something in the body field, it's essentially in the content roach motel, and it's never checking out.  Your system can't have any awareness of what's inside that field, so unless someone manages to get to exactly that article where you used that image or that tweet, it's never going to be seen again.\r\n\r\nThere is another way though.  Imagine being able to create a feed of images that were used in articles on your site that day.  Imagine being able to grab all the twitter cards that were used in articles that were tagged to Cats.  Or being able to easily add rich, multi-field captions to images without having to bend over backwards.\r\n\r\n### Structured Content\r\n\r\nSo if you take a step back and think about it, a piece of content on your website is often a fairly unstructured piece of work, but it can be broken down into a collection of pieces that are themselves very structured.\r\n\r\nTake an image with caption.  Trying to do this in the Wysiwyg frequently involves adding the caption to either the title or alt attribute and then using javascript to pull that out, build a DOM element out of it, and insert it somewhere in the vicinity of the image.  What happens if you also need an attribution field in addition to the caption, though?  That's the instant things start getting weird, and often we give the editor some unsatisfactory answer and they slink off to solve the issue in some unsatisfactory way.\r\n\r\nBut really, what if we treat that image/caption as it's own entity?  Then you have an entity with an image field and a caption field.  If you want to add an attribution field, that's very easy in this model - you just add an attribution field.  Or a URL.  Or a date.\r\n\r\nSomething with a few more moving parts - how about that image gallery?  Well, another entity for starters, but make it so you can add any number of images to the entity and presto.  Since our system is aware of the kind of entity that you're using here, it's trivial to wrap it in the CSS classes needed to pull off an image gallery.\r\n\r\nSo essentially, rather than your content being something like Title/Summary/Body/Image for this/Image for that you end up with something more like Title/Summary/Collection of individual entities that make up the body of the article.  Those individual entities are pretty easy to manage in themselves, since they're highly predictable.  You just need some mechanism for relating them into the article that they live in and making sure they display in the right order.  Once you do that though, you're not bound strictly by the article model anymore.  You can use those entities in other ways as well.\r\n\r\nThis article got waaaay longer than I intended, so I'll get into Drupal's answer to this issue in the next one.  As far as I know, this concept has existed in the CMS world for a very long time, but Drupal is the only platform that I know of that actually has an implementation of this concept in the Paragraphs module.  Until then.", slug: "drupal-paragraphs-what-is-structured-content", summary: "", previous_id: nil, published: true, pub_date: "2016-04-26 14:42:42"},
  {title: "A Varnish 4 VCL for Drupal 7", body: "This is an interweaving of [Four Kitchens' Varnish 3 VCL](https://fourkitchens.atlassian.net/wiki/display/TECH/Configure+Varnish+3+for+Drupal+7) and [this generic Varnish 4 VCL](https://github.com/mattiasgeniar/varnish-4.0-configuration-templates).\r\n\r\n~~~\r\n\r\nvcl 4.0;\r\n# Based on: https://github.com/mattiasgeniar/varnish-4.0-configuration-templates/blob/master/default.vcl\r\n\r\nimport std;\r\nimport directors;\r\n\r\nbackend server1 { # Define one backend\r\n  .host = \"127.0.0.1\";    # IP or Hostname of backend\r\n  .port = \"8080\";           # Port Apache or whatever is listening\r\n  .max_connections = 300; # That's it\r\n\r\n  .probe = {\r\n    #.url = \"/\"; # short easy way (GET /)\r\n    # We prefer to only do a HEAD /\r\n    .request =\r\n      \"HEAD / HTTP/1.1\"\r\n      \"Host: localhost\"\r\n      \"Connection: close\"\r\n      \"User-Agent: Varnish Health Probe\";\r\n\r\n    .interval  = 5s; # check the health of each backend every 5 seconds\r\n    .timeout   = 1s; # timing out after 1 second.\r\n    .window    = 5;  # If 3 out of the last 5 polls succeeded the backend is considered healthy, otherwise it will be marked as sick\r\n    .threshold = 3;\r\n  }\r\n\r\n  .first_byte_timeout     = 300s;   # How long to wait before we receive a first byte from our backend?\r\n  .connect_timeout        = 5s;     # How long to wait for a backend connection?\r\n  .between_bytes_timeout  = 2s;     # How long to wait between bytes received from our backend?\r\n}\r\n\r\n/*acl purge {\r\n  # ACL we'll use later to allow purges\r\n  \"localhost\";\r\n  \"127.0.0.1\";\r\n  \"::1\";\r\n}*/\r\n\r\n\r\n/*acl editors {\r\n  # ACL to honor the \"Cache-Control: no-cache\" header to force a refresh but only from selected IPs\r\n  \"localhost\";\r\n  \"127.0.0.1\";\r\n  \"::1\";\r\n}*/\r\n\r\nsub vcl_init {\r\n  # Called when VCL is loaded, before any requests pass through it.\r\n  # Typically used to initialize VMODs.\r\n\r\n  new vdir = directors.round_robin();\r\n  vdir.add_backend(server1);\r\n  # vdir.add_backend(server...);\r\n  # vdir.add_backend(servern);\r\n}\r\n\r\nsub vcl_recv {\r\n  # Called at the beginning of a request, after the complete request has been received and parsed.\r\n  # Its purpose is to decide whether or not to serve the request, how to do it, and, if applicable,\r\n  # which backend to use.\r\n  # also used to modify the request\r\n  call ban_list;\r\n  #set req.url = std.tolower(req.url);\r\n\r\n  set req.backend_hint = vdir.backend(); # send all traffic to the vdir director\r\n\r\n  # Normalize the header, remove the port (in case you're testing this on various TCP ports)\r\n  set req.http.Host = regsub(req.http.Host, \":[0-9]+\", \"\");\r\n\r\n  # Normalize the query arguments\r\n  set req.url = std.querysort(req.url);\r\n\r\n  # Allow purging\r\n  if (req.method == \"PURGE\") {\r\n/*    if (!std.ip(req.http.X-Forwarded-For, \"0.0.0.0\") ~ purge) { # purge is the ACL defined at the begining\r\n      # Not from an allowed IP? Then die with an error.\r\n      return (synth(405, \"This IP - \" + std.ip(req.http.X-Forwarded-For, \"0.0.0.0\") + \" is not allowed to send PURGE requests.\"));\r\n    }*/\r\n    # If you got this stage (and didn't error out above), purge the cached result\r\n    return (purge);\r\n  }\r\n\r\n  # Only deal with \"normal\" types\r\n  if (req.method != \"GET\" &&\r\n      req.method != \"HEAD\" &&\r\n      req.method != \"PUT\" &&\r\n      req.method != \"POST\" &&\r\n      req.method != \"TRACE\" &&\r\n      req.method != \"OPTIONS\" &&\r\n      req.method != \"PATCH\" &&\r\n      req.method != \"DELETE\") {\r\n\r\n    return (pipe);\r\n  }\r\n\r\n  if (req.url ~ \"^/status\\.php$\" ||\r\n      req.url ~ \"^/update\\.php$\" ||\r\n      req.url ~ \"^/admin$\" ||\r\n      req.url ~ \"^/admin/.*$\" ||\r\n      req.url ~ \"^/flag/.*$\" ||\r\n      req.url ~ \"^.*/ajax/.*$\" ||\r\n      req.url ~ \"^.*/ahah/.*$\") {\r\n       return (pass);\r\n  }\r\n\r\n  # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)\r\n  if (req.http.Upgrade ~ \"(?i)websocket\") {\r\n    return (pipe);\r\n  }\r\n\r\n  # Drupal's batch mode will behave in a funky manner since all cookies except\r\n  # for the session get stripped out below.  This makes batch fall into \r\n  # op=do_nojs mode, which isn't really needed.  Just get Varnish out of the way.\r\n  if (req.url ~ \"(^/batch)\") {\r\n    return (pipe);\r\n  }\r\n\r\n  # Only cache GET or HEAD requests. This makes sure the POST requests are always passed.\r\n  if (req.method != \"GET\" && req.method != \"HEAD\") {\r\n    return (pass);\r\n  }\r\n\r\n  # Strip hash, server doesn't need it.\r\n  if (req.url ~ \"\\#\") {\r\n    set req.url = regsub(req.url, \"\\#.*$\", \"\");\r\n  }\r\n\r\n  # Strip a trailing ? if it exists\r\n  if (req.url ~ \"\\?$\") {\r\n    set req.url = regsub(req.url, \"\\?$\", \"\");\r\n  }\r\n\r\n  # Some generic cookie manipulation, useful for all templates that follow\r\n  # Remove the \"has_js\" cookie\r\n\r\n  if (req.http.Cookie) {\r\n    # 1. Append a semi-colon to the front of the cookie string.\r\n    # 2. Remove all spaces that appear after semi-colons.\r\n    # 3. Match the cookies we want to keep, adding the space we removed\r\n    #    previously back. (\\1) is first matching group in the regsuball.\r\n    # 4. Remove all other cookies, identifying them by the fact that they have\r\n    #    no space after the preceding semi-colon.\r\n    # 5. Remove all spaces and semi-colons from the beginning and end of the\r\n    #    cookie string.\r\n    set req.http.Cookie = \";\" + req.http.Cookie;\r\n    set req.http.Cookie = regsuball(req.http.Cookie, \"; +\", \";\");   \r\n    set req.http.Cookie = regsuball(req.http.Cookie, \";(SESS[a-z0-9]+|SSESS[a-z0-9]+|NO_CACHE)=\", \"; \\1=\");\r\n    set req.http.Cookie = regsuball(req.http.Cookie, \";[^ ][^;]*\", \"\");\r\n    set req.http.Cookie = regsuball(req.http.Cookie, \"^[; ]+|[; ]+$\", \"\");\r\n \r\n    if (req.http.Cookie == \"\") {\r\n      # If there are no remaining cookies, remove the cookie header. If there\r\n      # aren't any cookie headers, Varnish's default behavior will be to cache\r\n      # the page.\r\n      unset req.http.Cookie;\r\n    }\r\n    else {\r\n      # If there is any cookies left (a session or NO_CACHE cookie), do not\r\n      # cache the page. Pass it on to Apache directly.\r\n      return (pass);\r\n    }\r\n  }\r\n\r\n  if (req.http.Cache-Control ~ \"(?i)no-cache\") {\r\n  #if (req.http.Cache-Control ~ \"(?i)no-cache\" && client.ip ~ editors) { # create the acl editors if you want to restrict the Ctrl-F5\r\n  # http://varnish.projects.linpro.no/wiki/VCLExampleEnableForceRefresh\r\n  # Ignore requests via proxy caches and badly behaved crawlers\r\n  # like msnbot that send no-cache with every request.\r\n    if (! (req.http.Via || req.http.User-Agent ~ \"(?i)bot\" || req.http.X-Purge)) {\r\n      #set req.hash_always_miss = true; # Doesn't seems to refresh the object in the cache\r\n      return(purge); # Couple this with restart in vcl_purge and X-Purge header to avoid loops\r\n    }\r\n  }\r\n\r\n  # Large static files are delivered directly to the end-user without\r\n  # waiting for Varnish to fully read the file first.\r\n  # Varnish 4 fully supports Streaming, so set do_stream in vcl_backend_response()\r\n  if (req.url ~ \"^[^?]*\\.(7z|avi|bz2|flac|flv|gz|mka|mkv|mov|mp3|mp4|mpeg|mpg|ogg|ogm|opus|rar|tar|tgz|tbz|txz|wav|webm|xz|zip)(\\?.*)?$\") {\r\n    unset req.http.Cookie;\r\n    return (hash);\r\n  }\r\n\r\n  # Remove all cookies for static files\r\n  # A valid discussion could be held on this line: do you really need to cache static files that don't cause load? Only if you have memory left.\r\n  # Sure, there's disk I/O, but chances are your OS will already have these files in their buffers (thus memory).\r\n  # Before you blindly enable this, have a read here: https://ma.ttias.be/stop-caching-static-files/\r\n  if (req.url ~ \"^[^?]*\\.(7z|avi|bmp|bz2|css|csv|doc|docx|eot|flac|flv|gif|gz|ico|jpeg|jpg|js|less|mka|mkv|mov|mp3|mp4|mpeg|mpg|odt|otf|ogg|ogm|opus|pdf|png|ppt|pptx|rar|rtf|svg|svgz|swf|tar|tbz|tgz|ttf|txt|txz|wav|webm|webp|woff|woff2|xls|xlsx|xml|xz|zip)(\\?.*)?$\") {\r\n    unset req.http.Cookie;\r\n    return (hash);\r\n  }\r\n\r\n  # Send Surrogate-Capability headers to announce ESI support to backend\r\n  set req.http.Surrogate-Capability = \"key=ESI/1.0\";\r\n\r\n  if (req.http.Authorization) {\r\n    # Not cacheable by default\r\n    return (pass);\r\n  }\r\n\r\n  return (hash);\r\n}\r\n\r\nsub vcl_pipe {\r\n  # Called upon entering pipe mode.\r\n  # In this mode, the request is passed on to the backend, and any further data from both the client\r\n  # and backend is passed on unaltered until either end closes the connection. Basically, Varnish will\r\n  # degrade into a simple TCP proxy, shuffling bytes back and forth. For a connection in pipe mode,\r\n  # no other VCL subroutine will ever get called after vcl_pipe.\r\n\r\n  # Note that only the first request to the backend will have\r\n  # X-Forwarded-For set.  If you use X-Forwarded-For and want to\r\n  # have it set for all requests, make sure to have:\r\n  # set bereq.http.connection = \"close\";\r\n  # here.  It is not set by default as it might break some broken web\r\n  # applications, like IIS with NTLM authentication.\r\n\r\n  # set bereq.http.Connection = \"Close\";\r\n\r\n  # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)\r\n  if (req.http.upgrade) {\r\n    set bereq.http.upgrade = req.http.upgrade;\r\n  }\r\n\r\n  return (pipe);\r\n}\r\n\r\nsub vcl_pass {\r\n  # Called upon entering pass mode. In this mode, the request is passed on to the backend, and the\r\n  # backend's response is passed on to the client, but is not entered into the cache. Subsequent\r\n  # requests submitted over the same client connection are handled normally.\r\n\r\n  # return (pass);\r\n}\r\n\r\n# The data on which the hashing will take place\r\nsub vcl_hash {\r\n  # Called after vcl_recv to create a hash value for the request. This is used as a key\r\n  # to look up the object in Varnish.\r\n\r\n  hash_data(req.url);\r\n\r\n  if (req.http.host) {\r\n    hash_data(req.http.host);\r\n  } else {\r\n    hash_data(server.ip);\r\n  }\r\n\r\n  # hash cookies for requests that have them\r\n  if (req.http.Cookie) {\r\n    hash_data(req.http.Cookie);\r\n  }\r\n}\r\n\r\nsub vcl_hit {\r\n  # Called when a cache lookup is successful.\r\n\r\n  if (obj.ttl >= 0s) {\r\n    # A pure unadultered hit, deliver it\r\n    return (deliver);\r\n  }\r\n\r\n  # https://www.varnish-cache.org/docs/trunk/users-guide/vcl-grace.html\r\n  # When several clients are requesting the same page Varnish will send one request to the backend and place the others on hold while fetching one copy from the backend. In some products this is called request coalescing and Varnish does this automatically.\r\n  # If you are serving thousands of hits per second the queue of waiting requests can get huge. There are two potential problems - one is a thundering herd problem - suddenly releasing a thousand threads to serve content might send the load sky high. Secondly - nobody likes to wait. To deal with this we can instruct Varnish to keep the objects in cache beyond their TTL and to serve the waiting requests somewhat stale content.\r\n\r\n# if (!std.healthy(req.backend_hint) && (obj.ttl + obj.grace > 0s)) {\r\n#   return (deliver);\r\n# } else {\r\n#   return (miss);\r\n# }\r\n\r\n  # We have no fresh fish. Lets look at the stale ones.\r\n  if (std.healthy(req.backend_hint)) {\r\n    # Backend is healthy. Limit age to 10s.\r\n    if (obj.ttl + 10s > 0s) {\r\n      #set req.http.grace = \"normal(limited)\";\r\n      return (deliver);\r\n    } else {\r\n      # No candidate for grace. Fetch a fresh object.\r\n      return(miss);\r\n    }\r\n  } else {\r\n    # backend is sick - use full grace\r\n      if (obj.ttl + obj.grace > 0s) {\r\n      #set req.http.grace = \"full\";\r\n      return (deliver);\r\n    } else {\r\n      # no graced object.\r\n      return (miss);\r\n    }\r\n  }\r\n\r\n  # fetch & deliver once we get the result\r\n  return (miss); # Dead code, keep as a safeguard\r\n}\r\n\r\nsub vcl_miss {\r\n  # Called after a cache lookup if the requested document was not found in the cache. Its purpose\r\n  # is to decide whether or not to attempt to retrieve the document from the backend, and which\r\n  # backend to use.\r\n\r\n  return (fetch);\r\n}\r\n\r\n# Handle the HTTP request coming from our backend\r\nsub vcl_backend_response {\r\n  # Called after the response headers has been successfully retrieved from the backend.\r\n  # set beresp.http.X-Backend = beresp.backend.name;\r\n\r\n  # Pause ESI request and remove Surrogate-Control header\r\n  if (beresp.http.Surrogate-Control ~ \"ESI/1.0\") {\r\n    unset beresp.http.Surrogate-Control;\r\n    set beresp.do_esi = true;\r\n  }\r\n\r\n  # Enable cache for all static files\r\n  # The same argument as the static caches from above: monitor your cache size, if you get data nuked out of it, consider giving up the static file cache.\r\n  # Before you blindly enable this, have a read here: https://ma.ttias.be/stop-caching-static-files/\r\n  if (bereq.url ~ \"^[^?]*\\.(7z|avi|bmp|bz2|css|csv|doc|docx|eot|flac|flv|gif|gz|ico|jpeg|jpg|js|less|mka|mkv|mov|mp3|mp4|mpeg|mpg|odt|otf|ogg|ogm|opus|pdf|png|ppt|pptx|rar|rtf|svg|svgz|swf|tar|tbz|tgz|ttf|txt|txz|wav|webm|webp|woff|woff2|xls|xlsx|xml|xz|zip)(\\?.*)?$\") {\r\n    unset beresp.http.set-cookie;\r\n  }\r\n\r\n  # Large static files are delivered directly to the end-user without\r\n  # waiting for Varnish to fully read the file first.\r\n  # Varnish 4 fully supports Streaming, so use streaming here to avoid locking.\r\n  if (bereq.url ~ \"^[^?]*\\.(7z|avi|bz2|flac|flv|gz|mka|mkv|mov|mp3|mp4|mpeg|mpg|ogg|ogm|opus|rar|tar|tgz|tbz|txz|wav|webm|xz|zip|csv)(\\?.*)?$\") {\r\n    unset beresp.http.set-cookie;\r\n    set beresp.do_stream = true;  # Check memory usage it'll grow in fetch_chunksize blocks (128k by default) if the backend doesn't send a Content-Length header, so only enable it for big objects\r\n    set beresp.do_gzip   = false;   # Don't try to compress it for storage\r\n  }\r\n\r\n  # Sometimes, a 301 or 302 redirect formed via Apache's mod_rewrite can mess with the HTTP port that is being passed along.\r\n  # This often happens with simple rewrite rules in a scenario where Varnish runs on :80 and Apache on :8080 on the same box.\r\n  # A redirect can then often redirect the end-user to a URL on :8080, where it should be :80.\r\n  # This may need finetuning on your setup.\r\n  #\r\n  # To prevent accidental replace, we only filter the 301/302 redirects for now.\r\n  if (beresp.status == 301 || beresp.status == 302) {\r\n    set beresp.http.Location = regsub(beresp.http.Location, \":[0-9]+\", \"\");\r\n  }\r\n\r\n  # Set 2min cache if unset for static files\r\n  if (beresp.ttl <= 0s || beresp.http.Set-Cookie || beresp.http.Vary == \"*\") {\r\n    set beresp.ttl = 120s; # Important, you shouldn't rely on this, SET YOUR HEADERS in the backend\r\n    set beresp.uncacheable = true;\r\n    return (deliver);\r\n  }\r\n\r\n  # Don't cache 50x responses\r\n  if (beresp.status == 500 || beresp.status == 502 || beresp.status == 503 || beresp.status == 504) {\r\n    return (abandon);\r\n  }\r\n\r\n  # Allow stale content, in case the backend goes down.\r\n  # make Varnish keep all objects for 6 hours beyond their TTL\r\n  set beresp.grace = 6h;\r\n\r\n  return (deliver);\r\n}\r\n\r\n# The routine when we deliver the HTTP request to the user\r\n# Last chance to modify headers that are sent to the client\r\nsub vcl_deliver {\r\n  # Called before a cached object is delivered to the client.\r\n\r\n  if (obj.hits > 0) { # Add debug header to see if it's a HIT/MISS and the number of hits, disable when not needed\r\n    set resp.http.X-Cache = \"HIT\";\r\n  } else {\r\n    set resp.http.X-Cache = \"MISS\";\r\n  }\r\n\r\n  # Please note that obj.hits behaviour changed in 4.0, now it counts per objecthead, not per object\r\n  # and obj.hits may not be reset in some cases where bans are in use. See bug 1492 for details.\r\n  # So take hits with a grain of salt\r\n  set resp.http.X-Cache-Hits = obj.hits;\r\n\r\n  # Remove some headers: PHP version\r\n  unset resp.http.X-Powered-By;\r\n\r\n  # Remove some headers: Apache version & OS\r\n  unset resp.http.Server;\r\n  unset resp.http.X-Drupal-Cache;\r\n  unset resp.http.X-Varnish;\r\n  unset resp.http.Via;\r\n  unset resp.http.Link;\r\n  unset resp.http.X-Generator;\r\n\r\n  return (deliver);\r\n}\r\n\r\nsub vcl_purge {\r\n  # Only handle actual PURGE HTTP methods, everything else is discarded\r\n  if (req.method != \"PURGE\") {\r\n    # restart request\r\n    set req.http.X-Purge = \"Yes\";\r\n    return(restart);\r\n  }\r\n}\r\n\r\nsub vcl_synth {\r\n  if (resp.status == 720) {\r\n    # We use this special error status 720 to force redirects with 301 (permanent) redirects\r\n    # To use this, call the following from anywhere in vcl_recv: return (synth(720, \"http://host/new.html\"));\r\n    set resp.http.Location = resp.reason;\r\n    set resp.status = 301;\r\n    return (deliver);\r\n  } elseif (resp.status == 721) {\r\n    # And we use error status 721 to force redirects with a 302 (temporary) redirect\r\n    # To use this, call the following from anywhere in vcl_recv: return (synth(720, \"http://host/new.html\"));\r\n    set resp.http.Location = resp.reason;\r\n    set resp.status = 302;\r\n    return (deliver);\r\n  }\r\n\r\n  return (deliver);\r\n}\r\n\r\n\r\nsub vcl_fini {\r\n  # Called when VCL is discarded only after all requests have exited the VCL.\r\n  # Typically used to clean up VMODs.\r\n\r\n  return (ok);\r\n}\r\n\r\n~~~", slug: "varnish-4-vcl-drupal-7", summary: "", previous_id: nil, published: true, pub_date: "2016-04-27 08:39:27"},
  {title: "KaBOOM!", body: ">  As business models go, there are currently two dominant ones: either people like your product enough to purchase it or they don’t care enough to buy it but will overlook its deficiencies if it’s “free” in exchange for their personal browsing and purchasing info sold to advertisers. The former model is Apple’s, the latter is Google’s.\r\n>\r\n>  Apple sells emotional experiences. The price is what users pay to be delighted by Apple’s stream of innovations and to be free of the lowest common denominator burdens and the pervasive harvesting of their personal info.\r\n>\r\n>  Google sells eyeballs. To be more precise, the clickstream attached to those eyeballs. Thus scale, indeed dominance, is absolutely crucial to Google’s model.\r\n\r\n~ via [counternotions](http://counternotions.com/2010/12/28/the-unbearable-inevitability-of-being-android-1995/ \"The Unbearable Inevitability of Being Android, 1995 &laquo; counternotions\")", slug: "kaboom", summary: ">  As business models go, there are currently two dominant ones: either people like your product enough to purchase it or they don’t care enough to buy it but will overlook its deficiencies if it’s “free” in exchange for their personal browsing and purchasing info sold to advertisers. The former model is Apple’s, the latter is Google’s.\r\n>\r\n>  Apple sells emotional experiences. The price is what users pay to be delighted by Apple’s stream of innovations and to be free of the lowest common denominator burdens and the pervasive harvesting of their personal info.\r\n>\r\n>  Google sells eyeballs.", previous_id: nil, published: true, pub_date: "2010-12-30 05:00:00"},
  {title: "A Drupal Views epiphany", body: "There's a question currently on r/drupal that asks the question \"What's the best way to get your head around Views?\".  There are many excellent answers -- \"study the Views API file\", \"get to know the UI \", \"fuck Views because it writes poor queries\" -- but none of them, to me, really answer the question.\r\n\r\nViews, for the uninitiated, is the open source, community contributed module that is the reason Drupal is the powerhouse that it is currently.  Yes, there are many excellent Drupal features that have contributed to it's adoption across the CMS marketplace, but there is no other contrib module that increases Drupal's capabilities so vastly as Views.  Views is \"a query builder\".  That means lots of things, since almost any modern CMS is simply a front end to a database somewhere, and [the very act of clicking any button on almost any website means that a database is being queried somewhere in the distance](/2009/04/chapter2-databases).  Thus, a \"query builder\" is a pretty cool tool to have at your disposal.  You can contort almost any conceivable feature out of Views if you really know your way around.  *But how do you learn your way around?*  To me, that is what the author of the question was getting at.\r\n\r\nWell, if you came to Drupal the way I did - trial and bumbling error, and not via a CS program somewhere - then you might not be surprised to learn that a \"View\" is a standard feature in most RDBMSs - [Wikipedia has a great entry](https://en.wikipedia.org/wiki/View_(SQL)).  In essence, a \"view\" in SQL is a predefined query.  Views allow a DBA (database administrator) to build up a more complex query that they can then hand off to a \"normal\" user to use in day to day operations.  Maybe this query has a several joins and numerous where clauses that are tough to remember but never change, but the business user needs to supply one varying parameter to get the results they want.  Another use case might be limiting access to the DB by granting users access to the views and not to low level querying of the DB (for security reasons).  Thus, the seemingly awkwardly named \"Views module\" actually does exactly what it says it does, if you know the terminology.\r\n\r\nThus, the best way to learn Views is to learn SQL itself.  Views' strange terminology (contextual filters, relationships, etc) are just different names for standard query features in MySQL or any other relational database system.  Once you start poking around the standard Drupal DB schema, and start stepping through how a simple Drupal View is put together, you can start to understand the deeper mechanics of how the code works under the hood. \r\n\r\nWhen beginning with a new view, the first question you are asked is \"Show _______ of type _____ sorted by _______\".  This is the bones of a very simple `select` query.  Show _____ is asking which table in the DB is going to be the base of this query, most often it'll stay on the default \"content\", which means the `node` table.  Of type _____ says `where type = whatever` and sort by _____ does just that.  So you end up with something like ...\r\n\r\n~~~\r\nSELECT * FROM node WHERE type = article ORDER BY date DESC\r\n~~~\r\n\r\n... and you're off to the races.  The rest of the Views wizard allows you to refine this query to (hopefully) pull out what you want to display on the site.\r\n\r\nThe key to learning Views, therefore, is learning the Drupal database structure in general, and how to query it in straight SQL to get what you want.  Once you've wrapped your head around how to join the `users` table to the `role` table via the `users_roles` table in order to pull out every user who is an admin via the mysql command line, it becomes much easier to translate this into a much quicker job in the Views UI.  Soon you'll notice that the `blocks`, `users`, and `comments` tables are all plural while `node`, `contact`, and `role` are all singular, and then you'll be well down the path of a deeper understanding of what makes Drupal such an absurdly powerful CMS.", slug: "drupal-views-epiphany", summary: "Views, for the uninitiated, is the open source, community contributed module that is the reason Drupal is the powerhouse that it is currently.", previous_id: nil, published: true, pub_date: "2013-12-27 15:35:00"},
  {title: "Platform.sh from scratch - Laravel, Redis, and the Platform CLI", body: "Hello, and welcome back to Platform.sh from scratch.  In this post we'll be reconfiguring your Laravel app that we've been working on in the previous posts to use Redis as a cache and session store, rather than the default file store.  We'll also install the Platform CLI and use it to SSH into our application container and get a feel for the layout of the filesystem after it's deployed to its environment.\r\n\r\nBut first, I'd like to have a brief chat about Git...\r\n\r\n<!--more-->\r\n\r\n---\r\n\r\n### Using the tools the way they're meant to be used\r\n\r\nOk, we've gotten this far and we're feeling good about life, but we aren't really doing anything that mindblowing yet.  We've spent two posts configuring an app to run on a new hosting vendor, whooptidoo.  Now, don't get me wrong - we specified our entire project's infrastructure in code.  We are free to change around our project's infrastructure however we see fit, without having to file a ticket and wait for support to change it for us.  And yet, we're still working on the Git branch that represents the production state of our website, aka \"Master\".  \r\n\r\nBefore we continue on, let's put a little insurance in place, courtesy of Git and Platform.sh.\r\n\r\nGo to your project admin screen and click the \"Branch\" button, which is the orange one in the top right.  Name this new branch \"dev\", or really whatever you prefer.\r\n\r\n![Dat Branch Button](https://www.ignoredbydinosaurs.com/uploads/ScreenFlow.gif \"Using the tools correctly...\")\r\n\r\nNow say this out loud - \r\n\r\n- I will never push straight to master again\r\n- I will never push straight to master again\r\n- I will never push straight to master again\r\n\r\nI'm serious.  This is important.  You may have worked with Git branches before, and you might be familiar with the stress saving benefits of using them, but you've probably never worked with a hosting vendor who makes it so dead simple to really use them in your day to day development work.  In fact, when I first started this job I told people that I worked for a hosting vendor.  Now that I understand the power of the tools that we provide I say \r\n\r\n> Platform.sh is a software company that builds tools to make your job as a developer or web application owner easier and less stressful.  We also happen to host the sites with which you use our tools.\r\n\r\nNow that you've created that branch at Platform.sh you have a byte for byte copy of your master environment, complete with web accessible URL.  Any work that you do from now on will land in that `dev` branch before it gets merged into `master`.  In this way you'll be able to fully QA and test out new changes before deploying them to production.\r\n\r\nThis branch only exists at Platform.sh for now, so create and checkout a local `dev` branch to continue on.\r\n\r\n`git checkout -b dev`\r\n\r\n### A new Redis service!\r\n\r\nSo far we haven't actually built any logic into this application, nor have we even activated Laravel's built in user authentication feature, so let's go ahead and do that.  Following along with the [Laravel docs](https://laravel.com/docs/master/authentication), run this artisan command locally to scaffold out the files that are required.\r\n\r\n```\r\nphp artisan make:auth\r\n```\r\n\r\nYou can run the migration locally with `php artisan migrate` but you'll also want to add this to the bottom of your `.platform.app.yaml` file -\r\n\r\n```yaml\r\nhooks:\r\n  deploy: |\r\n    php artisan migrate --force\r\n```\r\n\r\nPer the previous post, this will run the database migrations for you when you deploy your app on Platform.sh.  At this point you can add, commit, and push to Platform.sh and experience the joy of having bona fide user auth in just a few minutes.  Thanks Taylor!\r\n\r\nNow that you've committed that, let's head back over to the `config` folder and switch from using the default `file` session store in favor of the Redis store.  At the top of `config/session.php`, change the `SESSION_DRIVER` setting from `file` to `redis`.  As long as we're at it, let's also go to `config/cache.php` and change the default `CACHE_DRIVER` setting to `redis` as well.  Now let's set up your app to use Redis.\r\n\r\nIn your `.platform/services.yaml` file you're going to add a new Redis service - \r\n\r\n```yaml\r\nrediscache:\r\n    type: redis:3.0\r\n```\r\n\r\nand in your `.platform.app.yaml` file we're going to add that new service to the `relationships` section - \r\n\r\n```yaml\r\nrelationships:\r\n  database: \"pgsql:postgresql\"\r\n  redis: \"rediscache:redis\" # this is new!\r\n```\r\n\r\nThis is all that's required on our end to add a new service to your project, but you'll need to \"enhance\" your app just a bit to make use of it.  In the previous post we added to the top of the `config/database.php` file to enable your app to find the Postgres database that we're using.  That file also contains the configuration for Redis, so go there now and change this - \r\n\r\n```php\r\n$config = new Platformsh\\ConfigReader\\Config();\r\n\r\nif ($config->isAvailable()){\r\n    $pltrels = $config->relationships;\r\n    $database = $pltrels['database'][0];\r\n    putenv(\"DB_CONNECTION={$database['scheme']}\");\r\n    putenv(\"DB_HOST={$database['host']}\");\r\n    putenv(\"DB_PORT={$database['port']}\");\r\n    putenv(\"DB_DATABASE={$database['path']}\");\r\n    putenv(\"DB_USERNAME={$database['username']}\");\r\n    putenv(\"DB_PASSWORD={$database['password']}\");\r\n}\r\n```\r\n\r\nto this - \r\n\r\n```php\r\n$config = new Platformsh\\ConfigReader\\Config();\r\n\r\nif ($config->isAvailable()){\r\n    $pltrels = $config->relationships;\r\n    $database = $pltrels['database'][0];\r\n    putenv(\"DB_CONNECTION={$database['scheme']}\");\r\n    putenv(\"DB_HOST={$database['host']}\");\r\n    putenv(\"DB_PORT={$database['port']}\");\r\n    putenv(\"DB_DATABASE={$database['path']}\");\r\n    putenv(\"DB_USERNAME={$database['username']}\");\r\n    putenv(\"DB_PASSWORD={$database['password']}\");\r\n    if(isset($pltrels['redis'])) {\r\n        $redis = $pltrels['redis'][0];\r\n        putenv(\"REDIS_HOST={$redis['host']}\");\r\n        putenv(\"REDIS_PORT={$redis['port']}\");\r\n    };\r\n}\r\n```\r\n\r\nThat is all that's required to enable your app to be able to use the Redis service in your Platform.sh environment.  Add, commit, and push!\r\n\r\n`git push platform dev`\r\n\r\nWhile that's building, let's install [the Platform CLI](https://docs.platform.sh/overview/cli.html).\r\n\r\n---\r\n\r\n### The Platform CLI\r\n\r\nAs the docs say, \"the CLI is the official tool to use and manage your Platform.sh projects directly from your terminal. Anything you can do within the Web Interface can be done with the CLI.\"  Fun fact, the project management interface is actually an AngularJS application, and both it and the CLI interact with the same set of APIs on the backend to manage your project.  Almost anything that you can do from the UI you can also do from the CLI, and vice versa.\r\n\r\nFollow the instructions [in this section](https://docs.platform.sh/overview/cli.html#how-do-i-get-it) to install the CLI, and do make sure you read the rest of that docs page for some more background information.\r\n\r\n### Logs!\r\n\r\nLet's use the newly installed CLI to check out some logs, since logging is crucial to knowing what's going on inside not just your application but also the environment in which it's running.  Running `platform logs` will give you several options for which log you'd like to inspect - \r\n\r\n```\r\n> platform logs\r\nEnter a number to choose a log:\r\n  [0] access\r\n  [1] deploy\r\n  [2] error\r\n  [3] php.access\r\n  [4] php\r\n```\r\n\r\nLet's check out the `deploy.log` and see what goes on in there - \r\n\r\n```\r\n[2016-10-03 17:23:01.523855] Launching hook 'php artisan migrate --force'.\r\n\r\nMigration table created successfully.\r\nMigrated: 2014_10_12_000000_create_users_table\r\nMigrated: 2014_10_12_100000_create_password_resets_table\r\n```\r\n\r\nSo the deploy log is actually the stdout output from whatever you have in your `.platform.app.yaml` file in the `hooks.deploy` section.  Pretty handy for debugging as you're building up new steps.  By default, the `platform logs` command will just `cat` the entire file out to your screen, but you can also pass the name of the log that you want to access as an argument to the command, and pass it a flag `--tail` if you want to tail the log, like so - \r\n\r\n```\r\n> platform logs --help\r\nCommand: environment:logs\r\nAliases: log\r\nDescription: Read an environment's logs\r\n\r\nUsage:\r\n platform environment:logs [--lines LINES] [--tail] [-p|--project PROJECT] [--host HOST] [-e|--environment ENVIRONMENT] [-A|--app APP] [--] [<type>]\r\n\r\nArguments:\r\n  type                           The log type, e.g. \"access\" or \"error\"\r\n\r\nOptions:\r\n      --lines=LINES              The number of lines to show [default: 100]\r\n      --tail                     Continuously tail the log\r\n  -p, --project=PROJECT          The project ID\r\n      --host=HOST                The project's API hostname\r\n  -e, --environment=ENVIRONMENT  The environment ID\r\n  -A, --app=APP                  The remote application name\r\n  -h, --help                     Display this help message\r\n  -q, --quiet                    Do not output any message\r\n  -V, --version                  Display this application version\r\n  -y, --yes                      Answer \"yes\" to all prompts; disable interaction\r\n  -n, --no                       Answer \"no\" to all prompts\r\n  -v|vv|vvv, --verbose           Increase the verbosity of messages\r\n\r\nExamples:\r\n Display a choice of logs that can be read:\r\n   platform environment:logs\r\n\r\n Read the deploy log:\r\n   platform environment:logs deploy\r\n\r\n Read the access log continuously:\r\n   platform environment:logs access --tail\r\n\r\n Read the last 500 lines of the cron log:\r\n   platform environment:logs cron --lines 500\r\n```\r\n\r\n### Merging\r\n\r\nSo your dev brnach should be done building by now.  Check out that everything is working the way that you expect, and if it is, let's merge the dev branhc into master.  This will constitute a production deployment.  You can either click the \"Merge\" button in your project admin UI, or you can run this from the CLI - `platform merge`.  This will give you some interactive output so you can confirm that you're merging into the environment that you want.\r\n\r\nOne last trick for now - run `platform ssh` from the root of your project.  Sure enough, this will SSH you into your application's PHP container, so you can get a feel for what goes on in there.  A few tips - \r\n\r\n- The root of the application will be `/app` and the user will be `web`.\r\n- Those very same logs can be found at `/var/log`, just like normal!\r\n- You can check out the generated Nginx config file at the usual location as well - `/etc/nginx/nginx.conf`.  This can be *very* useful for debugging complex configurations in your `.platform.app.yaml` file.\r\n- You can get a list of running processes the same as normal too - `top`.  You'll see that there's not really anything going on in there beyond what your app needs to run, since OS level processes are not running in your LXC container.\r\n- Every app container has a Java executable.  There be dragons, but you could theoretically whip up some fairly complex setups with Java dependencies if you ever needed to.\r\n\r\n---\r\n\r\nThat concludes this post, and the series!  We'll dive into other features, but with what you've learned in the past 3 posts you should have about 90% of what you need to orient yourself within our product.", slug: "laravel-redis-platformsh-cli", summary: "", previous_id: 298, published: true, pub_date: "2016-10-18 16:16:17"},
  {title: "After the age of scarcity", body: "I was listening to RadioLab the other evening during the WNYC pledge drive.  During the part of the show in which they were actually driving pledges they announced one of those perks for donors of a certain level, I think they called them \"lab partners\".  It entitles you to some stuff, some interactivity with RadioLab producers, and the obligatory \"exclusive content\".  The very first thing that popped in my head was -\r\n\r\n<em>I'm tired of content</em>\r\n\r\nI got to thinking.  Commerce and economics.  Supply and demand.  Scarcity.\r\n\r\nTake music - music was once a thing that could only be experienced live.  The recording era ended all of that and ushered in a successful business model that had a good run of 80 years or so by not only increasing the supply of music to people, but by exponentially increasing the demand.  Previously if you wanted to hear Beethoven's music you needed to go to the symphony to hear it, but now you could put on a record and listen to it.  Not only that, but after the performance had ended you could put on some Pink Floyd, and after that whatever else.  You weren't confined to listening to music once a day (or once a month), you could basically listen to it all the time.\r\n\r\nBut, the commerce of the business was still driven by scarcity since after all, you still needed a record and a record player.  You still had to go down to the store to buy the record, if it was even available yet.  Records could be released on a date, remember that?  Now what?\r\n\r\nRecords are routinely leaked on the internet and unlike a physical resource that leaks out of something, the instant something digital \"leaks\" onto the internet the supply will forevermore outweigh demand.  How do you build a business around that?\r\n\r\nI've been pondering this for as long as anyone and I now think that \"exclusive content\" completely misses the point.  I don't give a rip about exclusive content because there's no such thing.  Trying to create this impression of scarcity to stoke demand is pointless because there's an endless wealth of other content that's free right now.  Don't even demean your customers or fans with it, because it only means that <strong>they</strong> will have to jump through a hoop to engage with it.  Everybody else will be casually engaging with the free stuff at their convenience.  <em>If you're lucky.</em>\r\n\r\nIf you're lucky you will have patrons, not customers.  Customers barely exist in the creative world now.", slug: "after-age-scarcity", summary: "I was listening to RadioLab the other evening during the WNYC pledge drive.  During the part of the show in which they were actually driving pledges they announced one of those perks for donors of a certain level, I think they called them \"lab partners\".  It entitles you to some stuff, some interactivity with RadioLab producers, and the obligatory \"exclusive content\".  The very first thing that popped in my head was -\r\n\r\n<em>I'm tired of content</em>\r\n\r\nI got to thinking.  Commerce and economics.  Supply and demand.  Scarcity.\r\n\r\n", previous_id: nil, published: true, pub_date: "2012-05-24 12:53:06"},
  {title: "The thing about Rails, Drupal", body: "<p>So here I go again.  </p>\r\n\r\n<p>I&#39;ve written at length on this blog over the years about Drupal.  It&#39;s a great tool for getting things done right now.  It&#39;s seen a huge uptake over the last couple years among government agencies and educational institutions, so being versed in Drupal development is a good career bet at the moment, meaning over the next couple years.</p>\r\n\r\n<p>In the longer term though, I see it as pretty shaky and here&#39;s why.</p>\r\n\r\n<p>Drupal&#39;s raison d&#39;etre is that non-technical users (meaning - people who aren&#39;t programmers) can build fairly complex sites without writing a lick of code.  It has seen massive growth, mainly because the fact that websites are actually computer applications with which users interact is a fact that is really just dawning on the majority of people who use the internet and/or need a website for their business.  Most people don&#39;t have CS degrees, but <em>every</em> business needs a website.  Thus, they either turn to someone who knows how to build websites, or they hook up with GoDaddy and do a one-click install of Wordpress.  </p>\r\n\r\n<p>However...</p>\r\n\r\n<p>I think the world at large is rapidly getting used to the idea of writing code, and the proportion of people out there who are at least somewhat comfortable enough with that idea to hack together their idea is growing.  And their idea might not be a good candidate for a Drupal site.  The other thing about Drupal is that whatever your idea is, you can probably get pretty close without writing code, but chances are high that it&#39;s not going to be exactly what you want without writing some code (or hiring someone to write some code).  And at that point, you either settle for something that isn&#39;t what you want or you teach yourself to write some code.  And after you get comfortable with writing code, you start to wonder why you are dealing with all of this Drupal overhead that you didn&#39;t ask for in the first place.  And some time after that you might find a language like Ruby, that makes infinite more sense to me than PHP, and looks a hell of a lot prettier to boot.  And soon after that you might find it hard to get excited about Drupal work, because overriding other people&#39;s code is way less fun than writing your own to begin with, and that&#39;s the vast majority of working with Drupal code, at least form the backend.</p>\r\n", slug: "thing-about-rails-drupal", summary: "    <p>So here I go again.  </p>\r\n\r\n<p>I&#39;ve written at length on this blog over the years about Drupal.  It&#39;s a great tool for getting things done right now.  It&#39;s seen a huge uptake over the last couple years among government agencies and educational institutions, so being versed in Drupal development is a good career bet at the moment, meaning over the next couple years.</p>\r\n\r\n<p>In the longer term though, I see it as pretty shaky and here&#39;s why.</p>", previous_id: nil, published: false, pub_date: "2012-06-14 05:00:00"},
  {title: "Random post professing love for my Macintosh.", body: "<p>So long story short - I&#39;ve been doing this thing a few years, I&#39;ve learned a few tricks and it seems like every single new developer trick I learn about is already set up in the Mac for me.</p>\r\n\r\n<p>I just learned about Apache Benchmark.  If you don&#39;t know, Google it. It lets you ding your webserver with 100 or 100,000 requests to see how it responds under pressure.  It&#39;s really cool and really simple.</p>\r\n\r\n<h3>Please don&#39;t do this (more than once).</h3>\r\n\r\n<pre><code>ab -n 100 -c 5 http://www.johnnygrubb.com/\r\n</code></pre>\r\n\r\n<p>That means, hit my server 100 times, 5 connections at a time on the front page. Running this from the same server that the site is hosted on skips the network, which means you really are just testing the response time of the application.</p>\r\n\r\n<pre><code>This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;\r\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\r\nLicensed to The Apache Software Foundation, http://www.apache.org/\r\n\r\nBenchmarking www.johnnygrubb.com (be patient).....done\r\n\r\n\r\nServer Software:        nginx/1.2.1\r\nServer Hostname:        www.johnnygrubb.com\r\nServer Port:            80\r\n\r\nDocument Path:          /\r\nDocument Length:        15489 bytes\r\n\r\nConcurrency Level:      5\r\nTime taken for tests:   0.454 seconds\r\nComplete requests:      100\r\nFailed requests:        0\r\nWrite errors:           0\r\nTotal transferred:      1623300 bytes\r\nHTML transferred:       1548900 bytes\r\nRequests per second:    220.29 [#/sec] (mean)\r\nTime per request:       22.697 [ms] (mean)\r\nTime per request:       4.539 [ms] (mean, across all concurrent requests)\r\nTransfer rate:          3492.19 [Kbytes/sec] received\r\n\r\nConnection Times (ms)\r\n              min  mean[+/-sd] median   max\r\nConnect:        0    0   0.1      0       0\r\nProcessing:     8   21  31.5     12     209\r\nWaiting:        8   21  31.5     12     208\r\nTotal:          8   21  31.5     12     209\r\n\r\nPercentage of the requests served within a certain time (ms)\r\n  50%     12\r\n  66%     14\r\n  75%     16\r\n  80%     17\r\n  90%     41\r\n  95%     54\r\n  98%    190\r\n  99%    209\r\n 100%    209 (longest request)\r\n</code></pre>\r\n\r\n<p>I&#39;ll let you decipher what all this means, but that&#39;s no caching - DB calls and page builds for every request.  Nginx is barely opened up, I have one worker process up.  You should see it when I turn page caching on, but I&#39;m leaving it off for now. Running this from here at home gives me </p>\r\n\r\n<pre><code>Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\r\nLicensed to The Apache Software Foundation, http://www.apache.org/\r\n\r\nBenchmarking www.johnnygrubb.com (be patient).....done\r\n\r\n\r\nServer Software:        nginx/1.2.1\r\nServer Hostname:        www.johnnygrubb.com\r\nServer Port:            80\r\n\r\nDocument Path:          /\r\nDocument Length:        15489 bytes\r\n\r\nConcurrency Level:      5\r\nTime taken for tests:   70.142 seconds\r\nComplete requests:      100\r\nFailed requests:        0\r\nWrite errors:           0\r\nTotal transferred:      1629080 bytes\r\nHTML transferred:       1553936 bytes\r\nRequests per second:    1.43 [#/sec] (mean)\r\nTime per request:       3507.124 [ms] (mean)\r\nTime per request:       701.425 [ms] (mean, across all concurrent requests)\r\nTransfer rate:          22.68 [Kbytes/sec] received\r\n\r\nConnection Times (ms)\r\n              min  mean[+/-sd] median   max\r\nConnect:       28 2923 1651.5   2810   12004\r\nProcessing:     0  535 658.8    320    2739\r\nWaiting:        0    5  21.9      0     153\r\nTotal:        375 3457 1638.2   3309   12005\r\n\r\nPercentage of the requests served within a certain time (ms)\r\n  50%   3309\r\n  66%   3836\r\n  75%   3990\r\n  80%   4326\r\n  90%   4884\r\n  95%   6387\r\n  98%   9240\r\n  99%  12005\r\n 100%  12005 (longest request)\r\n</code></pre>\r\n\r\n<p>That&#39;s how long my internet connection takes to move 100 connections.  Anyway, the point is - I had to install that on my server but only knew about it in the first place because it was already installed on this Mac laptop that I bought in 2008.</p>\r\n\r\n<p>I bought this 2GB laptop 4 years ago.  It was the last big thing I ever will buy with a credit card.  I just put a SSD in it over the weekend, and it&#39;s gone from being almost unbearably slow to the fastest damn computer I&#39;ve ever used in my life.  I haven&#39;t installed anything except the tools I need to do my job.  No iTunes.  Not importing my mail.  I need Spotify to work, so I installed that.  Honestly, unless Apple&#39;s new commitment to yearly major OS updates screws me or it just melts from use, I don&#39;t see myself buying another laptop for at least another few years.</p>\r\n\r\n<p>By the way, I&#39;m sure you could melt my server if you really wanted to.  <em>Please don&#39;t.</em></p>\r\n", slug: "random-post-professing-love-my-macintosh", summary: "    <p>So long story short - I&#39;ve been doing this thing a few years, I&#39;ve learned a few tricks and it seems like every single new developer trick I learn about is already set up in the Mac for me.</p>\r\n\r\n<p>I just learned about Apache Benchmark.  If you don&#39;t know, Google it. It lets you ding your webserver with 100 or 100,000 requests to see how it responds under pressure.  It&#39;s really cool and really simple.</p>", previous_id: nil, published: true, pub_date: "2012-06-18 05:00:00"},
  {title: "The Michael Daves story", body: "Did Telluride last year. 'Twas a blissfully awesome return, particularly since a year earlier I thought my music career was over.\r\n\r\nSo they pick all us rockstars up at the Montrose airport. I waited around for a bit because the other dude that was getting picked up (who turned out to be Michael Daves) got in about 30 minutes after I did. He showed up and I was getting ready to walk out of the airport when somebody called my name. I turned around to see an old neighbor of mine from Boone, who I hadn't seen since. Michael Jordan. That's right. MJ was my neighbor in Boone. Anyway.\r\n\r\nAnyway, we're riding up, shooting the shit. Daves lives in Brooklyn, I live in Jersey. So he asks me, \"where you from originally?\" to which I replied \"Atlanta\".\r\n\r\n\"Really? I'm from Atlanta. Which part?\"\r\n\r\n\"Avondale. The next town over from Decatur.\"\r\n\r\n\"Yeah, I'm from Decatur.\"\r\n\r\nSo then it was where'd we go to school, and I went to Boone, so we knew a bunch of the same Atlanta born Boone musicians that used to go to a pick session at the Freight Room. This was before my time as far as bluegrass was concerned. My last paycheck cashing job, incidentally, was right around the corner 10 years later at the Raging Burrito. It didn't exist then, but it was pretty cool going back to the day. He went to Decatur High, right around the corner from my parents office. I bought my first several basses at Emile Barron in Decatur. Just found this old video of Bill - the man himself.\r\n\r\nSo after about 3 minutes or so he goes,\r\n\r\n\"So if you grew up in Avondale, you must've been on the Avondale swim team.\"\r\n\r\nHell yes I was. Swim team and the Avondale pool was the best reason to live in Avondale, as far as I was concerned. God knows most of the other kids were fucking assholes just like their parents. I digress.\r\n\r\n\"Well, we must've swam against each other then because I was on the Decatur team.\"\r\n\r\nSo anyway, that was cool. The I caught his set with Thile the next day and I've been a fan since. Definitely my favorite stuff from Thile.", slug: "michael-daves-story", summary: "Did Telluride last year. 'Twas a blissfully awesome return, particularly since a year earlier I thought my music career was over.\r\n\r\nSo they pick all us rockstars up at the Montrose airport. I waited around for a bit because the other dude that was getting picked up (who turned out to be Michael Daves) got in about 30 minutes after I did. He showed up and I was getting ready to walk out of the airport when somebody called my name. I turned around to see an old neighbor of mine from Boone, who I hadn't seen since. Michael Jordan. That's right. MJ was my neighbor in Boone. Anyway.\r\n\r\n", previous_id: nil, published: true, pub_date: "2012-06-30 05:00:00"},
  {title: "Ignored by dinosaurs - part 1", body: "<blockquote>If the music business is ever going to be saved, if musicians are ever going to be allowed a chance to achieve a minimum standard of living, if we are going to rescue music itself from it’s place as today’s disposable trinket and restore it’s place as the universal human language, then the paradigm has got to be completely and utterly reinvented.</blockquote>\r\n\r\n---\r\n\r\n<p>I knew what I was looking for, but I still didn't quite get it.  I was looking for some kind of way to make it easier to build successful band websites, but I was also looking for something that could be monetized, something that could make a decent amount of money for whoever provided the service.  Therein lies the flaw.  That same flaw has reduced the record business into a heap of garbage-producing rubble.  That same flaw has lead to the consolidation of LiveNation and TicketMaster.  That same flaw keeps untold quantities of great music out of the ears of eager listeners every day because the avenues for promotion and distribution simply weren't available.</p>\r\n\r\n<p>We can change that now.</p>", slug: "ignored-dinosaurs-part-1", summary: "<blockquote>If the music business is ever going to be saved, if musicians are ever going to be allowed a chance to achieve a minimum standard of living, if we are going to rescue music itself from it’s place as today’s disposable trinket and restore it’s place as the universal human language, then the paradigm has got to be completely and utterly reinvented.</blockquote>\r\n\r\n<p>==========</p>", previous_id: nil, published: true, pub_date: "2010-05-31 14:43:48"},
  {title: "The road.", body: "It wears you <i>out</i>.  All the stories about how road eventually grinds good musicians into dust may be partially true.  I'd suspect that it has more to do with drugs and alcohol on the road grinding musicians into dust.  I don't have that problem, so mainly it just wears me out.\r\n\r\nExhaustion is a state that usually lends itself to some good playing, at least for me.  Last night I was so tired I think my brain went into some kind of alpha dream state during the second set.  That's when I do my best thinking when I have the energy, but not last night.  Just laying down with the roots...", slug: "the-road", summary: "It wears you <i>out</i>.  All the stories about how road eventually grinds good musicians into dust may be partially true.  I'd suspect that it has more to do with drugs and alcohol on the road grinding musicians into dust.  I don't have that problem, so mainly it just wears me out.\r\n\r\nExhaustion is a state that usually lends itself to some good playing, at least for me.  Last night I was so tired I think my brain went into some kind of alpha dream state during the second set.  That's when I do my best thinking when I have the energy, but not last night.  Just laying down with the roots...", previous_id: nil, published: true, pub_date: "2009-02-26 22:44:12"},
  {title: "This Google/Verizon crap.", body: "<p>I think <a href=\"http://www.avc.com/a_vc/\">Fred Wilson</a> sums it up pretty well.</p>\n\n<blockquote>\n\n<p>So now we have a situation where the access providers want to change the game. And they are seeking the regulatory approval to do just that.</p>\n\n<p>Venture backed startups and venture capitalists don't use regulations and lobbying as competitive advantages. We don't have armies of lobbyists. We don't have congress on our payroll. But the access providers certainly do. They have been regulated for a long time. They know how the game is played and they use it to their advantage. Regulation is their game. They want our government to regulate the Internet and they want those regulations written in a way that allows them to do what they want to do. A regulated Internet is a comforting thought to the access providers and a frightening thought to entrepreneurs and the ecosystem around them.</p>\n\n<p>[...]</p>\n\n<p>There is a lot of debate and discussion going on in Washington, Silicon Valley, New York City, and all around the country right now about net neutrality and regulating the Internet. We have big companies with huge vested interests making proposals that are heavyweight and <a href=\"http://www.unionsquareventures.com/2010/08/a-threat-to-startups.php\">are not startup friendly</a>. We don't need Google, Verizon, AT&T, or anyone else telling us how to regulate the Internet. <strong>We don't need pages and pages of rules written by lawyers that will employ lawyers for years to come.</strong> </p>\n\n<p>We just need to choose not to discriminate on the web and thereby maintain the way the Internet works today. I hope that everyone will come to their senses and realize that is the simplest, easiest, and best path forward.</p>\n\n</blockquote>\n\n<p>Make no mistake.  If this happens it <strong>will</strong> be a very bad thing for America.</p>\n\n<p>Via <a href=\"http://www.avc.com/a_vc/2010/08/regulation-strangulation.html\">AVC</a>.</p>", slug: "googleverizon-crap", summary: "<p>I think <a href=\"http://www.avc.com/a_vc/\">Fred Wilson</a> sums it up pretty well.</p>\n\n<blockquote>\n\n<p>So now we have a situation where the access providers want to change the game. And they are seeking the regulatory approval to do just that.</p>", previous_id: nil, published: true, pub_date: "2010-08-12 16:46:45"},
  {title: "Platform.sh from Scratch - adding a database to your Laravel app", body: "Hello (!) and welcome back to Platform.sh from scratch.  In this post we'll learn about how to set up the Laravel app from the previous post to hook in to various services on Platform, starting with a database connection and moving on to using Redis as a cache and session store.  Along the way we'll visit Platform.sh's \"environment variables\" feature, and we'll set up our first fully functioning deploy hook.  \r\n\r\n> Prerequisites - go through the previous post and get that far...\r\n\r\nLet's get started!\r\n\r\n---\r\n\r\nSo the first step is to add a database to your `services.yaml` file.  Let's choose PostgresQL, which is my personal preference for open source databases these days (mostly due to the fact that it hasn't been bought by Oracle and subsequently forked).  Add this to your `services.yaml` file, which should currently be empty.\r\n\r\n~~~yaml\r\n# adds a Postgres 9.3 service to your project\r\n# and gives it about a gigabyte of disk space\r\npgsql:\r\n  type: postgresql:9.3\r\n  disk: 1024\r\n~~~\r\n\r\nAnd in your `.platform.app.yaml` add this anywhere -\r\n\r\n~~~yaml\r\n# This is how you define service relationships in your application\r\n# I personally think this should've been named \"services\" but such is life\r\nrelationships:\r\n  database: \"pgsql:postgresql\"\r\n~~~\r\n\r\nAs you can see, setting up your project to provision new services is super easy and as the platform matures we'll likely support several versions of any given piece of software.  This will someday allow users to easily test out upgrading something like a database to a new major version in another branch without worrying about the usual hassles.  \r\n\r\nNow we need to set up our application to use these new services.  This is fairly straightforward, but feels a little strange the first time so I'll walk you through the general algorithm that you'll use no matter what the framework or language you're using.\r\n\r\nPlatform.sh encodes many key pieces of information about your application into OS environment variables.  If you SSH into your app container you can `echo $PLATFORM_APPLICATION` and get back a long string that's in essence the base64 encoded version of your `.platform.app.yaml` file.  Same with `$PLATFORM_ROUTES`.  This is how we store metadata about your application, and you'll make use of these variables as well to establish database connections.  The basic algorithm for finding DB connection info is\r\n\r\n- read and decode $PLATFORM_RELATIONSHIPS into a json string.\r\n- parse that json string into an object and use the attributes of that object to set the connection info\r\n\r\nSo with that in mind, let's get your Laravel app wired up.  \r\n\r\n---\r\n\r\nFirst let's make use of a nice little composer package that Platform.sh has authored in order to simplify this bit.  Run `composer require platformsh/config-reader` and install this package.  Next let's head to `config/database.php` and add this little snippet to the top -\r\n\r\n```php\r\n<?php // <- leave that out, it's for syntax highlighting only\r\n$config = new Platformsh\\ConfigReader\\Config();\r\n\r\nif ($config->isAvailable()){\r\n    $pltrels = $config->relationships;\r\n    $database = $pltrels['database'][0];\r\n    putenv(\"DB_CONNECTION={$database['scheme']}\");\r\n    putenv(\"DB_HOST={$database['host']}\");\r\n    putenv(\"DB_PORT={$database['port']}\");\r\n    putenv(\"DB_DATABASE={$database['path']}\");\r\n    putenv(\"DB_USERNAME={$database['username']}\");\r\n    putenv(\"DB_PASSWORD={$database['password']}\");\r\n}\r\n\r\n```\r\n\r\nYou can read the source of the composer package yourself, but essentially the `$config` instance has properties for each of the encoded environment variables that Platform.sh adds to your environments.  In the case of the relationships attribute, you might have several databases defined, so it's a simple matter of digging into that property to pull that values out.\r\n\r\nIn the case of Laravel, it makes use of the `vlucas/phpdotenv` package to read certain settings out of environment variables, so it's really just a matter of translating the nested variables that Platform.sh provides into what Laravel is already expecting.\r\n\r\n> I suspect it would be astonishingly easy for someone to come up with a drop in \"Laravel Helper\" package that would set all this up for automatically, but I haven't gotten that far just yet.\r\n\r\nWith this much code, your app is now ready to connect to the database in whichever environment you'll be deploying so go ahead and commit this.\r\n\r\n`git add . && git commit -m \"adding platform db config\"`\r\n\r\nThere's one more blocker for your Laravel app that you'll need to take care of before you're really up and running and that's the need for the `APP_KEY` variable to be defined.  Time to leran about Platform.sh's environment variables feature!\r\n\r\n---\r\n\r\n### Platform.sh Environment Variables\r\n\r\nYou're likely familiar with the situation where you need to make use of some \"privileged\" data in your application, and that you don't want to store that data in Git.  Or perhaps the use case is that you have different settings for certain things in development than you do in production, perhaps a `DEBUG` flag or something like that.  The usual solution for these cases is to use OS environment variables (just like we do).  We provide a feature easily setting variables that you can read in your environments, so let's set one up for the Laravel `SECRET_KEY`.  \r\n\r\nHead to your project's admin page and click on \"configure environment\", then \"Variables\".  The simplest thing to do is pull the SECRET_KEY out of your local `.env` file, so click \"add variable\" and give it a name of \"SECRET_KEY\" and put the value in the \"value\" field.  This will trigger a redeployment of your application.\r\n\r\nLast step is to add some code in to your application to read those variables back out.  Add this to the top of your `config/app.php` file -\r\n\r\n```php\r\n<?php // <- leave that out, it's for syntax highlighting only\r\n\r\n$config = new \\Platformsh\\ConfigReader\\Config();\r\n\r\nif($config->isAvailable()){\r\n    foreach($config->variables as $k => $v) {\r\n        putenv(\"$k=$v\");\r\n    }\r\n}\r\n\r\n```\r\n\r\nProvided you've already set up that SECRET_KEY variable, it'll be read further down that file and you're good to go, so let's commit and push to platform.\r\n\r\n```\r\ngit add .\r\ngit commit -m \"adding platform environment variables config\"\r\ngit push platform master\r\n```\r\n\r\nSo this post is already a bit long so I'll just touch on one last point quickly.  Now that you have this database all hooked up and ready to go, you're likely going to want to use it!  Should you want to automate the process of applying your database migrations, you can do that in a simple deploy hook.\r\n\r\n```yaml\r\nhooks:\r\n  deploy: |\r\n    php artisan migrate --force\r\n```\r\n\r\nThe `--force` flag sounds scary but all it does it disable the command needing feedback which of course, you are unable to provide yourself.  The other option is to SSH into the app server after deployment and run the command yourself, which I'll demonstrate in the next post.", slug: "platformsh-laravel-database-config", summary: "", previous_id: 297, published: true, pub_date: "2016-10-13 15:46:50"},
  {title: "Platform.sh from scratch - setting up a Laravel app", body: "Hi there and welcome back to Platform.sh from scratch.  In this post we'll convert a Laravel app for use on Platform and learn a few tricks that will hopefully inform converting *any* app for use on Platform.\r\n\r\n---\r\n\r\nStep 1 is to get going with a new Laravel app, so follow the instructions on [installing Laravel](https://laravel.com/docs/5.3/installation#installing-laravel) and setting up a new project.  Initialize a git repo, add a new platform, and add the Platform.sh git remote to your local repo.  All of this is documented in the [previous post](https://www.ignoredbydinosaurs.com/posts/293-platformsh-scratch-part-1-basic-setup/).\r\n\r\nNow, at this point you can try and push code to us but we'll reject it because you don't have any of the Platform config files in place. Let's use [the exact same routes file](https://github.com/JGrubb/platformsh-silex-intro/blob/master/.platform/routes.yaml) as [the previous Silex project](https://github.com/JGrubb/platformsh-silex-intro).\r\n\r\n```yaml\r\n# .platform/routes.yaml\r\n\"http://www.{default}/\":\r\n  type: upstream\r\n  upstream: \"app:http\"\r\n\"http://{default}/\":\r\n  type: redirect\r\n  to: \"http://www.{default}/\"\r\n```\r\n\r\nSo that's step one.  We'll get to the `services.yaml` file in just a minute, but let's go ahead and stub it out - `touch .platform/services.yaml`.\r\n\r\nNow let's get to work on the `.platform.app.yaml` file, which will define what your new Laravel app will need to run.  One of the key differences between this application and the previous one is that for this one we're actually going to need some writable disk space.  Laravel expects a few directories to be present (and to be writable by the web user) in order to write logs and caches and such.  We glossed over that bit in the previous post, so I'll now take a moment to talk about Platform.sh's read-only filesystem.\r\n\r\n---\r\n\r\n### Aside - the read-only filesystem\r\n\r\nPlatform.sh, like some other cloud PaaS providers, utilizes a read-only filesystem.  When your application is deployed, we package up a snapshot of your application code and mount it into it's environment.  This means that the days of being able to edit code directly on the server, or of being able to FTP code up to the server are effectively over.  \r\n\r\nAll of your app's code must be in Git in order to be deployed, which has quite a few advantages.  Not least of them are accountability for who did what and when to your codebase.  Of course, you likely need to have some part of your filesystem be writable for logs and file uploads, so we take care of that for you but first let me expand on the benefits of going read-only.\r\n\r\n__Benefit one - consistency__\r\n\r\n[As we've discussed](https://platform.sh/2016/09/platform-from-scratch-part-0/), Platform.sh's entire workflow is built around Git.  This means that each commit has a SHA hash that identifies each unique commit within your project.  If you cut a new Git branch out of another, that new branch will have the same SHA hash as the currently existing branch that you cut it from.\r\n\r\n~~~\r\n~/work/php/magento-platform-sh\r\n$>  git checkout -b test_branch    master 93783b2 # <- SHA hash of this commit\r\nSwitched to a new branch 'test_branch'\r\n\r\n~/work/php/magento-platform-sh\r\n$>                            test_branch 93783b2 # <- Same SHA hash\r\n~~~\r\n\r\nPlatform.sh sees that the two SHA hashes are the same and doesn't bother building your new environment's codebase again since it's already built it.  It just uses the already packaged code snapshot from the original branch and creates an environment around it.  This saves time, but when it really shines is when it heads in the opposite direction - on merge.  When merging a feature branch into a long running develop or master branch, Platform.sh sees that the code snapshot has already been built and deploys that into your master environment.   \r\n\r\nWhat this means is that you are 100% guaranteed that the code being deployed into your master environment is precisely the same code that you just tested out in your feature branch.  Nobody snuck anything new in there via FTP or editing directly, so you can be confident in your deployments.  This leads neatly into benefit two...\r\n\r\n__Benefit two - security__\r\n\r\nAs you're likely aware there is a large class of exploits, particularly in PHP web apps, that take advantage of that fact that a great many of them allow write access to files that the web server will execute.  This means that nefarious users can sometimes find security holes that will allow them to upload executable PHP files to the server and then use those files to gain \"elevated privileges\", another way of saying \"hack your server\".  With a read-only filesystem, many of those exploits are blocked before they can even happen.\r\n\r\n__Lastly, of course you need to write some files__\r\n\r\nSo yes, your web app likely has something in there that needs to be writable.  It might be for uploads or it might be for caching or it might be for logs.  We got you covered, but you have to specify which directories to make writable in your `.platform.app.yaml` config file.  \r\n\r\n---\r\n\r\nSo I'm just going to drop the `.platform.app.yaml` in here and explain it bit by bit.\r\n\r\n~~~yaml\r\n# the name of this particular app, remember that we allow you\r\n# to create a project out of 1 or more apps, so this gives our\r\n# Laravel app a name...\r\nname: app\r\ntype: php:7.0 # SSIA\r\nbuild:\r\n  # Same as before, this alerts our system to look for a composer.json\r\n  # or composer.lock file and install the dependencies defined therein\r\n  flavor: composer\r\n# basic web configuration for this particular app.  Laravel apps have a\r\n# \"public\" folder that serves as the web docroot.\r\nweb:\r\n  locations:\r\n    \"/\":\r\n      root: \"public\"\r\n      index:\r\n        - index.php\r\n      allow: true\r\n      passthru: \"/index.php\"\r\n# How much disk space to allot to this app.  \r\ndisk: 2048\r\n# This is where you define your writable file system paths.  the keys are the\r\n# paths in your app that need to be writable/uploadable.  The values are always\r\n# going to be named \"shared:files/$WHATEVER_HERE\", where \"WHATEVER_HERE\" can be\r\n# any arbitrary identifier.\r\nmounts:\r\n  # Laravel uses a directory off the root called \"storage\" for logs and cache.\r\n  \"/storage/app/public\": \"shared:files/storage/app/public\"\r\n  \"/storage/framework/views\": \"shared:files/storage/framework/views\"\r\n  \"/storage/framework/sessions\": \"shared:files/storage/framework/sessions\"\r\n  \"/storage/framework/cache\": \"shared:files/storage/framework/cache\"\r\n  \"/storage/logs\": \"shared:files/storage/logs\"\r\n  # And another cache directory here.\r\n  \"/bootstrap/cache\": \"shared:files/bootstrap_cache\"\r\n~~~\r\n\r\nSo this brings us to a decision point.  Inside the `storage` directory are nested a few more directories.  Laravel sets these directories up for you and then drops a .gitignore inside each of them.  This is handy, but presents a small challenge to Platform.sh.  Any directories that you declare as writable (or mountable) will be emptied out on the first build and deploy.  This means that those nested directories that exist in your git repo will be deleted and you'll be left with an empty `storage` directory.  \r\n\r\nThis will cause you some headaches when you try to deploy your Laravel app.  There are two solutions to this - either add each directory that needs to be writable inside of `storage` to the `mounts` directive or recreate them in a \"[deploy hook](https://docs.platform.sh/user_guide/reference/platform-app-yaml.html#hooks)\" instead.  We'll go with option A but I want to introduce you to hooks, so here's what option B looks like -\r\n\r\n~~~yaml\r\n# .platform.app.yaml, after all the rest ...\r\nmounts:\r\n  # Laravel uses a directory off the root called \"storage\" for logs and cache.\r\n  \"/storage\": \"shared:files/storage\"\r\n  # And another cache directory here.\r\n  \"/bootstrap/cache\": \"shared:files/bootstrap_cache\"\r\nhooks:\r\n  deploy: |\r\n    mkdir -p storage/app/public\r\n    mkdir -p storage/framework/views\r\n    mkdir -p storage/framework/sessions\r\n    mkdir -p storage/framework/cache\r\n    mkdir -p storage/logs\r\n~~~\r\n\r\nThis second method here took quite a bit of trial and error to figure out, and either method is valid.  It would've taken me a bit if trial and error to go with option A as well, since I'm not very familiar with Laravel.\r\n\r\nNow I'll take a moment to explain what hooks are.\r\n\r\n### Aside - hooks\r\n\r\nHooks are what they sound like - commands that will execute at certain points in the deployment lifecycle.  In this case, we have two - `build` and `deploy`.\r\n\r\nBuild hooks run while your app is being packaged up, before it's sent to the application's environment.  The filesystem is still writable at this point, so if you need to make any modifications to the file structure of your project, this is your chance to do so.  Since your project doesn't have an environment yet, it doesn't yet have access to the various services that you've declared in `services.yaml`.  So, no database is available at this point.\r\n\r\nDeploy hooks run after your project has been mounted into the app environment.  The versioned file system is no longer writable, but you do have access to your services at this point.  This is typically when you do things like migrate databases or clear caches.  \r\n\r\nSo you might notice that we're performing those `mkdir` calls in the deploy hook, which seems to contradict what I just said.  However, those directories are being created inside of what you've declared as a writable directory in the `mounts` directive, so nothing breaks and indeed you have access to that mounted directory, where you wouldn't have had access in the build hook.\r\n\r\nHere's the full `.platform.app.yaml` at this point, for reference.\r\n\r\n~~~yaml\r\nname: app\r\ntype: php:7.0\r\nbuild:\r\n  flavor: composer\r\ndisk: 2048\r\nweb:\r\n  locations:\r\n    \"/\":\r\n      root: \"public\"\r\n      index:\r\n        - index.php\r\n      allow: true\r\n      passthru: \"/index.php\"\r\nmounts:\r\n  # Laravel uses a directory off the root called \"storage\" for logs and cache.\r\n  \"/storage/app/public\": \"shared:files/storage/app/public\"\r\n  \"/storage/framework/views\": \"shared:files/storage/framework/views\"\r\n  \"/storage/framework/sessions\": \"shared:files/storage/framework/sessions\"\r\n  \"/storage/framework/cache\": \"shared:files/storage/framework/cache\"\r\n  \"/storage/logs\": \"shared:files/storage/logs\"\r\n  # And another cache directory here.\r\n  \"/bootstrap/cache\": \"shared:files/bootstrap_cache\"\r\n~~~\r\n\r\nSo save that, commit to git and push it to your Platform git remote and you should be on your way.  You can find the full repository [here on Github](https://github.com/JGrubb/platformsh-laravel-example).  The most important difference between that repo and this project is that we have yet to set this project up with a database connection, which we'll do in the next post.", slug: "platform-sh-laravel-setup", summary: "", previous_id: 293, published: true, pub_date: "2016-09-19 15:06:15"},
  {title: "More on Wordpress", body: "<p>This one is for my buddy, Bob.  Bob is an old school developer who has recently been baptized by the cooling waters of the web.  He's building a site in Wordpress, so I thought I'd post a few relevant pieces of info up here for him, and those of his ilk.</p>\n\n<p>First of all, realize that Posts and Pages are almost the exact same thing.  The key difference between the two as far as I can tell is not that Pages are easier to add to the top-level navigation, but that Posts allow you to classify them with \"Categories\".  This allows Wordpress to work it's relational database magic, and in the hands of a skilled template author you can really take a very simple system and make it produce just about any listing of content that you want.  When in the early stages of developing a site, it's better to take what you'd think of as top-level content items and see if there's any way that you can make it a listing of Posts in a certain Category, rather than just dumping related info on one Page.  The chief advantages of working this way are maintenance and search-ability.</p>\n\n<p>The <a href=\"http://codex.wordpress.org/\">Wordpress Codex</a> is a wonderfully organized place to learn a lot about authoring templates.  Most of the Wordpress core is basically just a large group of functions for talking to a database, and much of the magic of pulling the info back out in the way that you want it is in the template layer.  Thus, the <a href=\"http://codex.wordpress.org/Developer_Documentation\">Theme Development</a> section of the Codex is the place to spend a couple of days getting used to the way Wordpress works.</p>\n\n<p>I'd suggest downloading my very <a href=\"http://github.com/JGrubb/Base-WP-theme\">bare bones base theme</a> and stepping through some of the template files while browsing the <a href=\"http://codex.wordpress.org/Template_Tags\">Template Tags function reference</a>.  It may not make sense immediately, but it won't take long.</p>\n\n", slug: "more-wordpress", summary: "<p>This one is for my buddy, Bob.  Bob is an old school developer who has recently been baptized by the cooling waters of the web.  He's building a site in Wordpress, so I thought I'd post a few relevant pieces of info up here for him, and those of his ilk.</p>", previous_id: nil, published: true, pub_date: "2010-10-01 19:43:09"},
  {title: "Drupal select list for the Form API - 50 states", body: "This is the list I've spent a half hour hacking around in TextMate trying to figure out how to not manually build.  Couldn't quite do it, so here it is, that you may find it and use it when building a Drupal form that has a select list of all 50 states and the District of Columbia.\r\n\r\n~~~php\r\n'#options' => array(\r\n\t'' => t('Please Select'),\r\n\t'AL' => t('Alabama'),\r\n\t'AK' => t('Alaska'),\r\n\t'AZ' => t('Arizona'),\r\n\t'AR' => t('Arkansas'),\r\n\t'CA' => t('California'),\r\n\t'CO' => t('Colorado'),\r\n\t'CT' => t('Connecticut'),\r\n\t'DE' => t('Delaware'),\r\n\t'DC' => t('District of Columbia'),\r\n\t'FL' => t('Florida'),\r\n\t'GA' => t('Georgia'),\r\n\t'HI' => t('Hawaii'),\r\n\t'ID' => t('Idaho'),\r\n\t'IL' => t('Illinois'),\r\n\t'IN' => t('Indiana'),\r\n\t'IA' => t('Iowa'),\r\n\t'KS' => t('Kansas'),\r\n\t'KY' => t('Kentucky'),\r\n\t'LA' => t('Louisiana'),\r\n\t'ME' => t('Maine'),\r\n\t'MD' => t('Maryland'),\r\n\t'MA' => t('Massachusetts'),\r\n\t'MI' => t('Michigan'),\r\n\t'MN' => t('Minnesota'),\r\n\t'MS' => t('Mississippi'),\r\n\t'MO' => t('Missouri'),\r\n\t'MY' => t('Montana'),\r\n\t'NE' => t('Nebraska'),\r\n\t'NV' => t('Nevada'),\r\n\t'NH' => t('New Hampshire'),\r\n\t'NJ' => t('New Jersey'),\r\n\t'NM' => t('New Mexico'),\r\n\t'NY' => t('New York'),\r\n\t'NC' => t('North Carolina'),\r\n\t'ND' => t('North Dakota'),\r\n\t'OH' => t('Ohio'),\r\n\t'OK' => t('Oklahoma'),\r\n\t'OR' => t('Oregon'),\r\n\t'PA' => t('Pennsylvania'),\r\n\t'RI' => t('Rhode Island'),\r\n\t'SC' => t('South Carolina'),\r\n\t'SD' => t('South Dakota'),\r\n\t'TN' => t('Tennessee'),\r\n\t'TX' => t('Texas'),\r\n\t'UT' => t('Utah'),\r\n\t'VT' => t('Vermont'),\r\n\t'VA' => t('Virginia'),\r\n\t'WA' => t('Washington'),\r\n\t'WV' => t('West Virginia'),\r\n\t'WI' => t('Wisconsin'),\r\n\t'WY' => t('Wyoming'),\r\n),\r\n~~~", slug: "drupal-select-list-form-api-50-states", summary: "This is the list I've spent a half hour hacking around in TextMate trying to figure out how to not manually build.  Couldn't quite do it, so here it is, that you may find it and use it when building a Drupal form that has a select list of all 50 states and the District of Columbia.\r\n\r\n<pre>\r\n'#options' => array(\r\n\t'' => t('Please Select'),\r\n\t'AL' => t('Alabama'),\r\n\t'AK' => t('Alaska'),\r\n\t'AZ' => t('Arizona'),\r\n\t'AR' => t('Arkansas'),\r\n\t'CA' => t('California'),\r\n\t'CO' => t('Colorado'),\r\n\t'CT' => t('Connecticut'),\r\n\t'DE' => t('Delaware'),\r\n\t'DC' => t('District of Columbia'),\r\n", previous_id: nil, published: true, pub_date: "2011-06-06 18:43:56"},
  {title: "The default Fastly VCL", body: "I screwed this one up pretty bad when I first got started with Fastly.  That have that link that says \"VCL\", as if you should download that to get started.  So I did.  But that's the _generated_ VCL, and all their special macros are already blown up, so you don't want to copy that one.\r\n\r\nAnd the one on their website has HTML entities encoded, so I'm putting this one here in case I need it again later.\r\n\r\n[The original](http://docs.fastly.com/guides/vcl-faqs/how-do-i-mix-and-match-fastly-vcl-with-custom-vcl)\r\n\r\n~~~\r\nsub vcl_recv {\r\n#FASTLY recv\r\n\r\n    if (req.request != \"HEAD\" && req.request != \"GET\" && req.request != \"FASTLYPURGE\") {\r\n      return(pass);\r\n    }\r\n\r\n    return(lookup);\r\n}\r\n\r\nsub vcl_fetch {\r\n#FASTLY fetch\r\n\r\n  if ((beresp.status == 500 || beresp.status == 503) && req.restarts < 1 && (req.request == \"GET\" || req.request == \"HEAD\")) {\r\n    restart;\r\n  }\r\n\r\n  if(req.restarts > 0 ) {\r\n    set beresp.http.Fastly-Restarts = req.restarts;\r\n  }\r\n\r\n  if (beresp.http.Set-Cookie) {\r\n    set req.http.Fastly-Cachetype = \"SETCOOKIE\";\r\n    return (pass);\r\n  }\r\n\r\n  if (beresp.http.Cache-Control ~ \"private\") {\r\n    set req.http.Fastly-Cachetype = \"PRIVATE\";\r\n    return (pass);\r\n  }\r\n\r\n  if (beresp.status == 500 || beresp.status == 503) {\r\n    set req.http.Fastly-Cachetype = \"ERROR\";\r\n    set beresp.ttl = 1s;\r\n    set beresp.grace = 5s;\r\n    return (deliver);\r\n  }\r\n\r\n  if (beresp.http.Expires || beresp.http.Surrogate-Control ~ \"max-age\" || beresp.http.Cache-Control ~\"(s-maxage|max-age)\") {\r\n    # keep the ttl here\r\n  } else {\r\n    # apply the default ttl\r\n    set beresp.ttl = 3600s;\r\n  }\r\n\r\n  return(deliver);\r\n}\r\n\r\nsub vcl_hit {\r\n#FASTLY hit\r\n\r\n  if (!obj.cacheable) {\r\n    return(pass);\r\n  }\r\n  return(deliver);\r\n}\r\n\r\nsub vcl_miss {\r\n#FASTLY miss\r\n  return(fetch);\r\n}\r\n\r\nsub vcl_deliver {\r\n#FASTLY deliver\r\n  return(deliver);\r\n}\r\n\r\nsub vcl_error {\r\n#FASTLY error\r\n}\r\n\r\nsub vcl_pass {\r\n#FASTLY pass\r\n}\r\n~~~", slug: "the-default-fastly-vcl", summary: "Default Fastly VCL.", previous_id: nil, published: true, pub_date: "2014-10-08 16:52:35"},
  {title: "Goodbye Rails, Hello Django", body: "So here it is.  The last version of this blog - a Rails frontend to a Postgres backend - actually stood for almost 2 and a half years.  I think that's probably a record.  \r\n\r\nIn keeping with my decided new theme for this blog however, I've decided to rewrite the thing in Django.  Not that you can't google it yourself, but Django is (at a high level) basically the Python version of Rails.  Actually, it's basically the Python version of every MVC web framework.  It's been around for 10 years, so it is far from the hot-new-thing.  I've finally been doing this for long enough that I shy away from the hot-new-thing and actively seek out boring, tested solutions to problems.  \r\n\r\nAt work we've begun a small project that we were targeting to build on Drupal 8.  Faced with the timeframe, the relative lack of basic modules for building Drupal 8 sites, and the learning curve for the code that we'd inevitably have to write on our own I pitched the idea to my team to try something completely different.  I prefaced it with \"this is a terrible idea, so raise your hand at any point\", but surprisingly they were all amenable.  We all spent a day going through the amazing tutorial and the amazing documentation and they were still on board.  So I decided to rebuild this blog to take the training wheels off and give us all some reference code for some of the simple features that weren't walked through in the tutorial - taxonomy, sitemaps, extending templates, etc.\r\n\r\nAmazingly it took me all of 4 hours to rebuild the whole thing and migrate the data from one PG schema into the one that Django wants to use.  Django is even easier to use than Rails - a fact that blew my mind once I started playing with it.  \r\n\r\nThe deployment story however, is a shit show.  I spent as many days trying to get this thing up on a Digital Ocean server as I spent hours building the application in the first place.  I'm hoping to find that there is an easier, more modern means for serving Python apps in 2016 after some more digging.  \r\n\r\nAnyway, thanks for stopping by!", slug: "goodbye-rails-hello-django", summary: "", previous_id: nil, published: true, pub_date: "2016-03-19 09:07:16"},
  {title: "Prepare for the backlash", body: "<blockquote><p>Because there is going to be one, trust me. This device isn’t as obvious as iPhone. It’s kind of subtle. Which means that those of you who have done the spiritual work to prepare for it will be fine, but those who haven’t done the work, well, they’re probably going to miss a lot of this at first. So you’ll see some noise about who needs this thing, it’s just a fancy desk ornament, and so on. I am telling you this now so that you can be ready for the harsh voices and they won’t hurt you when you hear them. Just let the negativity pass by you. Do not engage with it or try to fight it or argue with it. Step aside, and let the dark energy flow away.</p>\n<p>Peace, enlightened beings. This is what you and I were put on earth to achieve. And that is what this device ultimately is about. Yes, you can read on it, and watch movies. But those are functions. Features. Those aren’t its purpose. The purpose of a device is something different altogether. What this is about is bringing people together to form the universal One, the great synchronization of human vibration in a global mesh of energy, like the planet in Avatar. That is the real goal. We are all one person. One spirit. I am inside you, and you are inside me. (Not really.) But anyway, do not allow yourselves to forget the higher purpose of what we are doing.</p>\n<p>Oh, and we are totally going to fuck the cable carriers. But that too is just a side issue.</p>\n</blockquote>\n\n\n<p>(Via <a href=\"http://www.fakesteve.net\">The Secret Diary of Steve Jobs » Steve</a>.)</p>", slug: "prepare-for-the-backlash", summary: "<blockquote><p>Because there is going to be one, trust me. This device isn’t as obvious as iPhone. It’s kind of subtle. Which means that those of you who have done the spiritual work to prepare for it will be fine, but those who haven’t done the work, well, they’re probably going to miss a lot of this at first.", previous_id: nil, published: true, pub_date: "2010-01-30 15:22:59"},
  {title: "Praise Jah!!", body: "My first post on my new blog! I wrote this one all by myself, with the help of hundreds and hundreds of open source collaborators, Stack Overflow commenters, IRC, Google Groups, and sheer force of WILL!!!\r\n\r\nThis is my first running, production Ruby on Rails app. It took me about two days/6 hours to write, and about 4 days/30 hours to deploy. Deploy means \"make work on the web so people can see it\" and it was every bit the pain in the ass that I'd heard it was supposed to be. But by god, here it is! Nginx/Passenger/MySql/Rails. I'll make it look prettier later, and hopefully also have something to say.\r\n\r\nGuess I also need to set it to something other than Greenwich mean time. It begins! Some more!", slug: "praise-jah", summary: "My first post on my new blog! I wrote this one all by myself, with the help of hundreds and hundreds of open source collaborators, Stack Overflow commenters, IRC, Google Groups, and sheer force of WILL!!!\r\n\r\n", previous_id: nil, published: true, pub_date: "2012-06-01 05:00:00"},
  {title: "What is Business Intelligence?", body: "My brother in law is a recruiter.  He historically recruits salesfolks for companies \"in the BI space\".  I tried to help him out many years ago when I was still on the road playing music, but had absolutely no background to do anything other than plow through the spreadsheet of contacts that he had and try and get a response.  Like most witless recruiters.  I had no idea what BI was.\r\n\r\nYears later, after starting a new job at ABM I still had no idea what BI was.  It was something we needed, or something we did, I wasn't really sure. We had a big old database, some stuff was in there, reports came out.  Somebody read them.  No idea.  Didn't seem very intelligent, but apparently it helped with our business, yet most of the time people seemed pissed off at it and the person who ran it.\r\n\r\nSo here's a quicky definition of \"Business Intelligence\" for me, 5 years ago.\r\n\r\n---\r\n\r\nCompanies take in a lot of data.  Data can be anything.  It can be logs from your webserver.  It can be daily dumps from Google Analytics about the traffic on your site.  It can be daily dumps from Exact Target or Mailchimp about what emails went out yesterday, on what lists, and which ones were opened, which ones bounced.  What videos were played on the sites yesterday?  On what kind of browser?  Basically it's anything and everything that a business can get their hands on.  \r\n\r\nOk, you've got your hands on it, now what?  Let's figure out how to figure out what is going on with our business on a macro scale so that the C suite can make decisions and we can all keep our jobs.  \r\n\r\nThis is basically what BI is.  Take in data.  Munge data.  Get answers out of data so that you can run your business.  \r\n\r\nObviously today (2016), this is bug business.  \"Big data\", you've heard of that?  Very closely related to BI, since the amount of data that we are able to take in these days is so vast that there's no way we could get meaningful answers out of all of it using technology from even just 10 years ago.  \r\n\r\nWrangling all this data is a wide open field, and that's where I want to be right now.", slug: "what-business-intelligence", summary: "What is Business Intelligence?  Step inside and find out!", previous_id: nil, published: true, pub_date: "2016-02-27 10:43:00"},
  {title: "Database migrations with CodeIgniter - 101", body: "So I've decided to start playing around with CodeIgniter.  It's a supremely simple PHP framework that has a lot of good documentation, a pretty big user/developer base, and has a lot in common stylistically with Rails.  I've just really started playing around with it, and wanted to use the migrations feature for building up my database.  I won't explain what migrations are or how they work or why to use them because <a href=\"http://ignoredbydinosaurs.com/2009/10/chapter-6b-laymans-introduction-database-migrations-ruby-rails\">that's been covered</a>.  \r\n\r\nOur project will be something like a database of shows. So we need a \"shows\" table in our database.  CI needs you to edit application/config/migrations.php to change <code>$config['migration_enabled'] = FALSE;</code> to <code>$config['migration_enabled'] = TRUE;</code>.  This will enable migrations in the app.  The next meaningful line down the page - <code>$config['migration_version'] = X;</code> will tell your app which migration it's supposed to be on.  If you're working with someone else and they update their codebase from a repo, then their app will check their local development database, see that X number of migrations have not been applied (by checking the version number in the migrations table in the DB) and bring the schema up to date.  It's neat.\r\n\r\nStep 2 will be to write our first migration.  Under application/ you'll need a /migrations directory (<code>application/migrations</code>).  This is where you'll write out the migration file.  About here is where you start realizing some of the amazing things that Rails does for you, such as building all of this with a line on the terminal instead of making you trot all over you app to set this up.  I digress.\r\n\r\nOur first migration will look like this - \r\n\r\n~~~php\r\n// application/migrations/001_add_shows.php\r\n  \r\n<?php defined(\"BASEPATH\") or exit(\"No direct script access allowed\");\r\n\r\n  class Migration_Add_shows extends CI_Migration {\r\n    \r\n    public function up() {\r\n      $this->dbforge->add_field('id');\r\n      $this->dbforge->add_field(array(\r\n        'date' => array(\r\n          'type' => 'DATE',\r\n          'null' => FALSE,\r\n        ),\r\n        'location' => array(\r\n          'type' => 'VARCHAR',\r\n          'constraint' => '255',\r\n          'null' => FALSE,\r\n        ),\r\n        'description' => array(\r\n          'type' => 'TEXT',\r\n          'null' => TRUE,\r\n        ),\r\n      ));\r\n      $this->dbforge->create_table('shows');\r\n    }\r\n\r\n    public function down() {\r\n      $this->dbforge->drop_table('shows');\r\n    }\r\n\r\n  }\r\n?>\r\n~~~\r\n\r\nSo here's what this says - \r\n\r\nWe're creating a migration called \"Add shows\".  This will create our \"shows\" table in the DB.  It will have an <code>'id'</code> column.  By using <code>$this->dbforge->add_field('id');</code>, CI knows to make this your primary key, to make it an auto-incrementing integer, and for it not to be NULL (<a href=\"http://codeigniter.com/user_guide/database/forge.html#add_field\" title=\"Database Forge Class : CodeIgniter User Guide\">http://codeigniter.com/user_guide/database/forge.html#add_field</a>).  We're also adding a date field, a location field, and a text description.\r\n\r\nThe name of this file is important.  If you call the class <code>Migration_Add_shows</code> and name the file 001_add_show.php (singular), CI won't be able to find it.  This is it for step 2.\r\n\r\nNote: the down() method is for reversing this change.  I haven't figured out how that works just yet from the standpoint of running the down() migration, but you'll want to write the reverse of any up() method for every migration.  This is the \"undo\" button on this process.  Ignore it at your peril.\r\n\r\nStep 3 is to create a migrations controller, since you'll need this migration to be called from somewhere.  I will learn how to run migrations from the command line next, since the CLI is obviously where it's at, but for now we'll write a controller and do it the hard way.\r\n\r\n~~~php\r\n// application/controllers/migrate.php\r\n  \r\n<?php defined(\"BASEPATH\") or exit(\"No direct script access allowed\");\r\n\r\n  class Migrate extends CI_Controller {\r\n    public function index() {\r\n      if (ENVIRONMENT == 'development') {\r\n        $this->load->library('migration');\r\n        if ( ! $this->migration->current()) {\r\n          show_error($this->migration->error_string());\r\n        } else {\r\n          echo \"success\";\r\n        }\r\n      } else {\r\n        echo \"go away\";\r\n      }\r\n    }\r\n  }\r\n?>\r\n~~~\r\n\r\nNow, if you visit yourapp.com/index.php/migrate, you'll have run the migration.  It took me a few minutes to get this wired up correctly, and CI gives you some useful error messages, so hopefully you'll be on your way.  Basically this says -\r\n\r\nThis can only be run while in development mode, else \"go away\" and stop monkeying with my app.  Load the migration library, which runs the migration up to the version specified in <code>config/migrations.php</code>.  When you add a new migration, update the version number in that file, and it'll be run next time you visit this url.\r\n\r\nDid you get all that?", slug: "database-migrations-codeigniter-101", summary: "So I've decided to start playing around with CodeIgniter.  It's a supremely simple PHP framework that has a lot of good documentation, a pretty big user/developer base, and has a lot in common stylistically with Rails.  I've just really started playing around with it, and wanted to use the migrations feature for building up my database.  I won't explain what migrations are or how they work or why to use them because <a href=\"http://ignoredbydinosaurs.com/2009/10/chapter-6b-laymans-introduction-database-migrations-ruby-rails\">that's been covered</a>.", previous_id: nil, published: true, pub_date: "2012-05-14 19:10:57"},
  {title: "Why Drupal 8 will fail", body: "I started working with Django last week.  [The documentation is complete, organized, and located in one indexed portion of the website](https://docs.djangoproject.com/en/1.9/contents/).  You can download a PDF of the entire thing and it's better than any O'Reilly book you could possibly buy about Django.  If you land on a page for an old version of the framework, [it lets you know](https://docs.djangoproject.com/en/1.7/contents/). \r\n\r\n[The same thing goes for Postgres](http://www.postgresql.org/docs/9.5/interactive/index.html).\r\n\r\n[The same thing goes for Symfony](https://symfony.com/doc/current/book/index.html).\r\n\r\n[The same thing goes for Rails](http://guides.rubyonrails.org/).\r\n\r\n[The same thing goes for React](https://facebook.github.io/react/docs/getting-started.html).\r\n\r\nThese are tools that want to be used.  It's obvious from the onboarding tutorials in each of these that they want to make the process easy for noobs.  \r\n\r\nContrast this with Drupal.  I had been poking at and trying to figure out Drupal for almost a year (getting actual work done with Wordpress in the meantime) before I picked up [a book](http://shop.oreilly.com/product/9780596515805.do) that finally cleared it up for me.  Oh!  Drupal isn't *supposed* to do anything!  You have to go module shopping to make it do simple things!  And you have to go buy a book to tell you that!\r\n\r\nAnd the situation has only gotten worse now that Acquia has decided to throw away over a decade of community knowledge about how to build Drupal sites.  Where's the simple onboarding tutorial [in here](https://www.drupal.org/documentation) (?), because i can't find it.\r\n\r\n---\r\n\r\nI'm not saying that Drupal 8 *is* going to fail - god knows it is a **ginormous step forward** in SO many ways - but if it does it'll be because the Drupal project takes building things far more seriously than it does anything else, especially teaching others how to use those things.  The smartest thing that Acquia could do at this point for the future of Drupal would be to put a complete moratorium on any new features until the currently existing features are covered with this level of **official** documentation.", slug: "why-drupal-8-will-fail", summary: "", previous_id: nil, published: true, pub_date: "2016-03-20 10:51:53"},
  {title: "The creative fire", body: "<p>I just finished \"Zen and the Art of Motorcycle Maintenance\" in the ATL airport yesterday.  I tried to read it in college and failed miserably - it was just way too wordy and too deep for 20 year old me.  For some reason about a month and a half ago I picked it back up and gave it another try, shortly before I started coming to grips with the fact that my spell in RRE is drawing to a close.  It's basically the tale of a man and his son on a road trip.  The man has battled mental illness in the past, the memories which were erased by shock therapy.  The book is partly the tale of his putting his past back together again via a philosophical exploration while riding on a motorcycle (obviously) from Minnesota to San Francisco.</p>\r\n\r\n<p>I got a lot out of this book this time.  Whether it's the station I'm at at this point in my life, whether it's the fact that I have Noah now, whether it's the fact that I'm just older now, I didn't have much trouble with the sections that gave me trouble 11 years ago.  On the contrary, there were several sections that could've been written about me.  There is one in particular where the narrator is recounting a portion of his past where he taught Rhetoric at the University of Montana in Missoula.  One semester he decides to conduct an experiment - to do away with grades for the whole semester.  The students will receive a grade at the end of the course, and not before.  The section that made the hair on the back of my neck stand up is toward the beginning of his recount of the experiment, when he's stating his hypothesis.  I'll quote it, rather than summarize.  Pardon the length.</p>\r\n\r\n<blockquote><p>Phaedrus'  argument for the abolition of the degree and grading system produced a nonplussed or negative reaction in all but a few students at first, since it seemed, on first judgment, to destroy the whole University system.  One student laid it wide open when she said with complete candor, \"Of course you can't eliminate the degree and grading system.  After all, that's what we're here for.\"</p>\r\n<p>She spoke the complete truth.  The idea that the majority of students attend a university for an education independent of the degree and grades is a little hypocrisy everyone is happier not to expose.  Occasionally some students do arrive for an education but rote and the mechanical nature of the institution soon converts them to a less idealistic attitude.</p>\r\n<p>The demonstrator was an argument that elimination of grades and degrees would destroy this hypocrisy.  Rather than deal with generalities it dealt with the specific career of an imaginary student who more or less typified what was found in the classroom, a student completely conditioned to work for a grade rather than the knowledge the grade was supposed to represent.</p>\r\n<p>Such a student, the demonstrator hypothesized, would go to his first class, get his assignment and probably do it out of habit.  He might go to his second and third as well.  But eventually the novelty of the course would wear off and, because his academic life was not his only life, the pressure of other obligations or desires would create circumstances in where he just would not be able to get an assignment in.</p>\r\n<p>Since there was no degree or grading system he would incur no penalty for this.  Subsequent lectures which presumed he'd completed the assignment might be a little more difficult to understand, however, and this difficulty, in turn, might weaken his interest to a point where the next assignment, which he would find quite hard, would also be dropped.  Again no penalty.</p>\r\n<p>In time his weaker and weaker understanding of what the lectures were about would make it more and more difficult for him to pay attention in class.  Eventually he would see that he wasn't learning much; and facing the continual pressure of outside obligations, he would stop studying, feel guilty about this and stop attending class.  Again, no penalty would be attached.</p>\r\n<p>But what had happened?  The student, with no hard feelings on anybody's part, would have flunked himself out.  Good!  This is what should have happened.  He wasn't there for a real education in the first place and he had no real business there at all.  A large amount of money and effort had been saved and there would be no stigma of failure and ruin to haunt him the rest of his life.  No bridges had been burned.</p>\r\n<p>The student's biggest problem was a slave mentality which had been built into him by years of carrot-and-whip grading, a mule mentality which said, \"If you won't whip me, I won't work.\"  He didn't get whipped.  He didn't work.  And the cart of civilization, which he supposedly was being trained to pull, was just going to have to creak along a little slower without him.</p>\r\n<p>This is a tragedy, however, only if you presume that the cart of civilization, \"the system,\" is pulled by mules.  This is a common, vocational, \"location\" point of view, but it's not the Church attitude. [<em>not the church of the religious type, but I don't have time to explain all that here -jg</em>].</p>\r\n<p>The Church attitude is that civilization, or \"the system\" or \"society\" or whatever you want to call it, is best served not by mules but by free men.  The purpose of abolishing grades and degrees is not to punish mules or get rid of them but to provide an environment in which that mule can turn into a free man.</p>\r\n<p>The hypothetical student, still a mule, would drift around for a while.  He would get another kind of education quite as valuable as the one he'd abandoned, in what used to be called the \"school of hard knocks.\"  Instead of wasting money and time as a high-status mule, he would now have to get a job as a low-status mule, maybe as a mechanic.  Actually his <em>real</em> status would go up.  He would be making a contribution for a change.  Maybe that's what he would do for the rest of his life.  Maybe he'd found his level.  But don't count on it.</p>\r\n<p>In time - six months; five years, perhaps - a change could easily begin to take place.  He would become less and less satisfied with a kind of dumb, day-to-day shop-work.  His creative intelligence, stifled by too much theory and too many grades in college, would now become reawakened by the boredom of the shop.  Thousands of hours of frustrating mechanical problems would have made him more interested in machine design.  He would like to design machinery himself.  He'd think he could do a better job.  He would try modifying a few engines, meet with success, look for more success, but feel blocked because he didn't have the theoretical information.  He would discover that when before he felt stupid because of his lack of interest in theoretical information, he'd now find a brand of theoretical information which he'd have a lot of respect for, namely, mechanical engineering.</p>\r\n<p>So he would come back to our degreeless and gradeless school, but with a difference.  He'd no longer be a grade-motivated person.  He'd be a knowledge motivated person.  He would need no external pushing to learn.  His push would come from inside.  He'd be a free man.  He wouldn't need a lot of discipline to shape him up.  In fact, if the instructors assigned him were slacking on the job he would be likely to shape <em>them</em> up by asking rude questions.  He'd be there to learn something, would be paying to learn something and they'd better come up with it.</p>\r\n<p>Motivation of this sort, once it catches hold, is a ferocious force, and in the gradeless, degreeless institution where our student would find himself, he wouldn't stop with rote engineering information.  Physics and mathematics would come within his sphere of interest because he'd see he needed them.  Metallurgy and electrical engineering would come up for attention.  And, in the process of intellectual maturing that these abstract studies gave him, he would be likely to branch out into other theoretical areas that weren't directly related to machines but had become part of a larger goal.  This larger goal wouldn't be the imitation of an education in Universities today, glossed over and concealed by grades and degrees that gave the appearance of something happening when, in fact, almost nothing is going on.  It would be the real thing.</p></blockquote>\r\n\r\n<p>The hair on my neck is still standing up.  I did poorly in school.  Don't know why, but I just hated it.  I and my parents were routinely told by teachers what potential I had that was going to waste.  It was humiliating.  My overarching, impressionistic memory of my academic career is that of a humiliated mule.  As I mentioned in my <a href=\"http://ignoredByDinosaurs.com/2009/02/numero-uno/\">very first blog post</a>, I was kicked out of the band in 10th grade for not getting with the program.  And now I've been a professional musician for the last 12 years, virtually since I left high school.  I don't blame anyone for my stubborn refusal to do the rote bullshit work we were all assigned, but something was clearly not right.  I was a kid, for crying out loud.</p>\r\n<p>Anyway, the great thing about college was that it enabled me to shed a lot of the self-esteem issues that I graduated high-school with.  It also more fully introduced me to a very deep and powerful talent that had always been there, waiting to be discovered and nutured.  Music.  Music has made me what I am.  But at the same time, I can't help but feel that I've been a mechanic for the last seven years.  That my real education, my real work, my real purpose begins now.</p>", slug: "creative-fire", summary: "<p>I just finished \"Zen and the Art of Motorcycle Maintenance\" in the ATL airport yesterday.  I tried to read it in college and failed miserably - it was just way too wordy and too deep for 20 year old me.  For some reason about a month and a half ago I picked it back up and gave it another try, shortly before I started coming to grips with the fact that my spell in RRE is drawing to a close.  It's basically the tale of a man and his son on a road trip.  The man has battled mental illness in the past, the memories which were erased by shock therapy.", previous_id: nil, published: true, pub_date: "2009-11-19 17:30:32"},
  {title: "Platform.sh from scratch - PostgreSQL", body: "Hi there and welcome back to Platform from scratch.  Today we're going to take a very simple Laravel application that will make use of Postgres on the backend as a database.\r\n\r\nThe complete example application can be found here - https://github.com/JGrubb/platformsh-laravel-example\r\n\r\nThe very first step of this will be to add in the appropriate `.platform/services.yaml` file.  This file was left intentionally empty in the setup for this Laravel application, as we didn't have a need for a working database and were just getting our app set up and running.  Now however, we're going to add a very simple configuration into `services.yaml`.\r\n\r\n```yaml\r\n# This is the \"name\" of this service and can be any arbitrary string.\r\n# You could name this \"foo\" and that's the name you'd use in your\r\n# .platform.app.yaml file in the next step.\r\npgsql:\r\n  # This is the actual service you'll be using.\r\n  type: postgresql:9.3\r\n  # How much space you want to give this in megabytes.  \r\n  # 1 gig will get us going\r\n  disk: 1024\r\n```\r\n\r\nOver in `.platform.app.yaml` we'll add in the [relationships section](https://docs.platform.sh/user_guide/reference/platform-app-yaml.html#relationships) to the file.\r\n\r\n```yaml\r\nrelationships:\r\n  # This config takes the form of \"relationship_name: service_name:driver\"\r\n  #\r\n  # Instead of \"database\", you could also call this \"bar\" and that's how it'll\r\n  # show up in the $PLATFORM_RELATIONSHIPS environment variable.  I'll show\r\n  # you how that manifests itself in just a moment.\r\n  #\r\n  # \"pgsql\" in this case is the name you gave it in services.yaml and\r\n  # \"postgresql\" is the part that you can't just arbitrarily name.  That\r\n  # is the hint to our container build system that you need a PG database\r\n  # service.\r\n  database: \"pgsql:postgresql\"\r\n```\r\n\r\nCommit this and push it up to your platform remote.  This will trigger a rebuild of your application, and when that's done let's SSH into your environment with the [Platform CLI](https://docs.platform.sh/user_guide/overview/cli/index.html) - `$ platform ssh`.\r\n\r\nOnce you're in, try this - `echo $PLATFORM_RELATIONSHIPS`.  You'll get a big base64 encoded string as a result.  This is because you can't set complex objects or even JSON as an environment variable, so let's decode that by piping it to `base64 --decode` - `echo $PLATFORM_RELATIONSHIPS | base64 --decode`\r\n\r\nThis should give you back something like\r\n\r\n`{\"database\": [{\"username\": \"main\", \"password\": \"main\", \"ip\": \"250.0.96.171\", \"host\": \"database.internal\", \"query\": {\"is_master\": true}, \"path\": \"main\", \"scheme\": \"pgsql\", \"port\": 5432}]}`.  \r\n\r\n**sidebar**\r\n\r\nJust for the fun of it, let's try this in the `relationships` section -\r\n\r\n```yaml\r\nrelationships:\r\n  dark_chocolate: \"pgsql:postgresql\"\r\n```\r\n\r\nSure enough --\r\n\r\n```\r\nweb@4ikq2xigwlw5s-master--app:~$ echo $PLATFORM_RELATIONSHIPS | base64 --decode\r\n{\"dark_chocolate\": [{\"username\": \"main\", \"password\": \"main\", \"ip\": \"250.0.96.171\", \"host\": \"big_daddy.internal\", \"query\": {\"is_master\": true}, \"path\": \"main\", \"scheme\": \"pgsql\", \"port\": 5432}]}\r\n```\r\n\r\n---\r\n\r\nSo the basic gist of how you establish a connection to any kind of service that you set up in `services.yaml` should now be clearer than it was before, and we'll now set about adding the code to our Laravel app that will make use of these environment variables.\r\n\r\n```php\r\n<?php\r\n// at the top of config/database.php.  This will decode the base64\r\n// encoded envvar and expand it into the variables that Laravel is\r\n// expecting.\r\nif ($relationships = getenv('PLATFORM_RELATIONSHIPS')){\r\n    $pltrels = json_decode(base64_decode($relationships), TRUE);\r\n    $database = $pltrels['database'][0];\r\n    putenv(\"DB_CONNECTION={$database['scheme']}\");\r\n    putenv(\"DB_HOST={$database['host']}\");\r\n    putenv(\"DB_PORT={$database['port']}\");\r\n    putenv(\"DB_DATABASE={$database['path']}\");\r\n    putenv(\"DB_USERNAME={$database['username']}\");\r\n    putenv(\"DB_PASSWORD={$database['password']}\");\r\n}\r\n```\r\n\r\nThis particular piece of code is **not** Postgres specific, and in fact will work just fine with MySQL as well.  The beauties of abstraction...\r\n\r\nThe final step in this process is optional, but if you want to have `artisan` migrate the database on deploy rather than logging into the server and running it manually you'd add this to the bottom of your `hooks.deploy` in `.platform.app.yaml` --\r\n\r\n```yaml\r\nhooks:\r\n  deploy:\r\n    # other commands\r\n    php artisan migrate --force\r\n```\r\n\r\nThe `--force` flag will allow migrate to run in a \"production\" environment.\r\n\r\nThere is one final step to be aware of, and that's that the `pdo_pgsql` extension is [not enabled by default in the PHP containers](https://docs.platform.sh/user_guide/reference/toolstacks/php/configure-php.html).  You'll need to add this somewhere in `.platform.app.yaml` -\r\n\r\n```yaml\r\nruntime:\r\n  extensions:\r\n    - pdo_pgsql\r\n```\r\n\r\nIf you were using MySQL, this step would not be needed as `pdo_mysql` is enabled by default.  Indeed, if you're using Postgres, you can disable the MySQL extension if you wish -\r\n\r\n```yaml\r\nruntime:\r\n  extensions:\r\n    - pdo_pgsql\r\n  disabled_extensions:\r\n    - pdo_mysql\r\n```\r\n\r\nFor reference, here's the complete `.platform.app.yaml` --\r\n\r\n```yaml\r\nname: app\r\ntype: php:5.6\r\nruntime:\r\n  extensions:\r\n    - pdo_pgsql\r\nbuild:\r\n  flavor: composer\r\ndisk: 2048\r\nweb:\r\n  locations:\r\n    \"/\":\r\n      root: \"public\"\r\n      index:\r\n        - index.php\r\n      allow: true\r\n      passthru: \"/index.php\"\r\nmounts:\r\n  \"/storage\": \"shared:files/storage\"\r\n  \"/bootstrap/cache\": \"shared:files/bootstrap_cache\"\r\nrelationships:\r\n  database: \"pgsql:postgresql\"\r\nhooks:\r\n  deploy: |\r\n    mkdir -p storage/app/public\r\n    mkdir -p storage/framework/views\r\n    mkdir -p storage/framework/sessions\r\n    mkdir -p storage/framework/cache\r\n    mkdir -p storage/logs\r\n    php artisan migrate --force\r\n```", slug: "postgres-on-platform", summary: "", previous_id: nil, published: true, pub_date: "2016-08-23 15:58:36"},
  {title: "Easy Markdown with Syntax Highlighting, PHP Edition", body: "### Easy Markdown with Syntax Highlighting, PHP Edition\r\n\r\nHi there, and welcome back to this 14th installment of \"I rewrote my blog in another framework that I'm interested in learning, this time in Laravel\".  The trick that we'll be exploring today is that, in contrast to Python (the last version was in Django), PHP's lib story is a bit more sparse for this exact use case.  However, I'm completely pleased with the outcome, so let's get busy!\r\n\r\n## PHP Markdown\r\n\r\nGoogle that term and you'll find this - [https://michelf.ca/projects/php-markdown/](https://michelf.ca/projects/php-markdown/).  This appears to be basically the most robust and well maintained Mardown parser for PHP, so that's where I started.  It's quite simple to add to a Laravel project - `composer require michelf/php-markdown` and then (for the purposes of syntax highlighting) you'll want to use the `MarkdownExtra` class.  Here's the Laravel code for rendering this article body that you're reading right now - \r\n\r\n```php\r\n    public function rendered_body() {\r\n        $parser = new MarkdownExtra();\r\n        $parser->code_class_prefix = \"language-\";\r\n        return $parser->transform($this->body);\r\n    }\r\n```\r\n\r\nPretty darn simple.  The only option `code_class_prefix` will be explained shortly.\r\n\r\n## Syntax Highlighting\r\n\r\nIn contrast to [my previous post on the matter](http://www.ignoredbydinosaurs.com/posts/275-easy-markdown-and-syntax-highlighting-django), the PHP landscape does *not* have [the most robust syntax highlighting parser in the universe](http://pygments.org/) at its disposal.  After casting about in vain for a pure PHP solution I had one of those \"I wonder if there's a javascript lib for this\" moments.  Turns out there are a couple..\r\n\r\n[Prismjs](http://prismjs.com/) is the lib I chose, primarily because of the well known pubs namedropped on the front page and the fact that it has my beloved Twilight theme right out of the box.\r\n\r\nInstallation was straightforward and took about 3 minutes following the instructions on the website.\r\n\r\nThe only trick is that by default, the Markdown parser wraps its code blocks with a class of `lang-$language`, and we need it to be `language-$language` for prism to correctly work its magic.  Luckily this is exactly what that configuration item is for above.\r\n\r\n## Conclusion\r\n\r\nSo that's it!  Literally 10 minutes worth of work between \"I wonder if there's a JS highlighter that I can use instead of trying to do this in pure PHP\" and having this up and running.", slug: "easy-markdown-with-syntax-highlighting-php-edition", summary: nil, previous_id: nil, published: true, pub_date: "2016-11-08 12:00:50"},
  {title: "Speeding up your Platform.sh deploys with Yarn", body: "## Problemspace\r\n\r\nYou have a decent sized project and your deployments are taking a while.  Platform.sh rebuilds your entire application from scratch with each git push so in some cases the process of downloading all those 3rd party packages can take quite a while.  We can and do manage local caches of some composer packages due to our PHP heritage, which helps to make `composer install` a pretty snappy affair, but it's simply not possible to effectively do this with Nodejs. \r\n\r\nCompounding this problem for npm is the fact that npm's dependency graph, that is the dependencies of your dependencies, have to be worked out every time you run npm install.  This can lead to developers in your org installing different versions of packages which *will* cause you problems.  \r\n\r\nMost other package managers overcome this with the use of a \"lockfile\".  A lockfile is a file that's generated when you run `composer install` for the first time, or `bundle install` if you're working Ruby.  A lockfile is the result of the dependnecy graph being worked out, and then specifying the *exact* versions of each package.  This file is checked into Git, and each dev in the project gets the exact same versions of the packages required for the project.\r\n\r\n## Solutionspace\r\n\r\nI was listening to the most recent Laravel podcast over the weekend and they got to talking about a new quasi-npm-replacement that had just come out called [Yarn](https://yarnpkg.com/).\r\n\r\nYarn aims to be an almost drop in replacement for npm.  There are a number of ways of installing it, but the most simple is just `npm install -g yarn`.  My coworkers thought I was trolling them with that, but it makes perfect sense if you think about it.\r\n\r\nThe only other step is run the `yarn` command locally in order to have Yarn traverse your node_modules directory and build up the Yarn lockfile - `yarn.lock`.  Then commit that to git and let's rock and roll on your `.platform.app.yaml`.  We're going to require Yarn in the global dependencies section - \r\n\r\n```yaml\r\ndependencies:\r\n  ruby:\r\n    sass: \"*\" # not required, just assuming\r\n  nodejs:\r\n    gulp-cli: \"*\" # same here\r\n    yarn: \"*\"\r\n```\r\n\r\nAnd then replace `npm install` in your `hook.build` with `yarn install` instead, like so - \r\n\r\n```yaml\r\nhooks:\r\n  build: |\r\n    yarn install\r\n    gulp default // for a Laravel project\r\n```\r\n\r\nThis took my previously 6 minute builds down to about 1 minute.  In other words, the time that it took out of my build phase was longer than the time it took to completely move from npm to Yarn in the first place.  The reason for this speed boost is that Yarn doesn't have to generate the dependency graph every single time (like npm does) since the lockfile, and Yarn downloads the packages in parallel rather than whatever npm does, which must be one at a time.\r\n\r\nIf you're using `npm install` as part of your build step on Platform.sh, it's really a no-brainer.  Check it out!", slug: "speeding-up-your-platformsh-deploys-with-yarn", summary: nil, previous_id: nil, published: true, pub_date: "2016-11-10 17:06:13"},
  {title: "Untitled", body: "I was just remembering [this post](https://www.ignoredbydinosaurs.com/posts/12-twitter-and-hope) from back in the early days of this blog.  Social media was being used to shine a bright light on oppression and old, repressive regimes were falling.\r\n\r\nFast forward to now, the end of 2016.  Social media is being used to organize vastly more repressive regimes, and the ease with which anyone can now spread convincing lies makes it almost impossible to tell what's true anymore.\r\n\r\n_Traditional journalism has never been more important than it is now._", slug: "untitled", summary: nil, previous_id: nil, published: true, pub_date: "2016-11-22 07:09:25"},
  {title: "Setting up SSL on your Platform.sh site with Cloudflare.", body: "## Problemspace\r\n\r\nYou've got a new site on [Platform.sh](https://platform.sh/) that is basically at the end of its development stage, and you're [preparing to go live](https://docs.platform.sh/development/going-live.html).  You've decided on [Cloudflare](https://www.cloudflare.com/) to host your DNS.  Cloudflare is a good choice for smaller sites, and I recommend it often.  Is has a few things going for it - \r\n\r\n- It has a free tier, which gives you pretty much everything you really need for a personal or small business site.\r\n- it has a very robust and modern global network.\r\n\r\nOne of the main features that a modern DNS provider needs to have in order to work with Platform.sh is somethat that's colloquially known as \"CName Flattening\".  This solves an age-old problem (in internet years) - being able to point your \"root domain\" to a domain name rather then an IP address.  [This post](https://blog.cloudflare.com/introducing-cname-flattening-rfc-compliant-cnames-at-a-domains-root/) explains it better than I can, and that's not eh point of this post anyway.\r\n\r\nAnother nice feature of Cloudflare is something they call \"Flexible SSL\".  SSL, HTTPS, TLS, they all mean basically the same thing - that the traffic from your user's browser to your website is being encrypted.  This is very important in a practical sense if you're ever on a public wifi network, for example.  Setting up SSL on your website can be a bit of a headache though, involving buying a cert, generating some rather arcane crytographic keyfiles, installing them correctly on your server, etc.\r\n\r\nCloudflare offers a bit of a relief from this headache with \"flexible SSL\".  That means that your site can use Cloudflare's SSL cert to encrypt the traffic from user to Cloudflare (remember, cloudflare is sitting in between your users and your website's server).  Traffic from Cloudflare to your website then travels unencrypted over plain old HTTP.  This is \"suboptimal\", but it does alleviate some of the attack vectors on your users.\r\n\r\n```\r\nCloudflare's \"Flexible SSL\" option\r\n        HTTPS                   HTTP\r\nUser ----->----> Cloudflare ----->----> \"Origin\" server (your website)\r\n```\r\n\r\nThe other alternatives to this are either running your site unencrypted over HTTP or using \"full SSL\", in which you have to install a cert at the origin in order to encrypt the traffic between Cloudflare and your website.\r\n\r\n```\r\nCloudflare's \"Full SSL\" option\r\n        HTTPS                  HTTPS\r\nUser ----->----> Cloudflare ----->----> \"Origin\" server (your website)\r\n```\r\n\r\n## Getting there...\r\n\r\nSo you've been in development this whole time, you're using HTTPS and redirecting HTTP traffic to HTTPS like a good net citizen and now it's time to go live.  You figure you'll just skip setting up a SSL and use Cloudflare's Flexible option.  You immediately run into a problem though, of a redirect loop.  Here's why..\r\n\r\n- User requests website over HTTP, gets redirected to HTTPS by your application\r\n- HTTPS travels from user to Cloudflare where it's decrypted and handed back to your website over HTTP\r\n- Repeat until browser crashes and tells you you have a redirect loop.\r\n\r\nYou have two options at this point - either allow HTTP traffic as well so that traffic can flow from Cloudflare to your server without being redirected, or go full SSL.\r\n\r\nOption A will not work very well in the end.  Since your app thinks it's running HTTP, all of the in-site generated links will point to the HTTP version of the pages, which means that as soon as someone clicks a link on your site, they'll be on HTTP.  No good.  \r\n\r\n## Solutionspace\r\n\r\n[Get a cert](https://www.namecheap.com/security/ssl-certificates/comodo/positivessl.aspx), [install it](https://docs.platform.sh/development/going-live.html#4---ssltls), and go Full SSL.\r\n\r\n## Soon come\r\n\r\nA post about using [letencrypt](https://letsencrypt.org/) to set up certs on your Platform.sh project.", slug: "setting-up-ssl-on-your-platformsh-site-with-cloudflare", summary: nil, previous_id: nil, published: true, pub_date: "2016-11-30 09:02:55"},
  {title: "So that was fun.", body: "I just switched this blog over to a Silex application for a few weeks, but I never got around to adding in the functionality to add new tickets, and add new tags, and link the two together, and all that other stuff that a framework like Laravel just gives you.\r\n\r\nSo we're back.  ", slug: "so-that-was-fun", summary: nil, previous_id: nil, published: true, pub_date: "2017-04-05 06:38:51"},
  {title: "Check in", body: "So much to say, so much to say..\r\n\r\nSome day I'll write a memoir, but that day is not this day my friends.  The most outwardly memorable thing I've done so far this summer is fly out to Oregon to the String Summit to cover for Mike Devol of Greensky.  Mike had a baby a few days before, and back in the winter he called me up to see if I might be interested in covering for him on some summer festival shows.  Duh, yes.\r\n\r\nSo I had several months to prepare, but not prepare so much that I got actually excited about the gig because it quite likely might not happen.  It was a strange mental exercise.\r\n\r\nI can't even begin to recount the whole weekend here, though it was definitely worth thinking back on.  Friday morning I got to judge the band contest and though they didn't win, this band deserved to win..\r\n\r\n<iframe width=\"853\" height=\"480\" src=\"https://www.youtube.com/embed/s7-W6rZrgho\" frameborder=\"0\" allowfullscreen></iframe>\r\n\r\nSomething about the line \"then I'll have my family band, make play the tunes that they don't really understand\" hit the waterworks button and it got stuck.  I was seriously sobbing for about 30 minutes or so, fortunately I'd bought aviators on the way to the airport.  \r\n\r\nThe whole experience was just so intensely cathartic for me, it's not possible to express my thanks to those guys for letting me do it.\r\n", slug: "check-in", summary: nil, previous_id: nil, published: true, pub_date: "2017-08-22 13:37:12"},
  {title: "The Little Platform.sh Book - Introduction", body: "The internet is hard these days.  \r\n\r\nIt started simply enough - for instance, all you really needed was a Geocities account and some initiative to learn HTML and you could have your own place to put whatever you wanted and make it available to the entire world.  From such simple seeds, complex structures did grow..\r\n\r\nGeocities was permanently shut down in 2009, at once both a tragedy for the loss of so much content, so much _history_, and yet also a wake-up call for so many of us that we needed to have control over our own content, applications, and businesses.  Many of us chose to host our own websites so that a seemingly arbitrary decision from some faceless corporate power couldn't upend overnight what we'd created over years.  But that decision also made things a little more complicated.\r\n\r\nAt that point all you really needed was a web hosting account somewhere with Apache HTTPD installed as a web server.  Then you could edit and upload your HTML just as before, only this time it couldn't be taken away from you because you were (more) in control of the setting.  \r\n\r\nSomewhere along the way you were likely introduced to something like Wordpress or Drupal or Ruby on Rails, which were all essentially frontends to some kind of database, and that database is where you would store your content.  This was a wonderful development, not only enabling non-technical users  to publish content to the web without knowing anything about HTML or FTP, but also for small businesses to be able to create their first eCommerce stores online and take advantage of an entire global market.  Again, this was the march of technological progress creating new opportunities for primitive man to make use of highly advanced tools without having a Computer Science degree.\r\n\r\nBut, as the saying goes, with great power comes great responsibility.  The responsibility in this case is that of having to set up and maintain your own web hosting infrastructure.  Some of us like this kind of work - setting up and managing fleets of servers with all manner of different pieces of software on them to serve the world's internet needs - but some of us really just like writing code and building websites and applications.\r\n\r\nPlatform.sh is a new breed of hosting service, and was created expressly for this second group of technologists.  \r\n\r\nPlatform.sh gives you an incredibly flexible set of tools with which you can build and deploy a huge range of different types of applications to the world with the click of a button or a push to a Git repo.  Platform.sh currently has support for PHP, Ruby, Python, and Node.js with other runtimes like Go and Java either in public beta or in planning mode internally.\r\n\r\nPlatform.sh was also architected from the ground up to fulfill the promise of Git as a codebase management tool.  No longer are your working feature branches trapped on your machine or in a remote repo with no context to make them live (and testable) for your teammates.  Platform.sh will provision a fully functional, completely segregated hosting environment for each one of your Git branches, with all of the data and uploaded files that your app's codebase needs to be a fully functioning application.\r\n\r\nLastly, Platform.sh was designed to grow with your project as your project's needs evolve.  The days of filing support tickets to have a PHP extension or a new database server installed are effectively over.  Not only will we provision all of your application's software dependencies - Redis, MySQL, ElasticSearch, and many others - but you can choose from many different versions of each of these dependencies.  Want to see how `ruby:2.4` or `python:3.6` or `postgresql:9.6` or `php:7.2-rc` improves your app's performance?  We always endeavor to provide the latest versions of each so that upgrading the underlying software on which your application runs is as simple and painless as changing a line of configuration.  \r\n\r\nIf this sounds like something that might take some of the tedium out of your development day or possibly increase the velocity with which your business can bring new ideas and features to your customers then please, read on.  In the coming chapters we'll walk you through getting started with Platform.sh by stepping you through setting up your first project and deploying a simple app with a few commands.  After that we'll dive deep into more advanced topics such as -\r\n\r\n- Configuring your project with YAML\r\n\t- routes.yaml\r\n\t- services.yaml\r\n\t- .platform.app.yaml or \"app yaml\"\r\n- Managing and interacting with various administrative functions of your project both via the user interface as well as the Platform CLI\r\n\t- branching\r\n\t- merging\r\n\t- backups\r\n- How all of this seeming magic works under the hood\r\n\t- containers\r\n\t- environment variables\r\n\t- copy on write\r\n\r\nSo, welcome to The Little Platform.sh Book!  We sincerely hope to make internet-ing a little bit easier for you and your team.", slug: "the-little-platformsh-book-introduction", summary: nil, previous_id: nil, published: true, pub_date: "2017-08-23 07:56:31"},
  {title: "part 2", body: "# The Book of Platform - 2.md\r\n\r\n## Getting started\r\n\r\nIn this chapter we'll walk through the process of setting up and deploying your very first project on Platform.sh.  We'll go through the free trial and checkout process, clone a simple project from a public GitHub repository, and push it to your new Platform.sh project.  \r\n\r\nAfter that we'll dazzle you with how easy it is to set up development environments for various features with the click of a button.  We'll make a couple of simple code changes and deploy them each separately to their own hosting environments and then merge everything back together to get it ready for a production release.\r\n\r\n## Step 1 - new project creation\r\n\r\nThe easiest way to get started is to take advantage of Platform.sh's free 1 month trial.  This will allow you to step through this on boarding tutorial free of charge and get familiar with the way we make it easier for you to decide for yourself whether or not Platform.sh is a good fit for your team.\r\n\r\nOn the front page of [Platform.sh's website](https://platform.sh) you can find a link to a Free Trial, currently at top right of the main navigation.  Clicking through that brings you to the account creation workflow.  I personally prefer just creating an account on the site for whatever given service, but you are also free to take advantage of our Bitbucket, GitHub, or Google integrations for authentication.  \r\n\r\n/Screen Shot 2017-08-28 at 3.34.19 PM.png\r\n", slug: "part-2", summary: nil, previous_id: nil, published: false, pub_date: "2017-08-28 11:38:54"},
  {title: "Easy markdown and syntax highlighting in Django", body: "Hi there, I'm new to Django.  I love the contributed ecosystem, but all of the options that I found there for dealing with Markdown were just too heavy.  I didn't need a Wysiwyg editor, I just wanted an output filter.  As it turns out this is exceptionally easy to do!\r\n\r\n---\r\n\r\nPython has a really amazing lib situation, so I just found the smallest python Markdown lib that I could, it's called [\"mistune\"](https://mistune.readthedocs.org/en/latest/).  Do a `pip install mistune`.\r\n\r\nSo within your app, let's call it \"blog\", create a directory called `templatetags`.  By the way, this is all pretty easy to parse out of [their killer documentation](https://docs.djangoproject.com/en/1.9/howto/custom-template-tags/).  Create a file in there called `markdownify.py`.  \r\n\r\n~~~python\r\n    # blog/templatetags/markdownify.py\r\nfrom django import template\r\nimport mistune\r\n    \r\nregister = template.library()\r\n    \r\n@register.filter\r\ndef markdown(value):\r\n    markdown = mistune.Markdown()\r\n    return markdown(value)\r\n\r\n~~~\r\n\r\nIt is as simple as that.  In whatever template you'll actually want to be rendering markdown, you'll need to include this templatetag with \r\n\r\n~~~python\r\n    {% load markdownify %}\r\n~~~\r\n\r\nat the top of the template.  Then you'll just pipe the output that you want to render like you do in every other template lib ---\r\n\r\n~~~html\r\n{{ post.body | markdown | safe }}\r\n~~~\r\n\r\nThe full example of [the template that renders this page](https://github.com/JGrubb/django-blog/blob/master/blog/templates/blog/post_detail.html) is here.\r\n\r\n---\r\n\r\n### But wait, there's more!\r\n\r\nHow about syntax highlighting?  We're programmers after all, and Python just happens to have the great-granddaddy of all syntax highlighting libs in [Pygments](http://pygments.org/).  I've known of Pygments for years, since it used to be a requirement of one of the Ruby libs to Markdown rendering (if you wanted synta highlighting).  In other words, even Ruby leaned on Pygments for a great number of years.\r\n\r\nSo `pip install pygments`.  Then scroll down the page on the Mistune docs and follow along.  You'll be adding some code to the `markdownify.py` file.\r\n\r\n~~~python\r\nfrom django import template\r\nimport mistune\r\nfrom pygments import highlight\r\nfrom pygments.lexers import get_lexer_by_name\r\nfrom pygments.formatters import HtmlFormatter\r\n\r\nregister = template.Library()\r\n\r\nclass HighlightRenderer(mistune.Renderer):\r\n    def block_code(self, code, lang):\r\n        if not lang:\r\n            return '\\n<pre><code>%s</code></pre>\\n' % \\\r\n                mistune.escape(code)\r\n        lexer = get_lexer_by_name(lang, stripall=True)\r\n        formatter = HtmlFormatter()\r\n        return highlight(code, lexer, formatter)\r\n\r\n@register.filter\r\ndef markdown(value):\r\n    renderer = HighlightRenderer()\r\n    markdown = mistune.Markdown(renderer=renderer)\r\n    return markdown(value)\r\n~~~\r\n\r\nThat `HighlightRenderer` class is directly out of the Mistune docs, so thank you Mistune Author!  That is seriously all it takes, but you'll need a stylesheet, of which there are plenty.  I searched for \"pygments stylesheets\" and came across [this project](https://github.com/richleland/pygments-css), so you'll need to pick one of those themes and get it into your project somewhere.  By default, the zenburn theme is expecting the wrapper div to have a CSS class of 'codehilite' instead of what it needs - 'highlight', so a quick search and replace and I had syntax highlighting in less than 5 minutes.\r\n\r\n---\r\n\r\n*edit Sept 2016*\r\n\r\nSo once you manage your way through all this, you'll be able to use \"[fenced code blocks](https://help.github.com/articles/creating-and-highlighting-code-blocks/)\" in your posts.  They look like this --\r\n\r\n~~~\r\n```php\r\n<?php \r\n\r\nfunction foo() {\r\n  /// ...\r\n}\r\n```\r\n~~~\r\n\r\nbecomes\r\n\r\n```php\r\n<?php \r\n\r\nfunction foo() {\r\n  /// ...\r\n}\r\n```\r\n\r\nYou can use either a trio of tildes `~` or  backticks \\` to open and close one of those code blocks, and I typically just pass the file extension and it generally works.  You can also write out the full name of the language.\r\n\r\n~~~\r\n```py\r\ndef method():\r\n  return \"foo\"\r\n```\r\n~~~\r\n\r\nbecomes\r\n\r\n```python\r\ndef method():\r\n  return \"foo\"\r\n```\r\n\r\nJust be advised that it is possible to fatally hose your website if you happen to pass a language for which Pygments doesn't have a \"lexer\", meaning that it has no idea how to highlight the syntax of that language.  That happened to me with some Varnish config files that I tried to highlight with a `.vcl` extension on them.  I don't remember how I fixed it but I'm pretty sure it required going directly to the database to change the post since my site was toast.  You are warned.", slug: "easy-markdown-and-syntax-highlighting-django", summary: "Hi there, I'm new to Django.  I love the contributed ecosystem, but all of the options that I found there for dealing with Markdown were just too heavy.  I didn't need a Wysiwyg editor, I just wanted an output filter.  As it turns out this is exceptionally easy to do!", previous_id: nil, published: true, pub_date: "2016-03-23 16:05:07"}
])
Redirect.create!([
  {old_path: "/2014/02/disable-chrome-notifier", new_path: "/posts/228-disable-chrome-notifier"},
  {old_path: "/2010/10/more-wordpress", new_path: "/posts/217-more-wordpress"},
  {old_path: "/2015/07/intermediate-drush-hacking-drush-aliases", new_path: "/posts/264-intermediate-drush-hacking-drush-aliases"},
  {old_path: "/2015/10/memcached-a-really-interesting-piece-of-gear", new_path: "/posts/265-memcached-a-really-interesting-piece-of-gear"},
  {old_path: "/2015/10/drupal-logstash-syslog-config", new_path: "/posts/266-drupal-logstash-syslog-config"},
  {old_path: "/2015/10/setting-up-elasticsearch-on-ec2", new_path: "/posts/267-setting-up-elasticsearch-on-ec2"},
  {old_path: "/2010/07/pruning-the-ego", new_path: "/posts/268-pruning-the-ego"},
  {old_path: "/2014/01/drupal-too-big-to-fail", new_path: "/posts/2-drupal-too-big-to-fail"},
  {old_path: "/2014/01/i-haz-hacks", new_path: "/posts/1-i-haz-hacks"},
  {old_path: "/2009/02/just-in-case", new_path: "/posts/3-just-in-case"},
  {old_path: "/2009/02/band-meetings", new_path: "/posts/4-band-meetings"},
  {old_path: "/2009/03/holy-crappoli", new_path: "/posts/8-holy-crappoli"},
  {old_path: "/2015/01/merging-two-drupal-sites-together-with-migrate-module", new_path: "/posts/249-merging-two-drupal-sites-together-with-migrate-module"},
  {old_path: "/2015/01/the-phases-of-iphone-ownership-the-end-of-the-road", new_path: "/posts/251-the-phases-of-iphone-ownership-the-end-of-the-road"},
  {old_path: "/2014/02/big-sky-big-grass", new_path: "/posts/221-big-sky-big-grass"},
  {old_path: "/2015/02/brain-dump-drupal-and-fastly", new_path: "/posts/252-brain-dump-drupal-and-fastly"},
  {old_path: "/2009/02/saas", new_path: "/posts/5-saas"},
  {old_path: "/2014/02/building-a-drop-down-menu-from-scratch", new_path: "/posts/222-building-a-drop-down-menu-from-scratch"},
  {old_path: "/2009/02/aig", new_path: "/posts/6-aig"},
  {old_path: "/2014/02/getting-up-to-speed-with-rails-4-russian-doll-caching-and-redis", new_path: "/posts/224-getting-up-to-speed-with-rails-4-russian-doll-caching-and-redis"},
  {old_path: "/2011/11/something-about-bluegrass", new_path: "/posts/270-something-about-bluegrass"},
  {old_path: "/2009/03/twitter-and-hope", new_path: "/posts/12-twitter-and-hope"},
  {old_path: "/2009/03/the-enemy", new_path: "/posts/14-the-enemy"},
  {old_path: "/2015/01/the-absolute-bare-minimum-you-gotta-know-on-the-command-line", new_path: "/posts/250-the-absolute-bare-minimum-you-gotta-know-on-the-command-line"},
  {old_path: "/2009/03/introduction", new_path: "/posts/9-introduction"},
  {old_path: "/2009/03/chapter1b", new_path: "/posts/10-chapter1b"},
  {old_path: "/2009/05/ibd-manifesto", new_path: "/posts/11-ibd-manifesto"},
  {old_path: "/2010/04/picking-it-up", new_path: "/posts/269-picking-it-up"},
  {old_path: "/2009/08/wanna-see-way-too-much-flash", new_path: "/posts/19-wanna-see-way-too-much-flash"},
  {old_path: "/2014/02/compiling-nginx", new_path: "/posts/225-compiling-nginx"},
  {old_path: "/2015/02/my-favorite-technical-interview-question", new_path: "/posts/253-my-favorite-technical-interview-question"},
  {old_path: "/2015/02/after-one-week-of-laravel", new_path: "/posts/254-after-one-week-of-laravel"},
  {old_path: "/2009/03/preamble", new_path: "/posts/7-preamble"},
  {old_path: "/2014/01/parsing-query-string-parameters-out-with-javascript", new_path: "/posts/13-parsing-query-string-parameters-out-with-javascript"},
  {old_path: "/2009/03/busybusy", new_path: "/posts/15-busybusy"},
  {old_path: "/2009/12/geek-club", new_path: "/posts/16-geek-club"},
  {old_path: "/2014/02/why-doesn-t-authorized_keys-work", new_path: "/posts/223-why-doesn-t-authorized_keys-work"},
  {old_path: "/2014/02/dear-blog", new_path: "/posts/226-dear-blog"},
  {old_path: "/2009/03/atleasttheresthis", new_path: "/posts/17-atleasttheresthis"},
  {old_path: "/2009/03/just-another-reason", new_path: "/posts/18-just-another-reason"},
  {old_path: "/2010/01/linkto-seven-years-gone", new_path: "/posts/20-linkto-seven-years-gone"},
  {old_path: "/2010/05/open-sourcing-the-idea", new_path: "/posts/21-open-sourcing-the-idea"},
  {old_path: "/2014/02/where-is-the-homebrew-memcached-config-file", new_path: "/posts/227-where-is-the-homebrew-memcached-config-file"},
  {old_path: "/2014/03/almost-every-yoshitoshi-podcast", new_path: "/posts/230-almost-every-yoshitoshi-podcast"},
  {old_path: "/2010/09/my-little-ponys-first-shell-script", new_path: "/posts/22-my-little-ponys-first-shell-script"},
  {old_path: "/2012/07/how-and-why-set-your-mac-rails-development-part-1", new_path: "/posts/23-how-and-why-set-your-mac-rails-development-part-1"},
  {old_path: "/2012/06/state-bluegrass", new_path: "/posts/220-state-bluegrass"},
  {old_path: "/2011/02/meta", new_path: "/posts/36-meta"},
  {old_path: "/2009/08/tall-trees-crowding-out-saplings", new_path: "/posts/76-tall-trees-crowding-out-saplings"},
  {old_path: "/2014/03/on-beta-invites", new_path: "/posts/229-on-beta-invites"},
  {old_path: "/2014/03/building-a-mobile-app-with-drupal-and-angular-part-1", new_path: "/posts/231-building-a-mobile-app-with-drupal-and-angular-part-1"},
  {old_path: "/2014/03/an-open-letter-to-dennis", new_path: "/posts/232-an-open-letter-to-dennis"},
  {old_path: "/2015/06/what-is-my-path", new_path: "/posts/234-what-is-my-path"},
  {old_path: "/2012/07/how-test-meta-tags-casperjs", new_path: "/posts/24-how-test-meta-tags-casperjs"},
  {old_path: "/2009/04/chapter-4-api", new_path: "/posts/54-chapter-4-api"},
  {old_path: "/2009/05/on-miles", new_path: "/posts/55-on-miles"},
  {old_path: "/2010/12/facebook-may-rule-world-you-still-need-your-own-website", new_path: "/posts/158-facebook-may-rule-world-you-still-need-your-own-website"},
  {old_path: "/2014/04/function-foocontroller-is-undefined", new_path: "/posts/233-function-foocontroller-is-undefined"},
  {old_path: "/2009/03/i-did-it", new_path: "/posts/27-i-did-it"},
  {old_path: "/2009/06/bluegrassintelligencercom", new_path: "/posts/67-bluegrassintelligencercom"},
  {old_path: "/2014/08/cool-nginx-feature-of-the-week", new_path: "/posts/236-cool-nginx-feature-of-the-week"},
  {old_path: "/2014/08/drupal-angular-tidbits-multisite", new_path: "/posts/238-drupal-angular-tidbits-multisite"},
  {old_path: "/2012/07/git-and-dropbox", new_path: "/posts/25-git-and-dropbox"},
  {old_path: "/2012/07/jquery-noob-script-not-working", new_path: "/posts/26-jquery-noob-script-not-working"},
  {old_path: "/2009/03/standing-waves", new_path: "/posts/28-standing-waves"},
  {old_path: "/2009/03/chapter1a", new_path: "/posts/29-chapter1a"},
  {old_path: "/2009/06/wakarusa", new_path: "/posts/63-wakarusa"},
  {old_path: "/2014/07/enlightenment", new_path: "/posts/235-enlightenment"},
  {old_path: "/2015/02/the-musician-s-curse", new_path: "/posts/255-the-musician-s-curse"},
  {old_path: "/2009/04/simpletons-guide-web-server-analysis", new_path: "/posts/30-simpletons-guide-web-server-analysis"},
  {old_path: "/2009/04/trent-reznor", new_path: "/posts/31-trent-reznor"},
  {old_path: "/2009/04/band-meetings-again", new_path: "/posts/32-band-meetings-again"},
  {old_path: "/2009/02/numero-uno", new_path: "/posts/33-numero-uno"},
  {old_path: "/2013/01/using-mysql-command-line-media-temples-grid-server", new_path: "/posts/34-using-mysql-command-line-media-temples-grid-server"},
  {old_path: "/2009/07/ms-long-slow-decline", new_path: "/posts/87-ms-long-slow-decline"},
  {old_path: "/2014/08/the-drush-command-mongodb-migrate-prep-could-not-be-found", new_path: "/posts/237-the-drush-command-mongodb-migrate-prep-could-not-be-found"},
  {old_path: "/2010/12/bass-influence-countdown-number-4", new_path: "/posts/35-bass-influence-countdown-number-4"},
  {old_path: "/2014/09/deconstructing-the-google-analytics-tag", new_path: "/posts/239-deconstructing-the-google-analytics-tag"},
  {old_path: "/2011/05/on-the-music-business", new_path: "/posts/37-on-the-music-business"},
  {old_path: "/2013/05/finding-pesky-acquia-host-entry-your-development-environment", new_path: "/posts/38-finding-pesky-acquia-host-entry-your-development-environment"},
  {old_path: "/2009/04/getting-started-rails", new_path: "/posts/39-getting-started-rails"},
  {old_path: "/2012/12/altering-drupal-password-reset-process", new_path: "/posts/40-altering-drupal-password-reset-process"},
  {old_path: "/2013/05/nginx-unicorn-redmine-and-my-truncated-attachment-downloads", new_path: "/posts/42-nginx-unicorn-redmine-and-my-truncated-attachment-downloads"},
  {old_path: "/2009/07/rust-kansas", new_path: "/posts/74-rust-kansas"},
  {old_path: "/2015/03/setting-up-jmx-on-mule-esb", new_path: "/posts/256-setting-up-jmx-on-mule-esb"},
  {old_path: "/2013/07/contributing-open-source-projects", new_path: "/posts/44-contributing-open-source-projects"},
  {old_path: "/2013/08/few-things-drupal-dev-should-know-about-ruby", new_path: "/posts/45-few-things-drupal-dev-should-know-about-ruby"},
  {old_path: "/2009/04/file-under-random-memory", new_path: "/posts/46-file-under-random-memory"},
  {old_path: "/2010/01/runtime", new_path: "/posts/108-runtime"},
  {old_path: "/2009/04/chapter-3-dev-platform", new_path: "/posts/47-chapter-3-dev-platform"},
  {old_path: "/2009/07/phases-iphone-ownership-continued", new_path: "/posts/48-phases-iphone-ownership-continued"},
  {old_path: "/2009/10/finding-your-co-founders", new_path: "/posts/50-finding-your-co-founders"},
  {old_path: "/2014/10/getting-started-with-headless-drupal", new_path: "/posts/241-getting-started-with-headless-drupal"},
  {old_path: "/2015/04/a-url-strategy", new_path: "/posts/258-a-url-strategy"},
  {old_path: "/2015/05/laravel-mutator-not-working", new_path: "/posts/259-laravel-mutator-not-working"},
  {old_path: "/2011/03/title", new_path: "/posts/51-title"},
  {old_path: "/2014/10/tracking-pixels-101", new_path: "/posts/242-tracking-pixels-101"},
  {old_path: "/2015/05/the-best-least-understood-aspect-of-drupal-multisite-config", new_path: "/posts/260-the-best-least-understood-aspect-of-drupal-multisite-config"},
  {old_path: "/2015/05/some-more-ruminating-about-laravel", new_path: "/posts/261-some-more-ruminating-about-laravel"},
  {old_path: "/2015/06/what-is-curl_setopt", new_path: "/posts/262-what-is-curl_setopt"},
  {old_path: "/2015/06/for-my-friend-who-s-quitting-a-band", new_path: "/posts/263-for-my-friend-who-s-quitting-a-band"},
  {old_path: "/2009/04/stanford-iphone-class", new_path: "/posts/41-stanford-iphone-class"},
  {old_path: "/2013/07/javascript-named-function-declaration-or-assign-variable", new_path: "/posts/43-javascript-named-function-declaration-or-assign-variable"},
  {old_path: "/2009/07/reddit", new_path: "/posts/49-reddit"},
  {old_path: "/2013/12/weaning-jquery-animations-css-transitions", new_path: "/posts/52-weaning-jquery-animations-css-transitions"},
  {old_path: "/2013/12/first-experiences-drupal-and-hhvm", new_path: "/posts/53-first-experiences-drupal-and-hhvm"},
  {old_path: "/2009/05/change-gonna-come", new_path: "/posts/56-change-gonna-come"},
  {old_path: "/2009/03/recording-technology", new_path: "/posts/97-recording-technology"},
  {old_path: "/2009/02/the-road", new_path: "/posts/57-the-road"},
  {old_path: "/2009/02/language", new_path: "/posts/58-language"},
  {old_path: "/2009/04/coolest-iphone-app-ever", new_path: "/posts/59-coolest-iphone-app-ever"},
  {old_path: "/2014/10/throttling-window-onscroll", new_path: "/posts/244-throttling-window-onscroll"},
  {old_path: "/2014/10/omniture-sucks", new_path: "/posts/245-omniture-sucks"},
  {old_path: "/2014/10/testing-spotify-embed", new_path: "/posts/246-testing-spotify-embed"},
  {old_path: "/2010/01/the-newby-web-programmer-episode-2", new_path: "/posts/60-the-newby-web-programmer-episode-2"},
  {old_path: "/2009/05/seo-in-action", new_path: "/posts/61-seo-in-action"},
  {old_path: "/2009/05/seths-blog-when-writer-becomes-publisher", new_path: "/posts/62-seths-blog-when-writer-becomes-publisher"},
  {old_path: "/2009/06/media-temple", new_path: "/posts/64-media-temple"},
  {old_path: "/2009/06/chapter-5-domains", new_path: "/posts/65-chapter-5-domains"},
  {old_path: "/2010/01/newby-web-programmer-episode-1", new_path: "/posts/107-newby-web-programmer-episode-1"},
  {old_path: "/2014/11/for-my-friend", new_path: "/posts/247-for-my-friend"},
  {old_path: "/2009/03/the-following-disclaimer", new_path: "/posts/66-the-following-disclaimer"},
  {old_path: "/2009/05/this-blog", new_path: "/posts/88-this-blog"},
  {old_path: "/2009/03/preface", new_path: "/posts/72-preface"},
  {old_path: "/2010/12/migrating-blog-drupal-jekyll", new_path: "/posts/114-migrating-blog-drupal-jekyll"},
  {old_path: "/2009/07/fake-steve-jobs-new-chrome-os", new_path: "/posts/68-fake-steve-jobs-new-chrome-os"},
  {old_path: "/2009/07/little-programmer-humor", new_path: "/posts/69-little-programmer-humor"},
  {old_path: "/2009/12/todays-discoveries", new_path: "/posts/70-todays-discoveries"},
  {old_path: "/2009/12/quitting-band", new_path: "/posts/71-quitting-band"},
  {old_path: "/2009/10/apparent-risk-and-actual-risk", new_path: "/posts/116-apparent-risk-and-actual-risk"},
  {old_path: "/2009/10/chapter-6a-version-control", new_path: "/posts/117-chapter-6a-version-control"},
  {old_path: "/2010/10/random-idea", new_path: "/posts/120-random-idea"},
  {old_path: "/2009/11/truly-fascinating", new_path: "/posts/125-truly-fascinating"},
  {old_path: "/2009/04/album-week", new_path: "/posts/73-album-week"},
  {old_path: "/2009/07/phases-iphone-ownership-beginning", new_path: "/posts/75-phases-iphone-ownership-beginning"},
  {old_path: "/2009/07/allans-guide-running-facebook-campaign", new_path: "/posts/77-allans-guide-running-facebook-campaign"},
  {old_path: "/2010/03/akamai-plist-error-in-console-you-downloaded-an-adobe-product-didnt-you", new_path: "/posts/78-akamai-plist-error-in-console-you-downloaded-an-adobe-product-didnt-you"},
  {old_path: "/2009/07/ie6", new_path: "/posts/79-ie6"},
  {old_path: "/2009/07/phases-iphone-ownership-hazards-love", new_path: "/posts/80-phases-iphone-ownership-hazards-love"},
  {old_path: "/2009/07/twitter-101", new_path: "/posts/81-twitter-101"},
  {old_path: "/2009/07/carbon-emissions-reduction-vice-president-biden-style", new_path: "/posts/82-carbon-emissions-reduction-vice-president-biden-style"},
  {old_path: "/2009/07/new-years-haiku", new_path: "/posts/83-new-years-haiku"},
  {old_path: "/2009/08/palins-resignation-edited-version", new_path: "/posts/84-palins-resignation-edited-version"},
  {old_path: "/2009/12/record-labels", new_path: "/posts/131-record-labels"},
  {old_path: "/2009/08/fake-steve-itablet", new_path: "/posts/85-fake-steve-itablet"},
  {old_path: "/2009/11/now-what-part-2", new_path: "/posts/86-now-what-part-2"},
  {old_path: "/2009/08/counterpoint-anyone-yes-you", new_path: "/posts/103-counterpoint-anyone-yes-you"},
  {old_path: "/2009/05/site-about-something-richard-geller", new_path: "/posts/89-site-about-something-richard-geller"},
  {old_path: "/2009/08/do-you-have-computer-do-you-care-about-any-files", new_path: "/posts/90-do-you-have-computer-do-you-care-about-any-files"},
  {old_path: "/2009/06/giddy-up", new_path: "/posts/91-giddy-up"},
  {old_path: "/2009/08/template-writing-music-business-plan", new_path: "/posts/92-template-writing-music-business-plan"},
  {old_path: "/2009/12/launch-fast-and-iterate", new_path: "/posts/129-launch-fast-and-iterate"},
  {old_path: "/2010/05/the-newby-web-programmer-episode-3", new_path: "/posts/142-the-newby-web-programmer-episode-3"},
  {old_path: "/2009/08/at-31-being-professional-musician", new_path: "/posts/101-at-31-being-professional-musician"},
  {old_path: "/2009/12/could-i-ask-favor", new_path: "/posts/98-could-i-ask-favor"},
  {old_path: "/2009/07/psychology-finance-war-cards", new_path: "/posts/93-psychology-finance-war-cards"},
  {old_path: "/2009/08/golden-age-software-business", new_path: "/posts/94-golden-age-software-business"},
  {old_path: "/2010/06/ibd-update", new_path: "/posts/146-ibd-update"},
  {old_path: "/2009/11/now-what-part-3", new_path: "/posts/95-now-what-part-3"},
  {old_path: "/2009/08/the-concert-biz", new_path: "/posts/96-the-concert-biz"},
  {old_path: "/2010/06/ignored-dinosaurs-3", new_path: "/posts/145-ignored-dinosaurs-3"},
  {old_path: "/2013/01/so-yeah-i-got-job", new_path: "/posts/150-so-yeah-i-got-job"},
  {old_path: "/2010/05/a-tale-of-two-doc-sections", new_path: "/posts/99-a-tale-of-two-doc-sections"},
  {old_path: "/2013/05/homebrew-postgres-install-issues-mac-os-x-server", new_path: "/posts/155-homebrew-postgres-install-issues-mac-os-x-server"},
  {old_path: "/2010/12/net-neutrality-and-golden-goose", new_path: "/posts/159-net-neutrality-and-golden-goose"},
  {old_path: "/2011/02/life-after-earth", new_path: "/posts/161-life-after-earth"},
  {old_path: "/2010/01/drupal", new_path: "/posts/100-drupal"},
  {old_path: "/2009/08/anybody-wanna-pile-apple-you-there", new_path: "/posts/102-anybody-wanna-pile-apple-you-there"},
  {old_path: "/2009/10/holy-crap", new_path: "/posts/112-holy-crap"},
  {old_path: "/2012/06/markdown-rails-3-redcarpet", new_path: "/posts/164-markdown-rails-3-redcarpet"},
  {old_path: "/2009/04/chapter2-databases", new_path: "/posts/166-chapter2-databases"},
  {old_path: "/2010/03/how-to-embed-a-flash-file-in-a-webpage", new_path: "/posts/175-how-to-embed-a-flash-file-in-a-webpage"},
  {old_path: "/2009/10/attention-potential-future-bloggers-world", new_path: "/posts/104-attention-potential-future-bloggers-world"},
  {old_path: "/2010/02/race-to-running-software", new_path: "/posts/105-race-to-running-software"},
  {old_path: "/2011/06/quick-trip-panic-room", new_path: "/posts/167-quick-trip-panic-room"},
  {old_path: "/2010/07/here-they-are", new_path: "/posts/106-here-they-are"},
  {old_path: "/2009/02/health", new_path: "/posts/177-health"},
  {old_path: "/2009/07/wordpress-iphone", new_path: "/posts/185-wordpress-iphone"},
  {old_path: "/2009/07/last-gasp-album", new_path: "/posts/187-last-gasp-album"},
  {old_path: "/2009/07/when-social-media-becomes-weapon", new_path: "/posts/188-when-social-media-becomes-weapon"},
  {old_path: "/2009/08/had-weirdest-dream-last-night", new_path: "/posts/192-had-weirdest-dream-last-night"},
  {old_path: "/2009/10/importance-blind-carbon-copy", new_path: "/posts/194-importance-blind-carbon-copy"},
  {old_path: "/2009/08/plans-plans-plans", new_path: "/posts/109-plans-plans-plans"},
  {old_path: "/2011/09/permissions-abuse-or-facebook-shell-game", new_path: "/posts/181-permissions-abuse-or-facebook-shell-game"},
  {old_path: "/2009/12/revision", new_path: "/posts/197-revision"},
  {old_path: "/2009/09/programming-classes", new_path: "/posts/110-programming-classes"},
  {old_path: "/2010/01/facebooks-new-no-privacy-policy", new_path: "/posts/199-facebooks-new-no-privacy-policy"},
  {old_path: "/2009/10/communities-creators", new_path: "/posts/113-communities-creators"},
  {old_path: "/2010/01/did-you-know", new_path: "/posts/213-did-you-know"},
  {old_path: "/2009/12/dear-wood-brothers", new_path: "/posts/130-dear-wood-brothers"},
  {old_path: "/2009/03/good-website-example", new_path: "/posts/207-good-website-example"},
  {old_path: "/2010/07/apple-itunes-and-anti-trust", new_path: "/posts/215-apple-itunes-and-anti-trust"},
  {old_path: "/2012/06/unresponsive-touch-uis", new_path: "/posts/191-unresponsive-touch-uis"},
  {old_path: "/2010/12/top-3-albums-year", new_path: "/posts/218-top-3-albums-year"},
  {old_path: "/2012/05/database-migrations-codeigniter-101", new_path: "/posts/200-database-migrations-codeigniter-101"},
  {old_path: "/2014/09/spammers", new_path: "/posts/240-spammers"},
  {old_path: "/2014/10/the-default-fastly-vcl", new_path: "/posts/243-the-default-fastly-vcl"},
  {old_path: "/2010/05/open-source-and-why-its-cool", new_path: "/posts/144-open-source-and-why-its-cool"},
  {old_path: "/2014/12/dear-me-5-years-ago", new_path: "/posts/248-dear-me-5-years-ago"},
  {old_path: "/2010/07/installing-drush-media-temple-grid-server", new_path: "/posts/111-installing-drush-media-temple-grid-server"},
  {old_path: "/2015/04/angular-protractor-tests-and-sauce-connect-config", new_path: "/posts/257-angular-protractor-tests-and-sauce-connect-config"},
  {old_path: "/2010/09/real-innovation-publishing-industry", new_path: "/posts/147-real-innovation-publishing-industry"},
  {old_path: "/2010/09/keeping-it", new_path: "/posts/115-keeping-it"},
  {old_path: "/2009/10/chapter-6b-laymans-introduction-database-migrations-ruby-rails", new_path: "/posts/118-chapter-6b-laymans-introduction-database-migrations-ruby-rails"},
  {old_path: "/2009/02/iphone-pr-tool", new_path: "/posts/119-iphone-pr-tool"},
  {old_path: "/2012/08/blog-v7-i-think", new_path: "/posts/121-blog-v7-i-think"},
  {old_path: "/2012/09/thing-about-drupal-again", new_path: "/posts/122-thing-about-drupal-again"},
  {old_path: "/2009/11/now-what-part-1", new_path: "/posts/123-now-what-part-1"},
  {old_path: "/2009/10/on-the-road", new_path: "/posts/124-on-the-road"},
  {old_path: "/2009/11/programmers-please-enter", new_path: "/posts/126-programmers-please-enter"},
  {old_path: "/2009/11/creative-fire", new_path: "/posts/127-creative-fire"},
  {old_path: "/2013/04/converting-mp3s-ogg-files-background-sidekiq-and-ffmpeg", new_path: "/posts/128-converting-mp3s-ogg-files-background-sidekiq-and-ffmpeg"},
  {old_path: "/2013/03/infamous-phil-gig", new_path: "/posts/132-infamous-phil-gig"},
  {old_path: "/2009/12/more-quitting-band", new_path: "/posts/133-more-quitting-band"},
  {old_path: "/2009/12/twitter-api-finished-now-what", new_path: "/posts/134-twitter-api-finished-now-what"},
  {old_path: "/2009/12/try-ruby", new_path: "/posts/135-try-ruby"},
  {old_path: "/2009/12/honestly", new_path: "/posts/136-honestly"},
  {old_path: "/2009/12/airport-security", new_path: "/posts/137-airport-security"},
  {old_path: "/2010/01/well-that-was-fun", new_path: "/posts/138-well-that-was-fun"},
  {old_path: "/2010/05/i-had-this-idea-for-a-band", new_path: "/posts/139-i-had-this-idea-for-a-band"},
  {old_path: "/2010/01/speechless", new_path: "/posts/140-speechless"},
  {old_path: "/2009/05/welcome-new-site", new_path: "/posts/184-welcome-new-site"},
  {old_path: "/2010/02/i-have-only-one-regret", new_path: "/posts/141-i-have-only-one-regret"},
  {old_path: "/2010/05/open-source-the-music-business", new_path: "/posts/143-open-source-the-music-business"},
  {old_path: "/2010/12/ibd-version-50-and-top-5-bass-influences", new_path: "/posts/148-ibd-version-50-and-top-5-bass-influences"},
  {old_path: "/2011/10/overly-long-analogy-about-ibma", new_path: "/posts/149-overly-long-analogy-about-ibma"},
  {old_path: "/2010/10/slightly-more-depth-wordpress", new_path: "/posts/151-slightly-more-depth-wordpress"},
  {old_path: "/2010/10/thursday-morning-coffee-n00b-developer-domains-and-hosting", new_path: "/posts/152-thursday-morning-coffee-n00b-developer-domains-and-hosting"},
  {old_path: "/2010/11/lets-try-something", new_path: "/posts/153-lets-try-something"},
  {old_path: "/2011/04/bluegrass-fans", new_path: "/posts/154-bluegrass-fans"},
  {old_path: "/2013/10/music-business-idea-i-havent-seen-tried-yet", new_path: "/posts/156-music-business-idea-i-havent-seen-tried-yet"},
  {old_path: "/2010/11/step-1-text-editor", new_path: "/posts/157-step-1-text-editor"},
  {old_path: "/2012/04/databases-cont-rookie-web-developer-series", new_path: "/posts/208-databases-cont-rookie-web-developer-series"},
  {old_path: "/2009/03/the-band-website-thing-contd", new_path: "/posts/160-the-band-website-thing-contd"},
  {old_path: "/2011/03/what-really-the-killed-music-industry", new_path: "/posts/162-what-really-the-killed-music-industry"},
  {old_path: "/2011/03/drupal-101", new_path: "/posts/163-drupal-101"},
  {old_path: "/2012/07/web-designer-or-web-developer", new_path: "/posts/165-web-designer-or-web-developer"},
  {old_path: "/2011/07/why-i-dig-sass-these-days-quick-version", new_path: "/posts/168-why-i-dig-sass-these-days-quick-version"},
  {old_path: "/2011/08/so-what-are-you", new_path: "/posts/169-so-what-are-you"},
  {old_path: "/2014/01/resetting-postgres-sequences", new_path: "/posts/170-resetting-postgres-sequences"},
  {old_path: "/2014/01/hex-values-rgb-and-me", new_path: "/posts/171-hex-values-rgb-and-me"},
  {old_path: "/2009/04/im-working-on-a-forum", new_path: "/posts/172-im-working-on-a-forum"},
  {old_path: "/2009/11/and-i-bid-you-goodnight", new_path: "/posts/173-and-i-bid-you-goodnight"},
  {old_path: "/2010/03/saturday-830pm", new_path: "/posts/174-saturday-830pm"},
  {old_path: "/2009/02/toward-point", new_path: "/posts/176-toward-point"},
  {old_path: "/2010/05/ignored-dinosaurs-part-2", new_path: "/posts/178-ignored-dinosaurs-part-2"},
  {old_path: "/2009/02/computers", new_path: "/posts/179-computers"},
  {old_path: "/2011/09/great-lie-lorem-ipsum", new_path: "/posts/180-great-lie-lorem-ipsum"},
  {old_path: "/2009/03/ror", new_path: "/posts/182-ror"},
  {old_path: "/2009/04/just-so-you-know", new_path: "/posts/183-just-so-you-know"},
  {old_path: "/2009/07/avc", new_path: "/posts/186-avc"},
  {old_path: "/2009/07/any-copyright-geeks-house", new_path: "/posts/189-any-copyright-geeks-house"},
  {old_path: "/2009/08/go-launch", new_path: "/posts/190-go-launch"},
  {old_path: "/2009/10/u2-play-free-concert-youtube", new_path: "/posts/193-u2-play-free-concert-youtube"},
  {old_path: "/2013/05/explaining-non-relational-databases-my-mom", new_path: "/posts/210-explaining-non-relational-databases-my-mom"},
  {old_path: "/2011/01/books", new_path: "/posts/209-books"},
  {old_path: "/2009/11/1st-set-meditation", new_path: "/posts/195-1st-set-meditation"},
  {old_path: "/2011/09/chris-pandolfi-ibma-keynote-2011", new_path: "/posts/196-chris-pandolfi-ibma-keynote-2011"},
  {old_path: "/2010/12/kaboom", new_path: "/posts/198-kaboom"},
  {old_path: "/2013/12/drupal-views-epiphany", new_path: "/posts/205-drupal-views-epiphany"},
  {old_path: "/2012/05/its-wizard-not-wand", new_path: "/posts/201-its-wizard-not-wand"},
  {old_path: "/2012/05/after-age-scarcity", new_path: "/posts/202-after-age-scarcity"},
  {old_path: "/2012/06/thing-about-rails-drupal", new_path: "/posts/203-thing-about-rails-drupal"},
  {old_path: "/2012/06/random-post-professing-love-my-macintosh", new_path: "/posts/204-random-post-professing-love-my-macintosh"},
  {old_path: "/2012/06/michael-daves-story", new_path: "/posts/206-michael-daves-story"},
  {old_path: "/2010/05/ignored-dinosaurs-part-1", new_path: "/posts/214-ignored-dinosaurs-part-1"},
  {old_path: "/2010/08/googleverizon-crap", new_path: "/posts/216-googleverizon-crap"},
  {old_path: "/2011/06/drupal-select-list-form-api-50-states", new_path: "/posts/219-drupal-select-list-form-api-50-states"},
  {old_path: "/2010/01/prepare-for-the-backlash", new_path: "/posts/211-prepare-for-the-backlash"},
  {old_path: "/2012/06/praise-jah", new_path: "/posts/212-praise-jah"},
  {old_path: "/2016/02/what-is-business-intelligence", new_path: "/posts/271-what-business-intelligence/"}
])
Tag.create!([
  {name: "ssh", slug: "ssh"},
  {name: "memories", slug: "memories"},
  {name: "the idea", slug: "the-idea"},
  {name: "ui", slug: "ui"},
  {name: "css", slug: "css"},
  {name: "javascript", slug: "javascript"},
  {name: "drupal", slug: "drupal"},
  {name: "databases", slug: "databases"},
  {name: "postgres", slug: "postgres"},
  {name: "devops", slug: "devops"},
  {name: "music", slug: "music"},
  {name: "business", slug: "business"},
  {name: "ruby", slug: "ruby"},
  {name: "open source", slug: "open-source"},
  {name: "theory", slug: "theory"},
  {name: "rails", slug: "rails"},
  {name: "mysql", slug: "mysql"},
  {name: "life", slug: "life"},
  {name: "random", slug: "random"},
  {name: "workflow", slug: "workflow"},
  {name: "testing", slug: "testing"},
  {name: "bluegrass", slug: "bluegrass"},
  {name: "git", slug: "git"},
  {name: "general development", slug: "general-development"},
  {name: "angular", slug: "angular"},
  {name: "analytics", slug: "analytics"},
  {name: "varnish", slug: "varnish"},
  {name: "bare minimum", slug: "bare-minimum"},
  {name: "brain dump", slug: "brain-dump"},
  {name: "laravel", slug: "laravel"},
  {name: "php", slug: "php"},
  {name: "elasticsearch", slug: "elasticsearch"},
  {name: "personal", slug: "personal"},
  {name: "python", slug: "python"},
  {name: "django", slug: "django"},
  {name: "platform.sh", slug: "platform-sh"}
])
Tagging.create!([
  {post_id: 223, tag_id: 1},
  {post_id: 33, tag_id: 2},
  {post_id: 33, tag_id: 3},
  {post_id: 176, tag_id: 3},
  {post_id: 5, tag_id: 3},
  {post_id: 222, tag_id: 4},
  {post_id: 222, tag_id: 5},
  {post_id: 222, tag_id: 6},
  {post_id: 221, tag_id: 2},
  {post_id: 13, tag_id: 6},
  {post_id: 2, tag_id: 7},
  {post_id: 170, tag_id: 8},
  {post_id: 170, tag_id: 9},
  {post_id: 171, tag_id: 4},
  {post_id: 171, tag_id: 6},
  {post_id: 171, tag_id: 5},
  {post_id: 205, tag_id: 7},
  {post_id: 53, tag_id: 7},
  {post_id: 53, tag_id: 10},
  {post_id: 52, tag_id: 4},
  {post_id: 52, tag_id: 6},
  {post_id: 52, tag_id: 5},
  {post_id: 156, tag_id: 11},
  {post_id: 156, tag_id: 12},
  {post_id: 45, tag_id: 7},
  {post_id: 45, tag_id: 13},
  {post_id: 45, tag_id: 10},
  {post_id: 44, tag_id: 7},
  {post_id: 44, tag_id: 14},
  {post_id: 43, tag_id: 6},
  {post_id: 155, tag_id: 9},
  {post_id: 155, tag_id: 10},
  {post_id: 42, tag_id: 10},
  {post_id: 38, tag_id: 7},
  {post_id: 38, tag_id: 10},
  {post_id: 210, tag_id: 8},
  {post_id: 210, tag_id: 15},
  {post_id: 223, tag_id: 10},
  {post_id: 222, tag_id: 15},
  {post_id: 128, tag_id: 13},
  {post_id: 128, tag_id: 16},
  {post_id: 128, tag_id: 10},
  {post_id: 132, tag_id: 11},
  {post_id: 34, tag_id: 8},
  {post_id: 34, tag_id: 10},
  {post_id: 34, tag_id: 17},
  {post_id: 150, tag_id: 18},
  {post_id: 40, tag_id: 7},
  {post_id: 122, tag_id: 7},
  {post_id: 121, tag_id: 19},
  {post_id: 26, tag_id: 6},
  {post_id: 25, tag_id: 10},
  {post_id: 25, tag_id: 20},
  {post_id: 24, tag_id: 21},
  {post_id: 24, tag_id: 6},
  {post_id: 23, tag_id: 16},
  {post_id: 23, tag_id: 10},
  {post_id: 206, tag_id: 11},
  {post_id: 206, tag_id: 2},
  {post_id: 220, tag_id: 11},
  {post_id: 220, tag_id: 22},
  {post_id: 206, tag_id: 22},
  {post_id: 191, tag_id: 4},
  {post_id: 204, tag_id: 19},
  {post_id: 164, tag_id: 16},
  {post_id: 212, tag_id: 16},
  {post_id: 212, tag_id: 19},
  {post_id: 202, tag_id: 19},
  {post_id: 202, tag_id: 12},
  {post_id: 208, tag_id: 8},
  {post_id: 149, tag_id: 22},
  {post_id: 196, tag_id: 22},
  {post_id: 169, tag_id: 18},
  {post_id: 169, tag_id: 22},
  {post_id: 167, tag_id: 10},
  {post_id: 167, tag_id: 23},
  {post_id: 25, tag_id: 23},
  {post_id: 219, tag_id: 7},
  {post_id: 37, tag_id: 11},
  {post_id: 37, tag_id: 22},
  {post_id: 37, tag_id: 12},
  {post_id: 154, tag_id: 22},
  {post_id: 163, tag_id: 7},
  {post_id: 162, tag_id: 11},
  {post_id: 162, tag_id: 12},
  {post_id: 51, tag_id: 19},
  {post_id: 36, tag_id: 18},
  {post_id: 36, tag_id: 22},
  {post_id: 161, tag_id: 18},
  {post_id: 209, tag_id: 24},
  {post_id: 198, tag_id: 12},
  {post_id: 218, tag_id: 11},
  {post_id: 159, tag_id: 18},
  {post_id: 159, tag_id: 12},
  {post_id: 158, tag_id: 3},
  {post_id: 158, tag_id: 11},
  {post_id: 158, tag_id: 12},
  {post_id: 35, tag_id: 11},
  {post_id: 114, tag_id: 7},
  {post_id: 114, tag_id: 13},
  {post_id: 148, tag_id: 11},
  {post_id: 148, tag_id: 18},
  {post_id: 157, tag_id: 24},
  {post_id: 153, tag_id: 24},
  {post_id: 152, tag_id: 24},
  {post_id: 120, tag_id: 19},
  {post_id: 151, tag_id: 24},
  {post_id: 119, tag_id: 3},
  {post_id: 9, tag_id: 3},
  {post_id: 9, tag_id: 11},
  {post_id: 9, tag_id: 12},
  {post_id: 7, tag_id: 3},
  {post_id: 7, tag_id: 11},
  {post_id: 7, tag_id: 12},
  {post_id: 97, tag_id: 11},
  {post_id: 97, tag_id: 12},
  {post_id: 160, tag_id: 3},
  {post_id: 207, tag_id: 3},
  {post_id: 18, tag_id: 11},
  {post_id: 18, tag_id: 12},
  {post_id: 224, tag_id: 16},
  {post_id: 224, tag_id: 10},
  {post_id: 225, tag_id: 10},
  {post_id: 226, tag_id: 2},
  {post_id: 227, tag_id: 10},
  {post_id: 227, tag_id: 24},
  {post_id: 228, tag_id: 4},
  {post_id: 229, tag_id: 19},
  {post_id: 229, tag_id: 2},
  {post_id: 230, tag_id: 11},
  {post_id: 231, tag_id: 25},
  {post_id: 231, tag_id: 6},
  {post_id: 231, tag_id: 7},
  {post_id: 232, tag_id: 18},
  {post_id: 233, tag_id: 6},
  {post_id: 233, tag_id: 25},
  {post_id: 234, tag_id: 10},
  {post_id: 234, tag_id: 24},
  {post_id: 235, tag_id: 18},
  {post_id: 236, tag_id: 10},
  {post_id: 236, tag_id: 24},
  {post_id: 236, tag_id: 25},
  {post_id: 237, tag_id: 7},
  {post_id: 238, tag_id: 25},
  {post_id: 238, tag_id: 7},
  {post_id: 239, tag_id: 6},
  {post_id: 240, tag_id: 18},
  {post_id: 241, tag_id: 7},
  {post_id: 241, tag_id: 25},
  {post_id: 241, tag_id: 6},
  {post_id: 242, tag_id: 6},
  {post_id: 242, tag_id: 26},
  {post_id: 239, tag_id: 26},
  {post_id: 243, tag_id: 27},
  {post_id: 244, tag_id: 6},
  {post_id: 245, tag_id: 6},
  {post_id: 247, tag_id: 18},
  {post_id: 248, tag_id: 18},
  {post_id: 249, tag_id: 7},
  {post_id: 250, tag_id: 28},
  {post_id: 250, tag_id: 10},
  {post_id: 251, tag_id: 18},
  {post_id: 251, tag_id: 19},
  {post_id: 252, tag_id: 29},
  {post_id: 252, tag_id: 27},
  {post_id: 252, tag_id: 7},
  {post_id: 252, tag_id: 10},
  {post_id: 253, tag_id: 24},
  {post_id: 254, tag_id: 19},
  {post_id: 255, tag_id: 11},
  {post_id: 255, tag_id: 18},
  {post_id: 256, tag_id: 10},
  {post_id: 257, tag_id: 21},
  {post_id: 257, tag_id: 25},
  {post_id: 258, tag_id: 24},
  {post_id: 259, tag_id: 30},
  {post_id: 260, tag_id: 7},
  {post_id: 261, tag_id: 30},
  {post_id: 261, tag_id: 16},
  {post_id: 262, tag_id: 31},
  {post_id: 262, tag_id: 24},
  {post_id: 263, tag_id: 18},
  {post_id: 264, tag_id: 7},
  {post_id: 264, tag_id: 10},
  {post_id: 265, tag_id: 10},
  {post_id: 266, tag_id: 10},
  {post_id: 267, tag_id: 10},
  {post_id: 267, tag_id: 32},
  {post_id: 268, tag_id: 33},
  {post_id: 269, tag_id: 33},
  {post_id: 270, tag_id: 11},
  {post_id: 271, tag_id: 12},
  {post_id: 272, tag_id: 24},
  {post_id: 272, tag_id: 34},
  {post_id: 273, tag_id: 7},
  {post_id: 274, tag_id: 7},
  {post_id: 127, tag_id: 18},
  {post_id: 200, tag_id: 31},
  {post_id: 275, tag_id: 34},
  {post_id: 272, tag_id: 35},
  {post_id: 275, tag_id: 35},
  {post_id: 246, tag_id: 11},
  {post_id: 276, tag_id: 7},
  {post_id: 277, tag_id: 31},
  {post_id: 278, tag_id: 7},
  {post_id: 279, tag_id: 7},
  {post_id: 280, tag_id: 7},
  {post_id: 291, tag_id: 10},
  {post_id: 282, tag_id: 20},
  {post_id: 282, tag_id: 7},
  {post_id: 283, tag_id: 27},
  {post_id: 57, tag_id: 18},
  {post_id: 258, tag_id: 16},
  {post_id: 258, tag_id: 35},
  {post_id: 145, tag_id: 3},
  {post_id: 178, tag_id: 3},
  {post_id: 21, tag_id: 3},
  {post_id: 144, tag_id: 3},
  {post_id: 133, tag_id: 18},
  {post_id: 195, tag_id: 18},
  {post_id: 118, tag_id: 16},
  {post_id: 118, tag_id: 24},
  {post_id: 117, tag_id: 24},
  {post_id: 65, tag_id: 19},
  {post_id: 54, tag_id: 24},
  {post_id: 47, tag_id: 24},
  {post_id: 166, tag_id: 24},
  {post_id: 10, tag_id: 24},
  {post_id: 29, tag_id: 3},
  {post_id: 142, tag_id: 24},
  {post_id: 60, tag_id: 24},
  {post_id: 80, tag_id: 19},
  {post_id: 48, tag_id: 19},
  {post_id: 284, tag_id: 24},
  {post_id: 284, tag_id: 35},
  {post_id: 285, tag_id: 7},
  {post_id: 286, tag_id: 7},
  {post_id: 287, tag_id: 7},
  {post_id: 288, tag_id: 18},
  {post_id: 289, tag_id: 24},
  {post_id: 290, tag_id: 24},
  {post_id: 289, tag_id: 18},
  {post_id: 292, tag_id: 24},
  {post_id: 294, tag_id: 24},
  {post_id: 294, tag_id: 10},
  {post_id: 294, tag_id: 15},
  {post_id: 293, tag_id: 40},
  {post_id: 294, tag_id: 40},
  {post_id: 296, tag_id: 40},
  {post_id: 297, tag_id: 40},
  {post_id: 298, tag_id: 40},
  {post_id: 298, tag_id: 30},
  {post_id: 297, tag_id: 30},
  {post_id: 296, tag_id: 9},
  {post_id: 299, tag_id: 40},
  {post_id: 299, tag_id: 30},
  {post_id: 300, tag_id: 30},
  {post_id: 300, tag_id: 31},
  {post_id: 305, tag_id: 6},
  {post_id: 305, tag_id: 40},
  {post_id: 306, tag_id: 18},
  {post_id: 307, tag_id: 10},
  {post_id: 307, tag_id: 40},
  {post_id: 308, tag_id: 18},
  {post_id: 309, tag_id: 18},
  {post_id: 309, tag_id: 11},
  {post_id: 310, tag_id: 24},
  {post_id: 310, tag_id: 40}
])
